
natural_language_goal: Enhance the `--list-models` command to fetch and optionally export comprehensive model details from OpenRouter API to a CSV file.
overall_context: |
  The task is to expand the functionality of the `ai-whisperer --list-models` command.
  The existing command only lists model names.
  The new functionality should retrieve detailed metadata and optionally save it to a CSV file.
  Adhere to the project's TDD methodology.
plan:
  - step_id: planning_command_enhancement
    description: Outline the required changes to the command-line interface and the API interaction logic.
    depends_on: []
    agent_spec:
    type: planning
    input_artifacts:
        - main.py
        - openrouter_api.py
    output_artifacts:
        - docs/list_models_enhancement_plan.md
    instructions: |
        Analyze the existing `main.py` to identify how command-line arguments are handled for `--list-models`.
        Determine the best way to add an optional `--output-csv` argument.
        Analyze `openrouter_api.py` to understand the existing `list_models` method and how to modify it to fetch comprehensive details.
        Identify the necessary data fields to retrieve based on the requirements (features, cost, context window, provider, etc.).
        Outline the high-level steps for modifying `main.py` and `openrouter_api.py` and adding CSV export logic.
        Document the plan in `docs/list_models_enhancement_plan.md`.
    validation_criteria:
        - docs/list_models_enhancement_plan.md exists.
        - docs/list_models_enhancement_plan.md clearly describes the necessary changes to `main.py` for argument parsing.
        - docs/list_models_enhancement_plan.md clearly describes the modification required for `openrouter_api.py`'s `list_models` method.
        - docs/list_models_enhancement_plan.md lists the required model metadata fields to be fetched.
        - docs/list_models_enhancement_plan.md outlines the process for formatting and exporting data to CSV.
  - step_id: test_generate_cli_arg_parsing
    description: Generate tests for the new `--output-csv` command-line argument parsing in `main.py`.
    depends_on:
      - planning_command_enhancement
    agent_spec:
    type: test_generation
    input_artifacts:
        - main.py
    output_artifacts:
        - tests/unit/test_cli_args.py
    instructions: |
        Generate unit tests for `main.py` that specifically cover the parsing of the new optional `--output-csv` argument when used with `--list-models`.
    Tests should verify:
        - The argument is correctly recognized.
        - The value provided (CSV filename) is captured.
        - The command behaves correctly when `--output-csv` is present.
        - The command behaves correctly when `--output-csv` is absent (should default to console output).
        Do NOT implement the actual argument parsing logic yet, only the tests for it.
    validation_criteria:
        - tests/unit/test_cli_args.py exists.
        - tests/unit/test_cli_args.py contains tests for `--list-models` with and without `--output-csv`.
        - Tests cover capturing the CSV filename value.
  - step_id: file_edit_cli_arg_parsing
    description: Modify `main.py` to implement the parsing for the new `--output-csv` argument.
    depends_on:
      - test_generate_cli_arg_parsing
    agent_spec:
    type: file_edit
    input_artifacts:
        - main.py
    output_artifacts:
        - main.py
    instructions: |
        Modify `main.py` to add the optional `--output-csv` argument to the argument parser when the `--list-models` command is used.
        Ensure the argument value (the output filename) is correctly stored and accessible.
        Do NOT implement the logic for fetching detailed data or exporting to CSV yet.
        Reuse existing argument parsing patterns in `main.py`.
        The code must pass the tests generated in `test_generate_cli_arg_parsing`.
    validation_criteria:
        - main.py is modified.
        - main.py includes the `--output-csv` argument definition for the list-models subcommand.
  - step_id: validation_cli_arg_parsing
    description: Validate the implementation of the `--output-csv` argument parsing by running the tests.
    depends_on:
      - file_edit_cli_arg_parsing
    agent_spec:
    type: validation
    input_artifacts:
        - main.py
        - tests/unit/test_cli_args.py
    instructions: |
        Run the unit tests located in `tests/unit/test_cli_args.py`.
        Verify that all tests related to `--list-models` and `--output-csv` parsing pass.
    validation_criteria:
        - The command `pytest tests/unit/test_cli_args.py` executes successfully.
        - All tests in `tests/unit/test_cli_args.py` related to `--list-models` and `--output-csv` pass.
  - step_id: test_generate_api_data_fetch
    description: Generate tests for fetching comprehensive model data from the OpenRouter API.
    depends_on:
      - planning_command_enhancement
    agent_spec:
    type: test_generation
    input_artifacts:
        - openrouter_api.py
    output_artifacts:
        - tests/unit/test_openrouter_api.py
    instructions: |
        Generate unit tests for `openrouter_api.py` that simulate fetching detailed model data.
        Use mocking if necessary to avoid making actual API calls during testing.
        Tests should verify that the `list_models` method, when modified, returns a list of model objects or dictionaries containing the expected detailed fields (features, cost data, context window, provider, etc.).
        Tests should cover the structure and presence of key data fields in the returned objects/dictionaries.
        Do NOT modify the `openrouter_api.py` code yet, only generate the tests based on the expected output structure.
    validation_criteria:
        - tests/unit/test_openrouter_api.py exists.
        - tests/unit/test_openrouter_api.py contains tests for `list_models` method returning detailed model data.
        - Tests verify the structure and presence of key metadata fields (features, cost, context window, provider).
  - step_id: file_edit_api_data_fetch
    description: Modify `openrouter_api.py` to fetch comprehensive model details.
    depends_on:
      - test_generate_api_data_fetch
      - file_edit_cli_arg_parsing
    agent_spec:
    type: file_edit
    input_artifacts:
        - openrouter_api.py
    output_artifacts:
        - openrouter_api.py
    instructions: |
        Modify the `list_models` method in `openrouter_api.py` to retrieve comprehensive model details from the OpenRouter API instead of just model names.
        Ensure the method returns a structured representation (e.g., a list of dictionaries or custom objects) containing all the required metadata fields identified in the planning step (features, cost data, context window, provider, etc.).
        Handle potential API response variations or errors gracefully.
        The code must produce output that passes the tests generated in `test_generate_api_data_fetch`.
    validation_criteria:
        - openrouter_api.py is modified.
        - The `list_models` method fetches and returns detailed model information.
        - The returned data includes fields for features, cost, context window, and provider.
  - step_id: validation_api_data_fetch
    description: Validate the API data fetching implementation by running the tests.
    depends_on:
      - file_edit_api_data_fetch
    agent_spec:
    type: validation
    input_artifacts:
        - openrouter_api.py
        - tests/unit/test_openrouter_api.py
    instructions: |
        Run the unit tests located in `tests/unit/test_openrouter_api.py`.
        Verify that all tests related to fetching detailed model data pass.
    validation_criteria:
        - The command `pytest tests/unit/test_openrouter_api.py` executes successfully.
        - All tests in `tests/unit/test_openrouter_api.py` related to detailed data fetching pass.
  - step_id: test_generate_csv_export
    description: Generate tests for formatting and exporting model data to a CSV file.
    depends_on:
      - planning_command_enhancement
      - file_edit_api_data_fetch
    agent_spec:
    type: test_generation
    input_artifacts: []
    output_artifacts:
        - tests/unit/test_csv_export.py
    instructions: |
        Generate unit tests for the CSV export functionality.
    Tests should cover:
        - Formatting structured model data (list of dicts/objects) into a CSV string or structure.
        - Writing the formatted data to a file with the correct filename.
        - Handling different data types and potential missing fields.
        - The header row contains the expected field names.
        Use mock data representing the detailed model information.
        Do NOT implement the CSV export logic yet, only generate the tests for it.
    validation_criteria:
        - tests/unit/test_csv_export.py exists.
        - tests/unit/test_csv_export.py contains tests for formatting data into CSV format.
        - Tests cover writing data to a file and checking file content structure (header, rows).
  - step_id: file_edit_csv_export
    description: Implement the logic for formatting and exporting model data to CSV in `main.py`.
    depends_on:
      - test_generate_csv_export
      - validation_api_data_fetch
      - validation_cli_arg_parsing
    agent_spec:
    type: file_edit
    input_artifacts:
        - main.py
        - openrouter_api.py
    output_artifacts:
        - main.py
    instructions: |
        Modify `main.py` to add the logic for handling the `--output-csv` argument value.
    When `--output-csv` is provided:
        - Call the modified `openrouter_api.list_models()` to get detailed data.
        - Format the detailed model data into a CSV compliant structure.
        - Write the formatted data to the file specified by the `--output-csv` argument.
        - Ensure the console output (present functionality) is suppressed when `--output-csv` is used.
    When `--output-csv` is NOT provided:
        - The existing console list functionality should remain (potentially updated to display more detail, though the requirement primarily focuses on CSV export and maintaining *basic* console output). Focus on the CSV export path first.
        Reuse existing file handling patterns if available.
        The code must pass the tests generated in `test_generate_csv_export`.
    validation_criteria:
        - main.py is modified.
        - main.py contains logic to check for the `--output-csv` argument.
        - main.py includes code to format model data into CSV.
        - main.py includes code to write formatted data to the specified CSV file.
  - step_id: validation_csv_export
    description: Validate the CSV export implementation by running the tests.
    depends_on:
      - file_edit_csv_export
    agent_spec:
    type: validation
    input_artifacts:
        - main.py
        - tests/unit/test_csv_export.py
        - openrouter_api.py
    instructions: |
        Run the unit tests located in `tests/unit/test_csv_export.py`.
        Verify that all tests related to CSV formatting and export pass.
        Additionally, run the application with the `--list-models --output-csv models.csv` command (using mocked API data if possible or a test config) and verify that `models.csv` is created and contains the expected header and formatted data rows.
    validation_criteria:
        - The command `pytest tests/unit/test_csv_export.py` executes successfully.
        - All tests in `tests/unit/test_csv_export.py` pass.
        - Running `ai-whisperer --list-models --output-csv test_output.csv` creates `test_output.csv`.
        - `test_output.csv` contains a header row with expected column names.
        - `test_output.csv` contains data rows corresponding to mock or actual model data.
  - step_id: file_edit_update_console_output
    description: Ensure console output still works when --output-csv is not specified. (Based on acceptance criteria)
    depends_on:
      - file_edit_csv_export
    agent_spec:
    type: file_edit
    input_artifacts:
        - main.py
    output_artifacts:
        - main.py
    instructions: |
        Review the changes made in `file_edit_csv_export` to ensure that the original console output functionality for `--list-models` is preserved when the `--output-csv` argument is *not* present.
        Make any necessary adjustments to `main.py` to ensure the basic list is printed to the console in this case.
    validation_criteria:
        - main.py is modified.
        - Running `ai-whisperer --list-models` (without --output-csv) prints output to the console.
        - The console output lists model names or basic information as before.
  - step_id: documentation_update
    description: Update documentation to reflect the new --output-csv feature.
    depends_on:
      - validation_csv_export
      - file_edit_update_console_output
    agent_spec:
    type: documentation
    input_artifacts:
        - README.md
    output_artifacts:
        - README.md
    instructions: |
        Update the project's README.md file to document the new `--output-csv` option for the `--list-models` command.
    Include:
        - A description of the new option.
        - How to use it (syntax).
        - An example usage command, similar to the one provided in the requirements.
        - Briefly mention the type of detailed information included in the CSV.
    validation_criteria:
        - README.md is modified.
        - README.md documents the `--output-csv` flag for `--list-models`.
        - README.md includes an example usage of `--list-models --output-csv`.
        - The documentation mentions that the CSV contains detailed model information.