{
  "description": "Generate tests for the new CLI command, including file handling and argument parsing.",
  "depends_on": [],
  "agent_spec": {
    "type": "test_generation",
    "input_artifacts": [
      "project_dev/in_dev/refine_requirements/plan_summary.md"
    ],
    "output_artifacts": [
      "tests/unit/test_refine_cli.py"
    ],
    "instructions": [
      "Create a new Python file `tests/unit/test_refine_cli.py`.",
      "Write unit tests for the `refine` CLI command implemented in `src/ai_whisperer/main.py` (assuming the CLI logic resides here or in a dedicated CLI module).",
      "Use the `pytest` framework.",
      "Mock the AI interaction logic (e.g., calls to `ai_whisperer.orchestrator` or similar) using `unittest.mock.patch` or `pytest-mock`.",
      "Mock file system operations (reading/writing files, checking existence) using `unittest.mock.patch` or `pytest-mock` to ensure tests are isolated.",
      "Include a test case to verify that the CLI correctly parses the input file path provided as an argument.",
      "Include a test case that simulates providing a path to a non-existent input file and verifies the expected error handling (e.g., exiting with an error code, printing an error message).",
      "Include a test case to verify the file renaming logic for the first iteration (N=1). This test should mock the file system to simulate the input file existing and verify that the output file is named correctly (e.g., `input_file.refined.1.md`).",
      "Include a test case to verify the file renaming logic for subsequent iterations (N incrementing). This test should mock the file system to simulate `input_file.refined.1.md` existing and verify that the output file is named correctly (e.g., `input_file.refined.2.md`).",
      "Include a test case that verifies the CLI correctly handles the `--prompt` option, ensuring the custom prompt path is parsed and potentially passed to the mocked AI interaction logic. The test should not actually use the prompt file or interact with the AI."
    ],
    "constraints": [
      "Tests must be isolated unit tests, not relying on actual AI calls or file system side effects.",
      "Do not write integration tests that involve the actual AI or file system.",
      "Adhere to standard Python testing practices and pytest conventions."
    ],
    "validation_criteria": [
      "The file `tests/unit/test_refine_cli.py` must be created.",
      "`tests/unit/test_refine_cli.py` must contain test functions (e.g., `test_parse_input_file`, `test_handle_nonexistent_file`, `test_rename_first_iteration`, `test_rename_subsequent_iteration`, `test_custom_prompt_option`).",
      "The tests in `test_refine_cli.py` must use mocking for AI interaction and file system operations.",
      "Running `pytest tests/unit/test_refine_cli.py` should execute the defined tests without errors."
    ]
  },
  "step_id": "generate_cli_tests",
  "task_id": "45512229-1ac2-4ee7-a859-5c5ff96118d1",
  "subtask_id": "e028b325-61ce-4cea-b12f-76b3a213749f"
}