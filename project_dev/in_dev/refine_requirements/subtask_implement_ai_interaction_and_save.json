{
  "description": "Implement the AI interaction and the saving of the refined requirements to a new file.",
  "depends_on": [],
  "agent_spec": {
    "type": "file_edit",
    "input_artifacts": [
      "project_dev/in_dev/refine_requirements/plan_summary.md",
      "tests/unit/test_refine_ai_interaction.py",
      "src/ai_whisperer/main.py",
      "src/ai_whisperer/openrouter_api.py",
      "prompts/orchestrator_default.md"
    ],
    "output_artifacts": [
      "src/ai_whisperer/main.py"
    ],
    "instructions": [
      "Locate the implementation of the 'refine' command within `src/ai_whisperer/main.py`.",
      "Modify the 'refine' command to accept an input file path and an optional prompt file path.",
      "Read the content of the input requirement document specified by the input file path.",
      "Read the content of the AI prompt. If a prompt file path is provided, read from that file. Otherwise, read the content of `prompts/orchestrator_default.md`.",
      "Combine the AI prompt content with the content of the input requirement document. The prompt should instruct the AI to refine the requirements based on the provided text.",
      "Call the appropriate function within `src/ai_whisperer/openrouter_api.py` (e.g., `complete_chat`) to send the combined text to the AI model.",
      "Handle the AI response received from the API call.",
      "Extract the refined requirements text from the AI response.",
      "Save the extracted refined requirements text to a *new* file. The new file should have the same name as the input file and be located in the same directory, effectively overwriting the original file.",
      "Implement error handling for potential issues during file reading (input file, prompt file), AI communication (API errors, timeouts), and file writing (permissions, disk space).",
      "Ensure the implementation aligns with the existing structure and patterns in `src/ai_whisperer/main.py` and utilizes existing utility functions where appropriate.",
      "Verify that the changes pass the unit tests related to the 'refine' command, specifically `tests/unit/test_refine_ai_interaction.py`."
    ],
    "constraints": [
      "The AI interaction must use the existing API handling code provided in `src/ai_whisperer/openrouter_api.py`.",
      "The file saving mechanism must be robust, handling potential write errors gracefully.",
      "The original input file should be effectively replaced by the new file containing the AI's response.",
      "The implementation should not introduce new external dependencies."
    ],
    "validation_criteria": [
      "The `refine` command in `src/ai_whisperer/main.py` accepts input and optional prompt file paths.",
      "The code correctly reads the input requirement document and the specified or default AI prompt.",
      "The combined prompt and document content is sent to the AI via `src/ai_whisperer/openrouter_api.py`.",
      "The AI response is processed, and the refined text is extracted.",
      "The refined text is saved to a new file overwriting the original input file.",
      "Error handling for file operations and AI communication is present and functional.",
      "All tests in `tests/unit/test_refine_ai_interaction.py` pass successfully."
    ]
  },
  "step_id": "implement_ai_interaction_and_save",
  "task_id": "45512229-1ac2-4ee7-a859-5c5ff96118d1",
  "subtask_id": "58e93712-0ee2-4a9d-b44a-4fe5c6d01805"
}