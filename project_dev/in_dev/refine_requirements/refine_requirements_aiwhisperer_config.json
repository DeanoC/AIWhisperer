{
  "natural_language_goal": "Implement a CLI command to refine requirements using AI.",
  "overall_context": "This feature adds a new capability to the AIWhisperer tool to improve requirement documents.",
  "plan": [
    {
      "step_id": "plan_refine_requirements_feature",
      "description": "Develop a high-level plan for the refine requirements feature, including CLI design and AI interaction.",
      "depends_on": [],
      "agent_spec": {
        "type": "planning",
        "input_artifacts": [
          "project_dev/rfc/refine_requirements.md",
          "docs/configuration.md",
          "src/ai_whisperer/main.py"
        ],
        "output_artifacts": [
          "project_dev/in_dev/refine_requirements/plan_summary.md"
        ],
        "instructions": [
          "Review the provided requirements and current codebase.",
          "Design the CLI interface for the refine command.",
          "Outline how the tool will read the input file, interact with the AI, and save the output.",
          "Consider the file renaming and iteration numbering logic.",
          "Document the plan in 'plan_summary.md'."
        ],
        "constraints": [
          "The CLI design should be consistent with existing commands.",
          "File operations must handle potential errors gracefully."
        ],
        "validation_criteria": [
          "project_dev/in_dev/refine_requirements/plan_summary.md exists.",
          "plan_summary.md clearly defines the CLI command and arguments.",
          "plan_summary.md outlines the file processing and AI interaction flow.",
          "plan_summary.md addresses the file renaming logic."
        ]
      }
    },
    {
      "step_id": "generate_cli_tests",
      "description": "Generate tests for the new CLI command, including file handling and argument parsing.",
      "depends_on": [
        "plan_refine_requirements_feature"
      ],
      "agent_spec": {
        "type": "test_generation",
        "input_artifacts": [
          "project_dev/in_dev/refine_requirements/plan_summary.md"
        ],
        "output_artifacts": [
          "tests/unit/test_refine_cli.py"
        ],
        "instructions": [
          "Create unit tests for the new refine CLI command.",
          "Tests should cover:",
          "- Correct parsing of input file path.",
          "- Handling of non-existent input files.",
          "- Correct application of the file renaming logic for the first iteration (N=1).",
          "- Correct application of the file renaming logic for subsequent iterations (N incrementing).",
          "- Handling of the custom prompt option (though AI interaction itself is mocked).",
          "Use mock objects for AI interaction and file system operations where necessary."
        ],
        "constraints": [
          "Tests must be isolated unit tests, not relying on actual AI calls or file system side effects."
        ],
        "validation_criteria": [
          "tests/unit/test_refine_cli.py exists.",
          "test_refine_cli.py contains tests for file path parsing.",
          "test_refine_cli.py contains tests for file renaming logic.",
          "test_refine_cli.py includes tests for handling non-existent input files."
        ]
      }
    },
    {
      "step_id": "implement_cli_command",
      "description": "Implement the new CLI command for refining requirements, including file handling and argument parsing.",
      "depends_on": [
        "generate_cli_tests"
      ],
      "agent_spec": {
        "type": "file_edit",
        "input_artifacts": [
          "project_dev/in_dev/refine_requirements/plan_summary.md",
          "tests/unit/test_refine_cli.py",
          "src/ai_whisperer/main.py",
          "src/ai_whisperer/utils.py"
        ],
        "output_artifacts": [
          "src/ai_whisperer/main.py",
          "src/ai_whisperer/utils.py"
        ],
        "instructions": [
          "Add a new command 'refine' to the AIWhisperer CLI using `argparse` or similar.",
          "The command should accept an input file path and an optional custom prompt file path.",
          "Implement the logic to read the input file.",
          "Implement the file renaming logic: rename the input file to `<filename>_iteration<N>.md`, where N is the next iteration number.",
          "Determine the next iteration number by checking for existing files with the iteration pattern.",
          "Use existing utility functions in `src/ai_whisperer/utils.py` where applicable.",
          "Do NOT implement the AI interaction or saving the new file in this step."
        ],
        "constraints": [
          "The CLI should provide helpful usage messages.",
          "File renaming logic must correctly handle file extensions and paths."
        ],
        "validation_criteria": [
          "src/ai_whisperer/main.py is updated with the 'refine' command.",
          "The 'refine' command accepts an input file argument.",
          "The file renaming logic is implemented based on the plan.",
          "The implementation passes the tests in tests/unit/test_refine_cli.py."
        ]
      }
    },
    {
      "step_id": "validate_cli_command",
      "description": "Validate the implementation of the new CLI command and file handling.",
      "depends_on": [
        "implement_cli_command"
      ],
      "agent_spec": {
        "type": "validation",
        "input_artifacts": [
          "src/ai_whisperer/main.py",
          "tests/unit/test_refine_cli.py"
        ],
        "output_artifacts": [],
        "instructions": [
          "Run the unit tests for the refine CLI command in tests/unit/test_refine_cli.py.",
          "Verify that all tests pass.",
          "Manually test the CLI command with dummy files to ensure correct argument parsing and file renaming."
        ],
        "constraints": [],
        "validation_criteria": [
          "All tests in tests/unit/test_refine_cli.py pass.",
          "Manual testing confirms correct CLI argument parsing.",
          "Manual testing confirms correct file renaming for first and subsequent iterations."
        ]
      }
    },
    {
      "step_id": "generate_ai_interaction_tests",
      "description": "Generate tests for interacting with the AI for requirements refinement.",
      "depends_on": [
        "validate_cli_command",
        "plan_refine_requirements_feature"
      ],
      "agent_spec": {
        "type": "test_generation",
        "input_artifacts": [
          "project_dev/in_dev/refine_requirements/plan_summary.md",
          "src/ai_whisperer/openrouter_api.py"
        ],
        "output_artifacts": [
          "tests/unit/test_refine_ai_interaction.py"
        ],
        "instructions": [
          "Create unit tests for the AI interaction part of the refine requirements feature.",
          "Tests should cover:",
          "- Correctly forming the prompt sent to the AI, including the default prompt and incorporating the requirement document content.",
          "- Correctly incorporating a custom prompt when provided.",
          "- Handling of the AI response (mocked).",
          "- Saving the AI response to the new file (mocking file writing).",
          "Mock the actual AI API calls."
        ],
        "constraints": [
          "Tests must not make actual API calls."
        ],
        "validation_criteria": [
          "tests/unit/test_refine_ai_interaction.py exists.",
          "test_refine_ai_interaction.py contains tests for prompt construction.",
          "test_refine_ai_interaction.py contains tests for handling AI responses.",
          "test_refine_ai_interaction.py includes tests for using custom prompts."
        ]
      }
    },
    {
      "step_id": "implement_ai_interaction_and_save",
      "description": "Implement the AI interaction and the saving of the refined requirements to a new file.",
      "depends_on": [
        "generate_ai_interaction_tests"
      ],
      "agent_spec": {
        "type": "file_edit",
        "input_artifacts": [
          "project_dev/in_dev/refine_requirements/plan_summary.md",
          "tests/unit/test_refine_ai_interaction.py",
          "src/ai_whisperer/main.py",
          "src/ai_whisperer/openrouter_api.py",
          "prompts/orchestrator_default.md"
        ],
        "output_artifacts": [
          "src/ai_whisperer/main.py"
        ],
        "instructions": [
          "Modify the 'refine' command implementation in `src/ai_whisperer/main.py`.",
          "Add the logic to read the default AI prompt (or custom prompt if provided).",
          "Combine the prompt with the content of the input requirement document.",
          "Call the appropriate function (likely in `src/ai_whisperer/openrouter_api.py`) to send the combined text to the AI.",
          "Handle the AI response.",
          "Save the AI's response to a *new* file with the original filename (overwriting it).",
          "Ensure proper error handling for AI communication and file writing."
        ],
        "constraints": [
          "The AI interaction should use existing API handling code.",
          "File saving must be robust and handle potential write errors."
        ],
        "validation_criteria": [
          "src/ai_whisperer/main.py includes the AI interaction logic.",
          "src/ai_whisperer/main.py includes the logic to save the AI response.",
          "The implementation passes the tests in tests/unit/test_refine_ai_interaction.py."
        ]
      }
    },
    {
      "step_id": "validate_ai_interaction_and_save",
      "description": "Validate the AI interaction and file saving logic.",
      "depends_on": [
        "implement_ai_interaction_and_save"
      ],
      "agent_spec": {
        "type": "validation",
        "input_artifacts": [
          "src/ai_whisperer/main.py",
          "tests/unit/test_refine_ai_interaction.py"
        ],
        "output_artifacts": [],
        "instructions": [
          "Run the unit tests for AI interaction and file saving in tests/unit/test_refine_ai_interaction.py.",
          "Verify that all tests pass.",
          "Perform integration testing by running the 'refine' command with a dummy requirement file.",
          "Verify that the original file is renamed correctly with the iteration number.",
          "Verify that a new file with the original filename is created containing the (mocked) AI response."
        ],
        "constraints": [],
        "validation_criteria": [
          "All tests in tests/unit/test_refine_ai_interaction.py pass.",
          "Integration testing confirms correct file renaming and creation of the new refined file.",
          "Manual testing with a custom prompt file works as expected."
        ]
      }
    },
    {
      "step_id": "update_documentation",
      "description": "Update documentation to include the new refine requirements CLI command.",
      "depends_on": [
        "validate_ai_interaction_and_save"
      ],
      "agent_spec": {
        "type": "documentation",
        "input_artifacts": [
          "src/ai_whisperer/main.py",
          "docs/usage.md",
          "README.md"
        ],
        "output_artifacts": [
          "docs/usage.md",
          "README.md"
        ],
        "instructions": [
          "Update the documentation files 'docs/usage.md' and 'README.md' to describe the new 'refine' CLI command.",
          "Explain how to use the command, including the input file argument and the optional custom prompt argument.",
          "Describe the file renaming behavior.",
          "Provide examples of command usage."
        ],
        "constraints": [
          "Documentation must be clear, concise, and accurate."
        ],
        "validation_criteria": [
          "docs/usage.md is updated and describes the 'refine' command.",
          "README.md is updated and mentions the 'refine' command.",
          "Documentation includes examples of command usage."
        ]
      }
    }
  ],
  "task_id": "45512229-1ac2-4ee7-a859-5c5ff96118d1",
  "input_hashes": {
    "requirements_md": "90c7ae88e36fe1a7b81e3e0c0576ff33ad180cf8e48e7283a05d710e4d5b37fd",
    "config_json": "eaaa4544d932ac66823099dfbeb80082fff062e3c285c74ca459fd0606eab63a",
    "prompt_file": "33034ab75c02037264e5d24f7c87b6ecf9c38ce56055c7a0190e58865e5e0bdc"
  }
}