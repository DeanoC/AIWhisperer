{
  "description": "Generate tests for the new 'run' CLI command, including argument parsing, file handling, and orchestrator interaction.",
  "depends_on": [],
  "agent_spec": {
    "type": "test_generation",
    "input_artifacts": [
      "project_dev/in_dev/add_run_cli_command/run_cli_command_plan.md"
    ],
    "output_artifacts": [
      "tests/unit/test_main_run_command.py"
    ],
    "instructions": [
      "Create a new Python file `tests/unit/test_main_run_command.py`.",
      "Write unit tests for the `run` command added to `src/ai_whisperer/main.py`.",
      "Use `pytest` for the test framework.",
      "Implement test cases to cover the following scenarios for the `run` command:",
      "- Verify that the command correctly parses the input overview JSON file path provided via a command-line argument.",
      "- Verify that the command correctly parses the output state file path provided via a command-line argument.",
      "- Test the behavior when required arguments (like the overview file path) are missing.",
      "- Test the behavior when the specified input overview JSON file does not exist.",
      "- Use `unittest.mock.patch` or `pytest-mock` to mock the `orchestrator.run_task` function.",
      "- Ensure that the mocked `orchestrator.run_task` is called exactly once with the correct arguments (parsed overview data and output state file path).",
      "- Use `unittest.mock.patch` or `pytest-mock` to mock state management functions (e.g., `state_management.load_state`, `state_management.save_state`) if the implementation uses them directly within the CLI command handler.",
      "- Verify that state management functions are called with the expected file paths and data.",
      "- Structure the tests logically within the `test_main_run_command.py` file, using appropriate test functions and potentially classes if helpful."
    ],
    "constraints": [
      "Tests must be unit tests, focusing on the `run` command's logic in `src/ai_whisperer/main.py`.",
      "External dependencies like the orchestrator, file system operations (for file existence checks), and state management must be mocked.",
      "Do not implement integration tests in this file; focus solely on unit testing the CLI command's argument parsing and interaction with mocked dependencies."
    ],
    "validation_criteria": [
      "The file `tests/unit/test_main_run_command.py` exists.",
      "The file `tests/unit/test_main_run_command.py` contains `pytest` test functions.",
      "Test cases cover parsing of both input overview file path and output state file path arguments.",
      "There are test cases for missing required arguments.",
      "There are test cases for non-existent input overview files.",
      "Mocking is used for `orchestrator.run_task`.",
      "Tests verify that `orchestrator.run_task` is called with correct arguments.",
      "Mocking is used for state management load/save functions if applicable.",
      "Tests verify state management functions are called with correct file paths if applicable.",
      "All tests pass when run with `pytest`."
    ]
  },
  "step_id": "generate_run_cli_tests",
  "task_id": "721123e6-9b41-4a56-9ed5-130d03f17602",
  "subtask_id": "248e7305-ca77-48e8-9a07-638f44ba9f47"
}