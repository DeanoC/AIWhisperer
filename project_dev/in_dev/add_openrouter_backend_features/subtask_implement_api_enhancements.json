{
  "description": "Implement the planned enhancements in the Openrouter API wrapper.",
  "depends_on": [],
  "agent_spec": {
    "type": "file_edit",
    "input_artifacts": [
      "project_dev/in_dev/add_openrouter_backend_features/planning_summary.md",
      "tests/unit/test_openrouter_advanced_features.py",
      "src/ai_whisperer/openrouter_api.py"
    ],
    "output_artifacts": [
      "src/ai_whisperer/openrouter_api.py"
    ],
    "instructions": [
      "Open `src/ai_whisperer/openrouter_api.py` for editing.",
      "Read the `project_dev/in_dev/add_openrouter_backend_features/planning_summary.md` to understand the planned enhancements.",
      "Modify the `OpenrouterAPI.chat_completion` method in `src/ai_whisperer/openrouter_api.py` to accept an optional `system_prompt` parameter. Integrate this parameter into the API call payload.",
      "Modify the `OpenrouterAPI.chat_completion` method to accept an optional `tools` parameter (list of tool definitions). Integrate this parameter into the API call payload.",
      "Modify the `OpenrouterAPI.chat_completion` method to accept an optional parameter (e.g., `response_format`) to request structured output (like JSON). Integrate this into the API call payload.",
      "Modify the `OpenrouterAPI.chat_completion` method to accept an optional `cache_control` parameter. Integrate this into the API call headers or payload as specified by the Openrouter API documentation.",
      "Modify the `OpenrouterAPI.chat_completion` method to handle messages containing multimodal content (images/PDFs). This might involve adjusting how the `messages` parameter is structured or processed based on Openrouter API requirements for multimodal input.",
      "Ensure that the changes made in `src/ai_whisperer/openrouter_api.py` align with the tests defined in `tests/unit/test_openrouter_advanced_features.py`. The goal is for the new features to pass these tests.",
      "Review `src/ai_whisperer/utils.py` and `src/ai_whisperer/exceptions.py` for any existing helper functions or exception classes that can be reused or adapted for the new features.",
      "Add necessary import statements for any new libraries or modules used.",
      "Add docstrings to the modified or new methods explaining the new parameters and functionality.",
      "Save the changes to `src/ai_whisperer/openrouter_api.py`."
    ],
    "constraints": [
      "Do not alter the existing core functionality of the `chat_completion` method for users who do not provide the new parameters.",
      "Maintain high code clarity and readability.",
      "Follow existing code style and conventions in `src/ai_whisperer/openrouter_api.py`."
    ],
    "validation_criteria": [
      "The file `src/ai_whisperer/openrouter_api.py` has been modified.",
      "The `OpenrouterAPI.chat_completion` method includes logic to handle an optional `system_prompt` parameter in the API request.",
      "The `OpenrouterAPI.chat_completion` method includes logic to handle an optional `tools` parameter in the API request.",
      "The `OpenrouterAPI.chat_completion` method includes logic to handle a parameter for requesting structured output in the API request.",
      "The `OpenrouterAPI.chat_completion` method includes logic to handle an optional `cache_control` parameter in the API request.",
      "The `OpenrouterAPI.chat_completion` method includes logic to handle multimodal content (images/PDFs) within the `messages` parameter.",
      "The changes in `src/ai_whisperer/openrouter_api.py` should be compatible with the tests in `tests/unit/test_openrouter_advanced_features.py`."
    ]
  },
  "step_id": "implement_api_enhancements",
  "task_id": "aac35cec-4cc8-48a0-9b52-f63259caa6f7",
  "subtask_id": "2e082313-ee88-43ff-bacf-7289ab35e8f8"
}