{
  "description": "Generate new unit tests for the Openrouter API wrapper covering the new features.",
  "depends_on": [],
  "agent_spec": {
    "type": "test_generation",
    "input_artifacts": [
      "project_dev/in_dev/add_openrouter_backend_features/planning_summary.md",
      "tests/unit/test_openrouter_api.py",
      "tests/unit/test_openrouter_api_detailed.py"
    ],
    "output_artifacts": [
      "tests/unit/test_openrouter_advanced_features.py"
    ],
    "instructions": [
      "Create a new Python file at tests/unit/test_openrouter_advanced_features.py.",
      "Import necessary modules from `unittest`, `unittest.mock`, and the `ai_whisperer.openrouter_api` module.",
      "Create a test class, for example, `TestOpenrouterAdvancedFeatures`, inheriting from `unittest.TestCase`.",
      "Inside the test class, define test methods (prefixed with `test_`) for each advanced feature based on the planning summary (`project_dev/in_dev/add_openrouter_backend_features/planning_summary.md`).",
      "For system prompts, write a test that calls the relevant API method with a system prompt and asserts that the system prompt is correctly included in the request payload.",
      "For tool definitions and calls, write tests that:",
      "- Call the API method with tool definitions and assert they are correctly formatted in the request.",
      "- Simulate a tool call response from the mock API and assert that the wrapper correctly processes and returns the tool call information.",
      "For structured output requests, write a test that calls the API method with a structured output request (e.g., specifying `response_format={'type': 'json_object'}`) and asserts this is correctly included in the request payload.",
      "For cache control parameters, write a test that calls the API method with cache control parameters (e.g., `cache=False`) and asserts they are correctly included in the request payload.",
      "For image and PDF content in messages, write tests that:",
      "- Call the API method with messages containing image or PDF content (using base64 encoding or URLs if supported by the API).",
      "- Assert that the multimodal content is correctly formatted within the message payload according to the Openrouter API specification.",
      "Use `unittest.mock.patch` or `unittest.mock.Mock` to mock the underlying HTTP request library (e.g., `requests.post` or similar) to prevent actual external API calls.",
      "Ensure that the mock objects are configured to return predefined responses that simulate successful API calls for each test case.",
      "Focus on verifying that the `openrouter_api.py` wrapper correctly constructs the request payload and handles the response structure for each advanced feature.",
      "Do not write integration tests that rely on a live Openrouter API endpoint."
    ],
    "constraints": [
      "All tests must be unit tests using mocking for external dependencies.",
      "The test file must be named `tests/unit/test_openrouter_advanced_features.py`.",
      "Tests must cover the specific advanced features listed in the instructions."
    ],
    "validation_criteria": [
      "tests/unit/test_openrouter_advanced_features.py exists and is a valid Python file.",
      "The file contains a test class inheriting from `unittest.TestCase`.",
      "The file contains at least one test method (`test_*`) for system prompts.",
      "The file contains at least one test method (`test_*`) for tool definitions and calls.",
      "The file contains at least one test method (`test_*`) for structured output requests.",
      "The file contains at least one test method (`test_*`) for cache control parameters.",
      "The file contains at least one test method (`test_*`) for multimodal input (images/PDFs).",
      "Tests demonstrate the use of mocking for external API calls."
    ]
  },
  "step_id": "generate_api_tests",
  "task_id": "aac35cec-4cc8-48a0-9b52-f63259caa6f7",
  "subtask_id": "14c18019-f66a-469f-ba4b-88deb4e0eba8"
}