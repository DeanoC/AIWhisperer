{
  "description": "Implement the terminal monitor display improvements, including segment layout, outlining, output suppression, and coloring.",
  "instructions": [
    "Open `src/ai_whisperer/monitoring.py` for editing.",
    "Analyze the existing structure of the `monitoring.py` file to understand how terminal output is currently handled.",
    "Choose a suitable Python library for enhanced terminal display (e.g., `rich` is recommended for its features and ease of use) or decide to implement ASCII drawing manually.",
    "If using a library, add it to `requirements.txt` and install it.",
    "Design and implement the 3-segment horizontal layout. The center segment should be wider than the left and right segments.",
    "Add ASCII art or library-provided outlines around each of the three segments.",
    "Modify the logging or output handling mechanisms to reroute or suppress standard application output, ensuring it does not interfere with the dedicated monitor display area.",
    "Implement logic to color different types of output within the monitor segments:",
    "- Color log messages based on their level (e.g., INFO, WARNING, ERROR).",
    "- Color different event types displayed in the monitor.",
    "- Prettily format and color JSON data that appears in the monitor.",
    "Integrate the new display logic into the main monitoring loop or update function.",
    "Run the unit tests located in `tests/unit/test_terminal_monitor.py` and fix any failures.",
    "Examine `src/ai_whisperer/logging_custom.py` and `src/ai_whisperer/cli.py` for existing patterns related to terminal handling, logging, or output formatting that could be reused or integrated.",
    "Ensure the implementation adheres to the specified constraints, particularly regarding compatibility and avoiding blocking the main thread.",
    "Save the changes to `src/ai_whisperer/monitoring.py`."
  ],
  "input_artifacts": [
    "docs/monitor_terminal_analysis.md",
    "tests/unit/test_terminal_monitor.py",
    "src/ai_whisperer/logging_custom.py",
    "src/ai_whisperer/cli.py"
  ],
  "output_artifacts": [
    "src/ai_whisperer/monitoring.py",
    "requirements.txt"
  ],
  "constraints": [
    "Maintain compatibility with common terminal emulators.",
    "Avoid blocking the main application thread with terminal updates if possible.",
    "Prioritize using a well-maintained library like `rich` over manual ASCII drawing if it simplifies implementation and maintenance.",
    "The center segment must be noticeably wider than the side segments."
  ],
  "validation_criteria": [
    "`src/ai_whisperer/monitoring.py` has been modified.",
    "The code in `src/ai_whisperer/monitoring.py` implements a 3-segment horizontal layout with the center segment wider.",
    "ASCII art or graphical outlines are drawn around each segment in the terminal display.",
    "Non-monitor output is successfully suppressed or rerouted away from the main monitor display area.",
    "Log messages, event types, and JSON data within the monitor are colored according to their type/level.",
    "All tests in `tests/unit/test_terminal_monitor.py` pass.",
    "When running the application with the monitor enabled, the terminal display matches the specified layout, outlining, suppression, and coloring requirements."
  ],
  "type": "file_edit",
  "name": "implement_terminal_display",
  "depends_on": [
    "generate_terminal_display_tests"
  ],
  "task_id": "73d077d3-8e90-44c3-8da2-65c9aa7538d0",
  "subtask_id": "eec7cd52-2417-44a1-92dd-aa967d542a42"
}