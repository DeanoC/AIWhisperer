{
  "description": "Implement the Write Text File tool.",
  "instructions": [
    "Create a new Python file `src/ai_whisperer/tools/write_file_tool.py`.",
    "Define a class `WriteTextFileTool` in this file that inherits from `src/ai_whisperer/tools/base_tool.py.BaseTool`.",
    "Implement the `__init__` method, potentially accepting configuration if needed (though not strictly required by the current instructions).",
    "Implement the `run` method. This method should accept `file_path` and `content` as arguments.",
    "Inside the `run` method, open the specified `file_path` in write mode ('w') and write the provided `content` to it.",
    "Include basic error handling for potential `IOError` (e.g., permission denied, invalid path).",
    "Implement the `get_openrouter_api_definition` method. This method should return a dictionary defining the tool's signature for the Openrouter API, including parameters for `file_path` (string) and `content` (string).",
    "Implement the `get_ai_prompt_instructions` method. This method should return a string providing clear instructions to the AI on how and when to use the 'Write Text File' tool, explaining its purpose (writing text to a file) and the required parameters (`file_path`, `content`).",
    "Ensure the implementation adheres to the constraints listed below.",
    "Run the unit tests in `tests/unit/test_file_tools.py` and ensure the tests related to the 'Write Text File' tool pass."
  ],
  "input_artifacts": [
    "docs/tool_interface_design.md",
    "src/ai_whisperer/tools/base_tool.py",
    "tests/unit/test_file_tools.py"
  ],
  "output_artifacts": [
    "src/ai_whisperer/tools/write_file_tool.py"
  ],
  "constraints": [
    "The tool should only write to text files (though the current implementation simply writes content, future validation might be needed).",
    "Handle permission errors gracefully by logging an error or raising a specific exception.",
    "The initial implementation should overwrite the file if it already exists.",
    "The tool should not attempt to create directories; the directory containing the file must already exist."
  ],
  "validation_criteria": [
    "The file `src/ai_whisperer/tools/write_file_tool.py` exists.",
    "The file `src/ai_whisperer/tools/write_file_tool.py` contains a class `WriteTextFileTool` inheriting from `BaseTool`.",
    "The `WriteTextFileTool` class has `run`, `get_openrouter_api_definition`, and `get_ai_prompt_instructions` methods implemented.",
    "The `run` method correctly writes the provided content to the specified file path.",
    "The `run` method includes basic error handling for file operations.",
    "The `get_openrouter_api_definition` method returns a valid dictionary conforming to the expected API schema for a tool with `file_path` and `content` parameters.",
    "The `get_ai_prompt_instructions` method returns a clear string explaining the tool's usage.",
    "All relevant unit tests in `tests/unit/test_file_tools.py` related to the 'Write Text File' tool pass successfully."
  ],
  "type": "code_generation",
  "name": "implement_write_text_file_tool",
  "depends_on": [
    "implement_tool_interface_and_management",
    "testgen_file_tools_and_management"
  ],
  "task_id": "a3fd54c4-30ec-4c58-a5a4-85fa7ad110ed",
  "subtask_id": "983a4c9d-8ea5-4361-be03-8aa281100f49"
}