{
  "description": "Implement the code for reading, parsing, and validating JSON plan files in the runner.",
  "depends_on": [],
  "agent_spec": {
    "type": "code_generation",
    "input_artifacts": [
      "project_dev/in_dev/plan-ingestion-and-parsing/plan_ingestion_parsing_design.md",
      "tests/unit/test_plan_ingestion.py",
      "tests/integration/test_runner_plan_ingestion.py",
      "src/ai_whisperer/schemas/task_schema.json",
      "src/ai_whisperer/schemas/subtask_schema.json",
      "src/ai_whisperer/json_validator.py"
    ],
    "output_artifacts": [
      "src/ai_whisperer/plan_parser.py"
    ],
    "instructions": [
      "Create a new Python module at `src/ai_whisperer/plan_parser.py`.",
      "Inside `plan_parser.py`, implement a function, e.g., `read_plan_file(file_path: str) -> str`, to read the content of a given JSON file.",
      "Implement a function, e.g., `parse_json_content(json_string: str) -> dict`, to parse the JSON string into a Python dictionary.",
      "Implement a function, e.g., `validate_plan_schema(plan_data: dict) -> None`, that takes the parsed plan data and uses the existing `src/ai_whisperer/json_validator.py` module to validate it against the `src/ai_whisperer/schemas/task_schema.json` and potentially `src/ai_whisperer/schemas/subtask_schema.json` if the plan structure requires nested validation.",
      "Combine these steps into a main ingestion function, e.g., `ingest_and_validate_plan(file_path: str) -> dict`, which orchestrates the reading, parsing, and validation.",
      "Implement robust error handling within `ingest_and_validate_plan` for common issues:",
      "- `FileNotFoundError` if the specified file does not exist.",
      "- `json.JSONDecodeError` for invalid JSON syntax.",
      "- Custom exceptions (or re-raise `jsonschema.ValidationError`) for schema validation failures using `json_validator.py`.",
      "Ensure that the implemented functions and error handling are covered by the provided tests (`tests/unit/test_plan_ingestion.py` and `tests/integration/test_runner_plan_ingestion.py`).",
      "Review `src/ai_whisperer/json_validator.py` for patterns and utility functions that can be reused in `plan_parser.py`."
    ],
    "constraints": [
      "The implementation must reside within the `src/ai_whisperer/plan_parser.py` file.",
      "The existing `src/ai_whisperer/json_validator.py` must be used for schema validation.",
      "The code must adhere to standard Python practices and be well-commented.",
      "Avoid introducing new external dependencies unless absolutely necessary and justified."
    ],
    "validation_criteria": [
      "The file `src/ai_whisperer/plan_parser.py` is created.",
      "The `plan_parser.py` module contains functions for reading, parsing, and validating JSON plan files.",
      "The schema validation logic in `plan_parser.py` successfully utilizes the `json_validator.py` module.",
      "The code includes error handling for file not found, invalid JSON, and schema validation errors.",
      "The implemented code passes the provided unit and integration tests related to plan ingestion and parsing."
    ]
  },
  "step_id": "implement_plan_ingestion_parsing",
  "task_id": "1e967a9a-79e9-4568-8957-5a69c0713a86",
  "subtask_id": "a98a2006-d3ed-4041-9833-213c8d8807da"
}