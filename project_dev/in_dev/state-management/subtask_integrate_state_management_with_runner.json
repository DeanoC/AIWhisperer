{
  "description": "Integrate the state management module into the runner's execution flow.",
  "depends_on": [],
  "agent_spec": {
    "type": "file_edit",
    "input_artifacts": [
      "src/ai_whisperer/orchestrator.py",
      "src/ai_whisperer/state_management.py",
      "project_dev/in_dev/state-management/state_management_design.md",
      "project_dev/rfc/runner/execution-engine.md"
    ],
    "output_artifacts": [
      "src/ai_whisperer/orchestrator.py"
    ],
    "instructions": [
      "Open `src/ai_whisperer/orchestrator.py`.",
      "Import necessary components from `src/ai_whisperer/state_management.py`.",
      "In the main execution function (e.g., `run_plan`), add logic to initialize or load the state management system at the very beginning.",
      "Determine appropriate points within the plan execution loop (e.g., after each subtask completion) to save the current state using the state management module's save function.",
      "Add logic to save the final state upon successful completion or specific failure points of the plan execution.",
      "Modify the execution logic to retrieve necessary intermediate results or context from the state management system as needed for subsequent steps.",
      "Ensure proper error handling around state loading and saving operations.",
      "Consult `project_dev/in_dev/state-management/state_management_design.md` and `project_dev/rfc/runner/execution-engine.md` for architectural details and specific requirements regarding state management integration points.",
      "Add comments to the code explaining the state management integration points and logic."
    ],
    "constraints": [
      "Do not modify any files other than `src/ai_whisperer/orchestrator.py`.",
      "The state management integration should be non-blocking where possible to avoid significantly impacting runner performance.",
      "Ensure backward compatibility with existing orchestrator logic where state management is not enabled (if applicable, based on design documents)."
    ],
    "validation_criteria": [
      "`src/ai_whisperer/orchestrator.py` contains imports from `state_management.py`.",
      "The `run_plan` function (or equivalent main execution function) in `orchestrator.py` includes calls to state management initialization/loading functions.",
      "The execution loop in `orchestrator.py` includes calls to state management saving functions at appropriate intervals (e.g., after task completion).",
      "The orchestrator logic demonstrates retrieval of state information where necessary for execution flow.",
      "The changes align with the integration points described in `project_dev/in_dev/state-management/state_management_design.md` and `project_dev/rfc/runner/execution-engine.md`."
    ]
  },
  "step_id": "integrate_state_management_with_runner",
  "task_id": "2ee64d42-4ddf-44eb-ac71-e9d5d00816de",
  "subtask_id": "a46265e1-9186-4f96-84ba-f728d859407f"
}