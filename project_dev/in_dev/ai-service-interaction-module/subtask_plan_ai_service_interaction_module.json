{
  "description": "Analyze requirements and design the architecture for the AI service interaction module.",
  "depends_on": [],
  "agent_spec": {
    "type": "planning",
    "input_artifacts": [
      "project_dev/rfc/runner/ai-service-interaction-module.md",
      "docs/configuration.md",
      "src/ai_whisperer/config.py",
      "src/ai_whisperer/openrouter_api.py"
    ],
    "output_artifacts": [
      "project_dev/in_dev/ai-service-interaction-module/ai_service_interaction_design.md"
    ],
    "instructions": [
      "Carefully read and understand the requirements for the AI service interaction module as outlined in `project_dev/rfc/runner/ai-service-interaction-module.md`.",
      "Examine the existing configuration handling in `docs/configuration.md` and `src/ai_whisperer/config.py` to understand how API keys and model selection are managed.",
      "Review the current OpenRouter API implementation in `src/ai_whisperer/openrouter_api.py` to identify reusable components and understand the current interaction pattern.",
      "Design the high-level architecture for the new AI service interaction module, considering how it will abstract different AI service providers (though initially focusing on OpenRouter).",
      "Define the structure and key components of the module, including classes and functions.",
      "Detail how the module will integrate with the existing configuration system to retrieve necessary API keys and selected model information.",
      "Outline the core functions required: one for sending prompts and handling standard (non-streaming) responses, and another for sending prompts and handling streaming responses.",
      "Specify the mechanism for handling authentication with AI services, ensuring it leverages the existing configuration.",
      "Identify and document potential error scenarios during AI service interaction (e.g., API errors, network issues, rate limits).",
      "Propose strategies for handling these errors within the module.",
      "Document the design in `project_dev/in_dev/ai-service-interaction-module/ai_service_interaction_design.md`."
    ],
    "constraints": [
      "The design must prioritize integration with the existing AIWhisperer configuration system.",
      "The design should be flexible enough to potentially support other AI services in the future, although the initial implementation focuses on OpenRouter.",
      "The design document must be clear, concise, and actionable for subsequent implementation steps."
    ],
    "validation_criteria": [
      "The file `project_dev/in_dev/ai-service-interaction-module/ai_service_interaction_design.md` is created.",
      "The design document contains a clear architectural overview of the AI service interaction module.",
      "The design document explicitly describes how the module will use the existing configuration for API keys and model selection.",
      "The design document details the proposed functions for handling both standard and streaming AI responses.",
      "The design document outlines the approach to authentication.",
      "The design document includes consideration for potential error handling.",
      "The design document proposes how this module will interact with other parts of the AIWhisperer runner (e.g., the execution engine, state management)."
    ]
  },
  "step_id": "plan_ai_service_interaction_module",
  "task_id": "525d04d4-42c9-4a08-ac2b-9461936ab13b",
  "subtask_id": "35a99bf3-c496-474a-b6fe-84053ab5fba9"
}