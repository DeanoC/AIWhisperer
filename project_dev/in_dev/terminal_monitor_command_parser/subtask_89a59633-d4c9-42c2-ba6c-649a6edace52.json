{
  "description": "Implement the 'exit', 'debugger', and 'ask' commands based on the design.",
  "instructions": [
    "Create a new Python module at `src/ai_whisperer/terminal_monitor/commands.py`.",
    "Define functions or classes within `commands.py` to handle the 'exit', 'debugger', and 'ask' terminal commands.",
    "For the 'exit' command handler, implement logic that signals the terminal monitor's main loop to terminate gracefully. This might involve setting a flag or raising a specific exception caught by the loop.",
    "For the 'debugger' command handler, implement logic to pause the current execution flow and provide a mechanism for attaching a debugger (e.g., using `breakpoint()` or similar).",
    "For the 'ask' command handler, parse the input string following the 'ask' command to extract the user's prompt. Then, call the appropriate AI interaction service function (which should be mocked for unit testing purposes in this subtask) with the extracted prompt.",
    "Ensure that the implemented command handlers integrate correctly with the command parser developed in a previous subtask. The parser should correctly identify and dispatch to these new handlers.",
    "Run the unit tests located in `tests/unit/test_terminal_commands.py`. Debug and modify the implementation in `src/ai_whisperer/terminal_monitor/commands.py` until all tests pass."
  ],
  "input_artifacts": [
    "docs/terminal_command_mode_design.md",
    "tests/unit/test_terminal_commands.py"
  ],
  "output_artifacts": [
    "src/ai_whisperer/terminal_monitor/commands.py"
  ],
  "constraints": [
    "The implementation should focus solely on the 'exit', 'debugger', and 'ask' commands.",
    "Actual debugger attachment and AI service calls within the command handlers must be mocked during unit testing to isolate the command logic.",
    "The implementation must adhere to the design specifications outlined in `docs/terminal_command_mode_design.md`."
  ],
  "validation_criteria": [
    "The file `src/ai_whisperer/terminal_monitor/commands.py` is created.",
    "The `commands.py` file contains distinct handlers for 'exit', 'debugger', and 'ask' commands.",
    "The 'exit' handler contains logic to signal termination.",
    "The 'debugger' handler contains logic to facilitate debugger attachment (e.g., `breakpoint()`).",
    "The 'ask' handler correctly parses the prompt from the input and calls a designated (potentially mocked) AI interaction function.",
    "All unit tests in `tests/unit/test_terminal_commands.py` execute without errors and pass successfully, confirming the correct behavior of the implemented commands and their integration with the parser."
  ],
  "type": "code_generation",
  "name": "implement_initial_commands",
  "depends_on": [
    "generate_tests_for_initial_commands"
  ],
  "task_id": "8765da11-b5e1-4946-99d7-7b6cadf9fcfc",
  "subtask_id": "89a59633-d4c9-42c2-ba6c-649a6edace52"
}