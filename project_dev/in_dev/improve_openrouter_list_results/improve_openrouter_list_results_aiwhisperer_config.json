{
  "natural_language_goal": "Enhance the --list-models command to display detailed model information and optionally export it to a CSV file.",
  "overall_context": "Improving the AIWhisperer tool's model selection capabilities.",
  "plan": [
    {
      "step_id": "plan_openrouter_list_enhancement",
      "description": "Analyze requirements and outline the necessary code modifications in main.py and openrouter_api.py, as well as the data structure for model details.",
      "depends_on": [],
      "agent_spec": {
        "type": "planning",
        "input_artifacts": [
          "project_dev/rfc/improve_openrouter_list_results.md",
          "src/ai_whisperer/main.py",
          "src/ai_whisperer/openrouter_api.py"
        ],
        "output_artifacts": [
          "docs/internal_process/openrouter_list_enhancement_plan.md"
        ],
        "instructions": [
          "Review the feature request for improving OpenRouter list models results.",
          "Identify the specific changes needed in main.py to handle the --output-csv argument.",
          "Determine how to modify OpenRouterAPI.list_models() to fetch comprehensive details.",
          "Outline the data structure required to store the detailed model information.",
          "Plan the CSV formatting and export logic.",
          "Document the planned changes in a markdown file."
        ],
        "constraints": [],
        "validation_criteria": [
          "docs/internal_process/openrouter_list_enhancement_plan.md exists.",
          "docs/internal_process/openrouter_list_enhancement_plan.md clearly outlines changes for main.py.",
          "docs/internal_process/openrouter_list_enhancement_plan.md clearly outlines changes for openrouter_api.py.",
          "docs/internal_process/openrouter_list_enhancement_plan.md describes the data structure for detailed model info.",
          "docs/internal_process/openrouter_list_enhancement_plan.md describes the CSV export logic."
        ]
      }
    },
    {
      "step_id": "generate_tests_for_list_models_enhancement",
      "description": "Create unit and integration tests for the enhanced --list-models command, including tests for handling --output-csv and verifying the structure of fetched data.",
      "depends_on": [
        "plan_openrouter_list_enhancement"
      ],
      "agent_spec": {
        "type": "test_generation",
        "input_artifacts": [
          "docs/internal_process/openrouter_list_enhancement_plan.md"
        ],
        "output_artifacts": [
          "tests/unit/test_main_list_models.py",
          "tests/unit/test_openrouter_api_list_models.py"
        ],
        "instructions": [
          "Based on the enhancement plan, create unit tests for main.py to verify correct parsing of the --output-csv argument.",
          "Create unit tests for openrouter_api.py to mock API responses and ensure that comprehensive model details are correctly parsed and returned.",
          "Create integration tests to simulate running the command with and without --output-csv and verify the output (console and generated file content/structure).",
          "Ensure tests cover edge cases like empty results or API errors."
        ],
        "constraints": [
          "Do not implement the actual code changes at this step, only generate tests."
        ],
        "validation_criteria": [
          "tests/unit/test_main_list_models.py exists and includes tests for --output-csv.",
          "tests/unit/test_openrouter_api_list_models.py exists and includes tests for parsing comprehensive model details.",
          "Tests cover scenarios with and without the --output-csv flag.",
          "Test names are descriptive and indicate the functionality being tested."
        ]
      }
    },
    {
      "step_id": "implement_main_list_models_enhancement",
      "description": "Modify main.py to accept the --output-csv argument and call the enhanced OpenRouter API method.",
      "depends_on": [
        "generate_tests_for_list_models_enhancement"
      ],
      "agent_spec": {
        "type": "file_edit",
        "input_artifacts": [
          "src/ai_whisperer/main.py",
          "docs/internal_process/openrouter_list_enhancement_plan.md",
          "tests/unit/test_main_list_models.py"
        ],
        "output_artifacts": [
          "src/ai_whisperer/main.py"
        ],
        "instructions": [
          "Edit src/ai_whisperer/main.py.",
          "Add an optional argument parser for --output-csv when --list-models is used.",
          "Update the logic to call the enhanced OpenRouter API method.",
          "If --output-csv is provided, handle saving the detailed output to the specified file.",
          "If --output-csv is not provided, maintain the existing console output behavior.",
          "Refer to the plan and tests for implementation details."
        ],
        "constraints": [
          "Only modify the relevant parts of main.py.",
          "Ensure existing functionality without --output-csv is preserved."
        ],
        "validation_criteria": [
          "src/ai_whisperer/main.py is modified.",
          "The code correctly parses the --output-csv argument.",
          "The code branches correctly based on the presence of --output-csv.",
          "No existing console output behavior is broken when --output-csv is absent."
        ]
      }
    },
    {
      "step_id": "implement_openrouter_api_list_models_enhancement",
      "description": "Modify OpenRouterAPI.list_models() to fetch and structure comprehensive model details.",
      "depends_on": [
        "implement_main_list_models_enhancement"
      ],
      "agent_spec": {
        "type": "file_edit",
        "input_artifacts": [
          "src/ai_whisperer/openrouter_api.py",
          "docs/internal_process/openrouter_list_enhancement_plan.md",
          "tests/unit/test_openrouter_api_list_models.py"
        ],
        "output_artifacts": [
          "src/ai_whisperer/openrouter_api.py"
        ],
        "instructions": [
          "Edit src/ai_whisperer/openrouter_api.py.",
          "Modify the list_models() method to make the API call that retrieves detailed model information.",
          "Parse the API response to extract relevant details like features, cost, context window, provider, etc.",
          "Structure the fetched data into a suitable format for processing and export (e.g., list of dictionaries).",
          "Refer to the plan and tests for implementation details."
        ],
        "constraints": [
          "Only modify the list_models method and related helper functions if necessary.",
          "Ensure the method returns detailed data when called."
        ],
        "validation_criteria": [
          "src/ai_whisperer/openrouter_api.py is modified.",
          "The list_models method fetches comprehensive data.",
          "The data is parsed and structured correctly.",
          "The method returns the detailed data."
        ]
      }
    },
    {
      "step_id": "implement_csv_export_logic",
      "description": "Add functionality to format the detailed model data and export it to a CSV file.",
      "depends_on": [
        "implement_openrouter_api_list_models_enhancement"
      ],
      "agent_spec": {
        "type": "code_generation",
        "input_artifacts": [
          "src/ai_whisperer/main.py",
          "src/ai_whisperer/openrouter_api.py",
          "docs/internal_process/openrouter_list_enhancement_plan.md",
          "tests/unit/test_main_list_models.py"
        ],
        "output_artifacts": [
          "src/ai_whisperer/utils.py"
        ],
        "instructions": [
          "Create or modify a utility function (potentially in utils.py) to handle CSV formatting and writing.",
          "This function should take the structured detailed model data and a file path as input.",
          "It should write the data to the specified CSV file, including appropriate headers.",
          "Ensure proper handling of data types and potential special characters in CSV.",
          "Integrate this logic into the main.py handling of the --output-csv argument.",
          "Refer to the plan and tests for implementation details."
        ],
        "constraints": [
          "Use the standard 'csv' Python library or similar.",
          "Ensure the CSV output is correctly formatted and readable by spreadsheet applications."
        ],
        "validation_criteria": [
          "A utility function for CSV export exists and is correctly implemented.",
          "The function takes detailed model data and a file path.",
          "The function writes data to the CSV file with headers.",
          "CSV formatting is correct."
        ]
      }
    },
    {
      "step_id": "validate_list_models_enhancement",
      "description": "Run the previously generated tests and manually verify the console output and CSV export.",
      "depends_on": [
        "implement_csv_export_logic"
      ],
      "agent_spec": {
        "type": "validation",
        "input_artifacts": [
          "src/ai_whisperer/main.py",
          "src/ai_whisperer/openrouter_api.py",
          "src/ai_whisperer/utils.py",
          "tests/unit/test_main_list_models.py",
          "tests/unit/test_openrouter_api_list_models.py"
        ],
        "output_artifacts": [],
        "instructions": [
          "Run the unit tests for main.py and openrouter_api.py.",
          "Run integration tests covering console output and CSV export.",
          "Manually execute the `ai-whisperer --list-models --config config.yaml` command and verify the console output is unchanged.",
          "Manually execute `ai-whisperer --list-models --config config.yaml --output-csv models.csv` and verify that models.csv is created and contains detailed, correctly formatted data.",
          "Check that all required model attributes are present in the CSV."
        ],
        "constraints": [],
        "validation_criteria": [
          "All relevant unit and integration tests pass.",
          "Console output for `--list-models` without `--output-csv` is correct and unchanged.",
          "models.csv file is created when `--output-csv models.csv` is used.",
          "models.csv contains headers and rows with detailed model information.",
          "Required model attributes (features, cost, context window, provider) are present in the CSV.",
          "The CSV file is correctly formatted and readable by spreadsheet software."
        ]
      }
    },
    {
      "step_id": "update_documentation",
      "description": "Update the documentation to reflect the new --output-csv option and the availability of detailed model information.",
      "depends_on": [
        "validate_list_models_enhancement"
      ],
      "agent_spec": {
        "type": "documentation",
        "input_artifacts": [
          "docs/usage.md"
        ],
        "output_artifacts": [
          "docs/usage.md"
        ],
        "instructions": [
          "Edit docs/usage.md.",
          "Add documentation for the new optional --output-csv parameter for the --list-models command.",
          "Explain the purpose and usage of --output-csv.",
          "Provide updated example usage commands.",
          "Mention the types of detailed model information now available.",
          "Ensure the documentation is clear and easy to understand."
        ],
        "constraints": [],
        "validation_criteria": [
          "docs/usage.md is modified.",
          "Documentation for --output-csv is added under the --list-models section.",
          "Example usage commands are updated or new examples are added.",
          "The documentation clearly describes the detailed information included in the CSV output.",
          "The documentation is grammatically correct and well-formatted."
        ]
      }
    }
  ],
  "task_id": "3628f8eb-55d4-4e1e-84fe-6f0f97d383dd",
  "input_hashes": {
    "requirements_md": "04a3feb3fd09a1abf2f451bd7ae8f48a27197749711f8879cf6ccad0dab471f3",
    "config_json": "eaaa4544d932ac66823099dfbeb80082fff062e3c285c74ca459fd0606eab63a",
    "prompt_file": "33034ab75c02037264e5d24f7c87b6ecf9c38ce56055c7a0190e58865e5e0bdc"
  }
}