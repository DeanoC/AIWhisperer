{
  "description": "Implement the changes in `main.py` and `openrouter_api.py` to add the --output-csv option and fetch/display detailed model information.",
  "depends_on": [],
  "agent_spec": {
    "type": "file_edit",
    "input_artifacts": [
      "project_dev/in_dev/improve_openrouter_list_results/implementation_plan.md",
      "src/ai_whisperer/main.py",
      "src/ai_whisperer/openrouter_api.py",
      "tests/test_main.py",
      "tests/test_openrouter_api.py"
    ],
    "output_artifacts": [
      "src/ai_whisperer/main.py",
      "src/ai_whisperer/openrouter_api.py"
    ],
    "instructions": [
      "Locate the argument parser setup for the `--list-models` command in `src/ai_whisperer/main.py`.",
      "Add an optional argument `--output-csv` to this parser. This argument should expect a file path string.",
      "In `src/ai_whisperer/main.py`, find the logic that handles the `--list-models` command.",
      "Modify this logic to check if the `--output-csv` argument was provided.",
      "Open `src/ai_whisperer/openrouter_api.py` and locate the `list_models` method.",
      "Update the `list_models` method to make an API call to OpenRouter's models endpoint that retrieves comprehensive details for each model (e.g., using the `/models` endpoint).",
      "Ensure the `list_models` method in `openrouter_api.py` returns a list of dictionaries or objects, where each item contains detailed information about a model (like `id`, `name`, `description`, `features`, `pricing`, `context_window`, `provider`, etc.).",
      "Return to `src/ai_whisperer/main.py` and update the code that calls `openrouter_api.list_models()` to handle the new, detailed data structure.",
      "If the `--output-csv` argument was NOT provided, implement logic to iterate through the detailed model data and print it to the console in a user-friendly, pretty-printed format. This format should include key details beyond just the name, but still maintain readability for console output.",
      "If the `--output-csv` argument WAS provided, implement logic to format the detailed model data and write it to the specified file path as a CSV file. Use Python's standard `csv` module for this.",
      "The CSV output should include columns for relevant model attributes like ID, Name, Description, Features, Pricing (input/output), Context Window, and Provider.",
      "Ensure that the console output when `--output-csv` is not used still displays a clear list of models, potentially with more detail than before but not overwhelming the user.",
      "Refer to `project_dev/in_dev/improve_openrouter_list_results/implementation_plan.md` for specific design details and requirements.",
      "Verify that the changes align with the tests generated in the previous step (though passing the tests is handled in a later step, the implementation should aim to satisfy them)."
    ],
    "constraints": [
      "Do not alter the core functionality of other commands in `main.py`.",
      "The existing behavior of `--list-models` when `--output-csv` is absent should be preserved in terms of listing models, though the displayed information can be enhanced.",
      "Use Python's standard `argparse` for argument handling.",
      "Use Python's standard `csv` module for CSV file writing.",
      "Handle potential API errors gracefully in `openrouter_api.py` and `main.py`."
    ],
    "validation_criteria": [
      "`src/ai_whisperer/main.py` includes the `--output-csv` argument for the `--list-models` command.",
      "`src/ai_whisperer/main.py` contains logic to check for the presence of `--output-csv`.",
      "`src/ai_whisperer/openrouter_api.py`'s `list_models` method fetches and returns comprehensive model details from the OpenRouter API.",
      "`src/ai_whisperer/main.py` processes the detailed model data received from `openrouter_api.list_models()`.",
      "`src/ai_whisperer/main.py` includes logic to pretty-print detailed model information to the console when `--output-csv` is not used.",
      "`src/ai_whisperer/main.py` includes logic to format and write detailed model information to a CSV file using the path from `--output-csv` when it is provided.",
      "The console output for `--list-models` without `--output-csv` still lists model names (potentially with added details).",
      "The CSV output includes relevant columns for model details."
    ]
  },
  "step_id": "implement_list_models_enhancement",
  "task_id": "238e023a-878b-46f5-ada3-105e5703e365"
}