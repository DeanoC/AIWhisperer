{
  "description": "Add functionality to format the detailed model data and export it to a CSV file.",
  "depends_on": [],
  "agent_spec": {
    "type": "code_generation",
    "input_artifacts": [
      "src/ai_whisperer/main.py",
      "src/ai_whisperer/openrouter_api.py",
      "docs/internal_process/openrouter_list_enhancement_plan.md",
      "tests/unit/test_main_list_models.py"
    ],
    "output_artifacts": [
      "src/ai_whisperer/utils.py"
    ],
    "instructions": [
      "Navigate to the `src/ai_whisperer/utils.py` file.",
      "Create a new function, for example `export_models_to_csv`, within this file.",
      "This function should accept two arguments: `model_data` (a list of dictionaries containing detailed model information) and `output_path` (a string representing the file path for the CSV output).",
      "Inside the function, open the file specified by `output_path` in write mode (`'w'`).",
      "Use the `csv` module to create a `csv.writer` object.",
      "Write the header row to the CSV file. The headers should correspond to the keys in the model data dictionaries (e.g., 'id', 'name', 'description', 'context_length', 'pricing', 'architecture', 'strengths', 'weaknesses', 'tags'). Ensure consistent ordering.",
      "Iterate through the `model_data` list.",
      "For each model dictionary, extract the values corresponding to the headers.",
      "Handle potential missing keys or `None` values gracefully (e.g., write empty strings or a placeholder).",
      "Write each row of model data to the CSV file using the `csv.writer`.",
      "Ensure proper handling of data types; convert non-string values to strings if necessary.",
      "Consider potential special characters within the data and ensure the `csv` module handles them correctly (e.g., commas within fields).",
      "Navigate to the `src/ai_whisperer/main.py` file.",
      "Locate the code section that handles the `list-models` command and the `--output-csv` argument.",
      "Modify this section to call the newly created `export_models_to_csv` function, passing the retrieved detailed model data and the specified output file path.",
      "Add necessary imports for the new utility function.",
      "Refer to the `docs/internal_process/openrouter_list_enhancement_plan.md` for the overall plan and context.",
      "Refer to `tests/unit/test_main_list_models.py` to understand the expected data structure and behavior, although this specific test might need updates later."
    ],
    "constraints": [
      "Use the standard `csv` Python library.",
      "The CSV output must be correctly formatted and readable by standard spreadsheet applications (e.g., Microsoft Excel, Google Sheets).",
      "The utility function should be placed in `src/ai_whisperer/utils.py`.",
      "The `export_models_to_csv` function should not print to standard output; it should only write to the specified file."
    ],
    "validation_criteria": [
      "A function named `export_models_to_csv` is present in `src/ai_whisperer/utils.py`.",
      "The `export_models_to_csv` function accepts `model_data` (list of dicts) and `output_path` (string) as arguments.",
      "Executing the `ai_whisperer list-models --output-csv <filepath>` command successfully creates a CSV file at `<filepath>`.",
      "The generated CSV file contains a header row corresponding to the keys in the detailed model data.",
      "The CSV file contains a row for each detailed model.",
      "The data in the CSV file is correctly formatted, with values corresponding to the headers in the correct columns.",
      "The CSV file is readable without errors by standard spreadsheet software."
    ]
  },
  "step_id": "implement_csv_export_logic",
  "task_id": "3628f8eb-55d4-4e1e-84fe-6f0f97d383dd"
}