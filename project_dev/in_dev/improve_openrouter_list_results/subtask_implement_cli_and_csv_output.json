{
  "description": "Modify main.py to accept --output-csv, fetch detailed data, and output to CSV.",
  "depends_on": [],
  "agent_spec": {
    "type": "file_edit",
    "input_artifacts": [
      "src/ai_whisperer/main.py",
      "src/ai_whisperer/openrouter_api.py",
      "tests/unit/test_main_list_models.py",
      "project_dev/in_dev/improve_openrouter_list_results/planning_summary.md"
    ],
    "output_artifacts": [
      "src/ai_whisperer/main.py"
    ],
    "instructions": [
      "Locate the argument parsing section in `src/ai_whisperer/main.py`.",
      "Add a new optional argument `--output-csv` to the `list-models` subcommand. This argument should specify the path to the output CSV file.",
      "Modify the logic within the `list-models` command handler function.",
      "Check if the `--output-csv` argument is provided.",
      "If `--output-csv` is provided, call the `OpenRouterAPI.list_models` method with a flag or parameter indicating that detailed model information is required (assuming this enhancement was done in a previous step).",
      "Process the detailed model data received from the API. This involves extracting relevant fields for the CSV output.",
      "Format the extracted data into a comma-separated value (CSV) string. Ensure proper handling of commas and quotes within data fields.",
      "Write the formatted CSV string to the file path specified by the `--output-csv` argument.",
      "If `--output-csv` is NOT provided, call the `OpenRouterAPI.list_models` method (it can still return detailed data, but you will only use a subset for console output).",
      "Process the model data for console output. Extract the necessary fields (e.g., model name, context window) and format them for clear display in the terminal.",
      "Print the formatted console output to standard output.",
      "Ensure that the existing console output format for `--list-models` remains consistent when `--output-csv` is not used."
    ],
    "constraints": [
      "Maintain backward compatibility for the `--list-models` command without the `--output-csv` argument. The default behavior should remain the same.",
      "Leverage existing CSV formatting utilities if available in the project, or implement a simple, robust CSV formatting logic within `main.py`.",
      "Do not introduce new dependencies for CSV handling if possible."
    ],
    "validation_criteria": [
      "Running `python -m ai_whisperer --list-models` should produce the standard console output.",
      "Running `python -m ai_whisperer --list-models --output-csv models.csv` should create a file named `models.csv` in the current directory.",
      "The `models.csv` file should contain a header row and rows of model data, with fields separated by commas.",
      "The content of `models.csv` should reflect the detailed information retrieved from the OpenRouter API.",
      "The console output when using `--output-csv` should still display a brief summary or confirmation message if appropriate, but the primary output is the file."
    ]
  },
  "step_id": "implement_cli_and_csv_output",
  "task_id": "bac1d332-c4a9-4b4c-8553-f27f24263d8e",
  "subtask_id": "ae44905e-de02-484c-af5a-86175abdc922"
}