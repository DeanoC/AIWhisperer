{
  "description": "Integrate the new `code_generation` handler into the main execution engine workflow.",
  "instructions": [
    "Open `src/ai_whisperer/execution_engine.py`.",
    "Locate the section responsible for dispatching tasks based on their `type`.",
    "Add a new case or condition to handle tasks with `type: code_generation`.",
    "This new case should instantiate the `CodeGenerationHandler` (or the appropriate class name for the handler) and call its `execute` method, passing the necessary task data and context.",
    "Ensure that the `CodeGenerationHandler` is correctly imported at the top of `execution_engine.py`. You may need to add an import statement like `from .agent_handlers.code_generation import CodeGenerationHandler`.",
    "Review the error handling logic in the execution engine to ensure that potential exceptions raised by the `CodeGenerationHandler` are caught and handled appropriately, maintaining the overall state of the plan execution.",
    "Verify that the state management within the execution engine correctly updates based on the outcome of the `code_generation` task.",
    "Open `src/ai_whisperer/agent_handlers/__init__.py`.",
    "Add an import statement for the new `CodeGenerationHandler` to make it available within the `agent_handlers` package.",
    "Review the interface of the `CodeGenerationHandler` (`src/ai_whisperer/agent_handlers/code_generation.py`) and the dispatch logic in `execution_engine.py` to ensure they are compatible and that the handler receives all necessary inputs.",
    "Make any minor adjustments to either file to ensure seamless integration, adhering to existing code style and patterns."
  ],
  "input_artifacts": [
    "src/ai_whisperer/execution_engine.py",
    "src/ai_whisperer/agent_handlers/__init__.py",
    "src/ai_whisperer/agent_handlers/code_generation.py"
  ],
  "output_artifacts": [
    "src/ai_whisperer/execution_engine.py",
    "src/ai_whisperer/agent_handlers/__init__.py"
  ],
  "constraints": [
    "The integration must not break existing functionality for other task types (e.g., `ai_interaction`, `planning`, `validation`, `no_op`).",
    "The execution engine must correctly instantiate and call the `code_generation` handler with the appropriate task data.",
    "Adhere to the existing code structure and patterns within `execution_engine.py` and `agent_handlers`."
  ],
  "validation_criteria": [
    "Modify a test plan (or create a simple dummy plan) that includes a `code_generation` task.",
    "Run the execution engine with this modified/dummy plan.",
    "Verify that the execution engine successfully processes the plan without errors.",
    "Confirm (e.g., through logging or debugging) that the `CodeGenerationHandler` is correctly invoked when the `code_generation` task is encountered.",
    "Run existing test plans for other task types to ensure no regressions were introduced.",
    "A basic end-to-end flow involving a dummy `code_generation` task (even one that does nothing but log its invocation) should run without errors."
  ],
  "type": "file_edit",
  "name": "integrate_code_generation_handler",
  "depends_on": [
    "implement_code_generation_handler_logic"
  ],
  "task_id": "28b11d1a-aeb6-4c57-8c3d-a85d3dbba0db",
  "subtask_id": "b7daf4b4-34bc-4aac-b5fc-59ef7efca931"
}