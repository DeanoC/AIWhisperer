description: Generate unit tests for the YAML syntax validation step.
depends_on:
- plan_postprocessing_steps
agent_spec:
  type: test_generation
  input_artifacts: []
  output_artifacts:
  - tests/unit/test_postprocessing_syntax.py
  instructions: "Generate a unit test file `tests/unit/test_postprocessing_syntax.py`\
    \ for a postprocessing step that validates and corrects basic YAML syntax issues.\n\
    Following the TDD approach, create test cases before implementing the actual validation\
    \ logic.\nThe tests should cover a comprehensive range of scenarios including:\n\
    1. Valid YAML structures (simple key-value pairs, lists, nested structures).\n\
    2. YAML with common syntax errors:\n   - Missing colons after keys.\n   - Incorrect\
    \ or inconsistent indentation.\n   - Invalid characters not allowed in YAML.\n\
    \   - Unquoted special characters where necessary.\n3. Edge cases:\n   - Empty\
    \ files.\n   - Files containing only comments.\n   - Files with leading/trailing\
    \ whitespace.\nThe tests should use `pytest` and assert that:\n- Valid YAML input\
    \ is processed without errors (or with expected corrections if the step includes\
    \ auto-correction).\n- Invalid YAML input correctly raises appropriate exceptions\
    \ or flags errors.\n- If the step includes correction logic, test cases should\
    \ verify the corrected output matches the expected valid YAML.\nConsider using\
    \ parameterized tests (`pytest.mark.parametrize`) for different valid and invalid\
    \ YAML inputs.\n"
  constraints:
  - Follow standard Python testing practices using `pytest`.
  - Ensure tests are isolated and do not depend on external state.
  - Use clear and descriptive test names.
  - Adhere to the project's code style (PEP 8).
  validation_criteria:
  - tests/unit/test_postprocessing_syntax.py exists.
  - tests/unit/test_postprocessing_syntax.py contains test functions prefixed with
    `test_`.
  - The test file includes test cases specifically targeting valid YAML input.
  - The test file includes multiple test cases for different types of common YAML
    syntax errors (missing colons, indentation, invalid characters).
  - The test file includes test cases for edge cases like empty files or files with
    only comments.
  - Tests for invalid YAML should assert that an error or exception is raised.
  - If the step includes correction logic, tests should verify the corrected output
    for specific invalid inputs.
subtask_id: d68966a2-e3f8-4a2f-98cf-daa28843c3c2
step_id: generate_test_for_syntax_step
