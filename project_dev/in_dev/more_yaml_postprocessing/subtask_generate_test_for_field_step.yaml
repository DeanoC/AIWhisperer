description: Generate unit tests for the required fields postprocessing step.
depends_on:
- plan_postprocessing_steps
agent_spec:
  type: test_generation
  input_artifacts: []
  output_artifacts:
  - tests/unit/test_postprocessing_fields.py
  instructions: 'Generate a unit test file `tests/unit/test_postprocessing_fields.py`
    for a postprocessing step that ensures required YAML fields are present with default
    values if missing.

    Adhere to the Test-Driven Development (TDD) approach by writing tests before implementing
    the actual postprocessing logic.

    The tests should cover the following scenarios thoroughly using `pytest`:

    1.  **All Required Fields Present:** Test a valid YAML input where all required
    fields are present with correct data types. Assert that the output YAML remains
    unchanged.

    2.  **Missing Required Fields:** Test YAML inputs missing one or more required
    fields. Assert that the postprocessing logic correctly adds the missing fields
    with their predefined default values.

    3.  **Extra/Invalid Fields:** Test YAML inputs containing fields not defined in
    the schema or extra fields. Assert that these extra/invalid fields are removed
    by the postprocessing logic.

    4.  **Incorrect Data Types:** Test YAML inputs where fields have incorrect data
    types (e.g., a string where an integer is expected). Assert that the postprocessing
    logic either corrects the type (if possible and defined) or removes the invalid
    field.

    5.  **Nested Structures:** Include tests with nested YAML structures to verify
    the handling of missing/invalid fields within nested objects or lists.

    6.  **Edge Cases:** Include tests for edge cases such as empty YAML input (`{}`
    or `""`) or fields explicitly set to `null`. Define expected behavior for these
    cases (e.g., adding all required fields with defaults for empty input).

    Assume a predefined dictionary or object representing the required schema with
    default values for testing purposes. You do not need to define this schema within
    the test file itself, but structure your tests as if such a schema exists and
    is used by the postprocessing function under test.

    '
  constraints:
  - Follow standard Python testing practices using `pytest`.
  - Ensure tests are independent and can be run in any order.
  - Use descriptive test function names and assertions.
  validation_criteria:
  - tests/unit/test_postprocessing_fields.py exists.
  - tests/unit/test_postprocessing_fields.py contains test functions covering scenarios
    for missing, invalid, extra, and incorrect data type fields, as well as nested
    structures and edge cases.
  - The test file should be syntactically correct Python code.
subtask_id: cd18ddaa-ec5f-4857-921d-dd0cc96eabc9
step_id: generate_test_for_field_step
