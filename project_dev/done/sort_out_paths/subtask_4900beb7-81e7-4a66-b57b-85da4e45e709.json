{
  "description": "Create unit tests for the path management singleton, covering initialization, default paths, setting paths, and templated path expansion for all four path types.",
  "instructions": [
    "Based on the design in docs/path_management_design.md, create a new Python file at tests/unit/test_path_management.py.",
    "Inside tests/unit/test_path_management.py, implement unit tests for the path management singleton.",
    "Include test cases that specifically cover:",
    "- Successful initialization of the singleton with default path values.",
    "- Setting custom paths for each of the four distinct directory types supported by the singleton.",
    "- Verifying the correct expansion of templated paths using various combinations of the {*_path} placeholders.",
    "- Testing the singleton's behavior when provided with invalid or malformed templated paths.",
    "- Writing tests that simulate accessing the singleton from different parts of a hypothetical application to ensure consistent behavior and state.",
    "Use a testing framework like `pytest`.",
    "Employ mocking techniques (e.g., `unittest.mock` or `pytest-mock`) to isolate the path management logic and avoid actual file system interactions where appropriate."
  ],
  "input_artifacts": [
    "docs/path_management_design.md"
  ],
  "output_artifacts": [
    "tests/unit/test_path_management.py"
  ],
  "constraints": [
    "Tests must cover all core functionalities designed for the path singleton as detailed in docs/path_management_design.md.",
    "Tests should use mocked file system operations where necessary to avoid actual file I/O.",
    "The test file must adhere to standard Python testing practices and naming conventions.",
    "The generated tests should be designed to pass once the path management singleton is correctly implemented."
  ],
  "validation_criteria": [
    "The file tests/unit/test_path_management.py exists.",
    "The test file contains distinct test functions or methods for initializing, setting, and expanding paths.",
    "The test suite in tests/unit/test_path_management.py can be executed using `pytest`.",
    "The generated tests compile and run without syntax errors."
  ],
  "type": "test_generation",
  "name": "create_path_management_tests",
  "depends_on": [
    "analyze_requirements_and_design_path_singleton"
  ],
  "task_id": "da0bff86-233d-4f69-bd5f-b4804aa4b3da",
  "subtask_id": "4900beb7-81e7-4a66-b57b-85da4e45e709"
}