{
  "description": "Modify the configuration loading and CLI argument parsing to initialize and override the path management singleton's values.",
  "instructions": [
    "Locate the `PathManager` singleton class in `src/ai_whisperer/path_management.py`. Ensure it has methods or properties to set the four path types (e.g., `set_project_root`, `set_output_dir`, etc.).",
    "Open `src/ai_whisperer/config.py`. Modify the `load_config` function to read configuration values for the four path types from the `config.yaml` file. Add default values if the paths are not specified in the config.",
    "Open `src/ai_whisperer/cli.py`. Add new command-line arguments for each of the four path types (e.g., `--project-root`, `--output-dir`, etc.) using `argparse` or the chosen CLI library. Ensure appropriate help messages are included.",
    "In `src/ai_whisperer/cli.py`, after parsing the arguments, extract the values for the path arguments.",
    "Locate the main application entry point, likely in `src/ai_whisperer/main.py`. Find where the application configuration and CLI arguments are processed.",
    "Modify the initialization logic in `src/ai_whisperer/main.py` to first load path values from the configuration file using the updated `load_config` function.",
    "Subsequently, if corresponding CLI arguments for paths are provided, use these values to override the ones loaded from the config.",
    "After determining the final path values (config overridden by CLI), initialize the `PathManager` singleton instance by calling its setter methods with these values.",
    "Ensure the `PathManager` singleton is initialized *before* any other part of the application that might rely on its path values.",
    "Review `tests/unit/test_config.py` and `tests/unit/test_cli.py`. Update existing tests or add new test cases to verify that:",
    "- Config loading correctly reads path values.",
    "- CLI argument parsing correctly identifies and extracts path values.",
    "- CLI arguments correctly override config values when both are provided.",
    "- The `PathManager` singleton is correctly initialized with the final determined path values.",
    "Run all unit tests to ensure the changes haven't introduced regressions and that the new tests pass."
  ],
  "input_artifacts": [
    "src/ai_whisperer/path_management.py",
    "src/ai_whisperer/config.py",
    "src/ai_whisperer/cli.py",
    "src/ai_whisperer/main.py",
    "config.yaml",
    "tests/unit/test_path_management.py",
    "tests/unit/test_config.py",
    "tests/unit/test_cli.py"
  ],
  "output_artifacts": [
    "src/ai_whisperer/config.py",
    "src/ai_whisperer/cli.py",
    "src/ai_whisperer/main.py",
    "tests/unit/test_config.py",
    "tests/unit/test_cli.py"
  ],
  "constraints": [
    "CLI arguments must override config values for paths.",
    "The path singleton must be initialized before any path-dependent operations.",
    "Changes should be limited to the specified files unless absolutely necessary for initialization logic.",
    "Maintain backward compatibility with existing config structure where possible."
  ],
  "validation_criteria": [
    "src/ai_whisperer/config.py and src/ai_whisperer/cli.py are modified.",
    "src/ai_whisperer/main.py is modified to include path singleton initialization.",
    "New CLI options for paths are added and documented (implicitly via help messages).",
    "Config loading includes logic to read path options.",
    "The application successfully initializes the `PathManager` singleton with values from config and CLI.",
    "CLI path arguments successfully override config path values.",
    "Existing and new unit tests for config and cli pass."
  ],
  "type": "file_edit",
  "name": "integrate_path_management_into_config_and_cli",
  "depends_on": [
    "implement_path_management_singleton"
  ],
  "task_id": "da0bff86-233d-4f69-bd5f-b4804aa4b3da",
  "subtask_id": "6654ad95-fef8-4e94-afad-149cd4c7ad96"
}