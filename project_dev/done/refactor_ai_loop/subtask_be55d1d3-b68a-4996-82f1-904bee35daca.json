{
  "description": "Modify code_generation.py and StateManager to use the new ContextManager and refactored AI loop.",
  "instructions": [
    "Open `src/ai_whisperer/agent_handlers/code_generation.py`.",
    "Identify the current implementation of the AI loop call within the code generation logic.",
    "Refactor the code generation logic to utilize the new function or class from `src/ai_whisperer/ai_loop.py` for AI interaction.",
    "Locate where message history or context is currently being managed or passed in `code_generation.py`.",
    "Modify `code_generation.py` to obtain the necessary message history and context by interacting with an instance of the `ContextManager`.",
    "Open `src/ai_whisperer/state_management.py`.",
    "Identify the appropriate place within `StateManager` to instantiate the `ContextManager`.",
    "Instantiate the `ContextManager` within `StateManager`, ensuring it's accessible to parts of the system that require context.",
    "Update `StateManager` to pass the `ContextManager` instance to the relevant components, particularly when invoking the AI loop logic (which is now integrated into `code_generation.py`).",
    "Review the AI loop calls in `code_generation.py` to ensure they are now correctly receiving and using the context from the `ContextManager` instance provided by `StateManager`.",
    "Make any necessary adjustments to method signatures or class interactions in both `code_generation.py` and `state_management.py` to accommodate the new dependency on `ContextManager`."
  ],
  "input_artifacts": [
    "src/ai_whisperer/agent_handlers/code_generation.py",
    "src/ai_whisperer/state_management.py",
    "src/ai_whisperer/ai_loop.py",
    "src/ai_whisperer/context_management.py"
  ],
  "output_artifacts": [
    "src/ai_whisperer/agent_handlers/code_generation.py",
    "src/ai_whisperer/state_management.py"
  ],
  "constraints": [
    "Ensure changes are limited to the specified files.",
    "Maintain the core functionality of the code generation process.",
    "Avoid introducing new dependencies outside of the already refactored components."
  ],
  "validation_criteria": [
    "The file `src/ai_whisperer/agent_handlers/code_generation.py` is modified to call the refactored AI loop logic from `src/ai_whisperer/ai_loop.py`.",
    "`code_generation.py` retrieves message history/context via a `ContextManager` instance.",
    "The file `src/ai_whisperer/state_management.py` is updated to instantiate and manage the `ContextManager`.",
    "`StateManager` provides the `ContextManager` instance to the parts of the system that need it, including the AI loop calls in `code_generation.py`.",
    "The project builds successfully without compilation errors.",
    "Existing tests (excluding those specifically designed to fail before this refactor) pass, indicating the core functionality is preserved."
  ],
  "type": "file_edit",
  "name": "integrate_context_manager_and_ai_loop",
  "depends_on": [
    "refactor_ai_loop",
    "implement_context_manager"
  ],
  "task_id": "1bc14942-c2cc-4e02-aa1a-78cfb861d8e9",
  "subtask_id": "be55d1d3-b68a-4996-82f1-904bee35daca"
}