{
  "description": "Extract and refactor the AI loop into a reusable component.",
  "instructions": [
    "Create a new Python file at the path `src/ai_whisperer/ai_loop.py`.",
    "Identify the core AI loop logic within the `src/ai_whisperer/agent_handlers/code_generation.py` file. This logic typically involves the iterative process of generating code, potentially running it, and refining based on results or feedback.",
    "Extract this identified core AI loop logic and move it into the newly created `src/ai_whisperer/ai_loop.py` file.",
    "Encapsulate the extracted logic within a well-defined Python function or class within `src/ai_whisperer/ai_loop.py`. Consider whether a function or a class better suits the structure and potential future extensions of the AI loop.",
    "Modify the refactored AI loop logic in `src/ai_whisperer/ai_loop.py` to accept and utilize context information provided by the `ContextManager` (expected to be implemented in `src/ai_whisperer/context_management.py`). This might involve passing an instance of the `ContextManager` or specific context data to the AI loop function or class methods.",
    "Ensure that the refactored AI loop component is designed to be reusable and independent of the specific `code_generation` agent handler.",
    "Update the `src/ai_whisperer/agent_handlers/code_generation.py` file to use the newly created AI loop component from `src/ai_whisperer/ai_loop.py`.",
    "Run the unit tests located in `tests/unit/test_ai_loop.py`. These tests should be designed to verify the functionality and correctness of the refactored AI loop.",
    "Address any test failures by debugging and modifying the code in `src/ai_whisperer/ai_loop.py` and potentially `src/ai_whisperer/agent_handlers/code_generation.py` until all tests pass."
  ],
  "input_artifacts": [
    "docs/ai_loop_refactor_plan.md",
    "tests/unit/test_ai_loop.py",
    "src/ai_whisperer/agent_handlers/code_generation.py",
    "src/ai_whisperer/context_management.py"
  ],
  "output_artifacts": [
    "src/ai_whisperer/ai_loop.py",
    "src/ai_whisperer/agent_handlers/code_generation.py"
  ],
  "constraints": [
    "The core AI loop logic must be completely extracted from `src/ai_whisperer/agent_handlers/code_generation.py`.",
    "The refactored AI loop must be implemented in a new file `src/ai_whisperer/ai_loop.py`.",
    "The refactored AI loop must be able to receive and use context from the `ContextManager`.",
    "The refactored AI loop should be designed for reusability.",
    "The refactored code must not introduce new bugs or break existing functionality."
  ],
  "validation_criteria": [
    "The file `src/ai_whisperer/ai_loop.py` exists.",
    "The core AI loop logic is successfully extracted into `src/ai_whisperer/ai_loop.py`.",
    "The `src/ai_whisperer/agent_handlers/code_generation.py` file is updated to use the new AI loop component.",
    "The refactored AI loop component correctly interacts with the `ContextManager`.",
    "All tests in `tests/unit/test_ai_loop.py` pass successfully.",
    "The refactored code adheres to the design principles outlined in `docs/ai_loop_refactor_plan.md` (if applicable)."
  ],
  "type": "code_generation",
  "name": "refactor_ai_loop",
  "depends_on": [
    "generate_ai_loop_tests",
    "design_ai_loop_refactor",
    "implement_context_manager"
  ],
  "task_id": "1bc14942-c2cc-4e02-aa1a-78cfb861d8e9",
  "subtask_id": "36268add-7b9a-4d46-8822-9a1d3f8027d1"
}