{
  "natural_language_goal": "Refactor the existing prompt loading system to be more centralized, structured, and support lazy loading with clear override and fallback mechanisms.",
  "plan": [
    {
      "name": "analyze_current_prompt_loading",
      "description": "Analyze the current implementation of prompt loading to understand its structure, dependencies, and limitations.",
      "depends_on": [],
      "type": "analysis",
      "input_artifacts": [
        "src/ai_whisperer/config.py",
        "src/ai_whisperer/ai_service_interaction.py",
        "src/ai_whisperer/subtask_generator.py"
      ],
      "output_artifacts": [
        "docs/prompt_loading_analysis.md"
      ],
      "instructions": [
        "Review the codebase to identify where prompts are currently loaded and accessed.",
        "Document the existing prompt structure and how defaults/overrides are handled.",
        "Highlight areas that need refactoring to meet the new requirements (centralized access, unified structure, lazy loading, section defaults/fallbacks, user overrides via config, app defaults)."
      ],
      "constraints": [],
      "validation_criteria": [
        "docs/prompt_loading_analysis.md is created.",
        "The analysis accurately describes the current prompt loading process.",
        "Key areas for refactoring are clearly identified."
      ],
      "subtask_id": "5cd3c0b3-ad03-40ed-9f8c-b2bf5c5a3c03"
    },
    {
      "name": "design_new_prompt_system",
      "description": "Design the architecture for the new centralized, structured, and lazy-loaded prompt system based on the analysis and requirements.",
      "depends_on": [
        "analyze_current_prompt_loading"
      ],
      "type": "planning",
      "input_artifacts": [
        "docs/prompt_loading_analysis.md"
      ],
      "output_artifacts": [
        "docs/prompt_system_design.md"
      ],
      "instructions": [
        "Define the unified structure for prompts within the configuration.",
        "Specify how section defaults and individual prompt overrides will be represented in the config.",
        "Outline the lazy loading mechanism.",
        "Detail the fallback logic: user config -> section default -> app default -> error.",
        "Describe the new class or module responsible for accessing prompts.",
        "Consider how user overrides via file paths will be handled.",
        "Include examples of the config structure for prompts as per the requirements.",
        "Specify the expected organization of default prompt files under `{app_path}/prompts`."
      ],
      "constraints": [],
      "validation_criteria": [
        "docs/prompt_system_design.md is created.",
        "The design addresses all requirements: centralized access, unified structure, section defaults/fallbacks, user overrides, app defaults, lazy loading.",
        "The design includes clear examples of the config structure.",
        "The fallback logic is explicitly defined.",
        "The design is feasible for implementation."
      ],
      "subtask_id": "d9f7b8ff-7be6-4b90-afde-9bc1688906a3"
    },
    {
      "name": "create_prompt_system_tests",
      "description": "Create unit and integration tests for the new prompt loading system based on the design.",
      "depends_on": [
        "design_new_prompt_system"
      ],
      "type": "test_generation",
      "input_artifacts": [
        "docs/prompt_system_design.md"
      ],
      "output_artifacts": [
        "tests/unit/test_prompt_system.py",
        "tests/integration/test_prompt_loading_integration.py"
      ],
      "instructions": [
        "Write unit tests for the core prompt access logic, verifying:",
        "- Loading prompts from config with section and prompt keys.",
        "- Handling user overrides from config.",
        "- Applying section defaults when specific prompts are not set.",
        "- Falling back to app defaults when no config or section default exists.",
        "- Correctly handling file path overrides specified in config.",
        "- Lazy loading behavior (prompts are not loaded until first accessed).",
        "- Raising errors when no default is found and none is specified.",
        "Write integration tests using dummy config files and prompt files to simulate the full loading process, verifying the correct prompt content is loaded based on the override and fallback rules.",
        "Ensure tests cover cases with and without section defaults, and with file path overrides."
      ],
      "constraints": [],
      "validation_criteria": [
        "tests/unit/test_prompt_system.py and tests/integration/test_prompt_loading_integration.py are created.",
        "Tests cover all specified scenarios (config overrides, section defaults, app defaults, file overrides, lazy loading, error handling).",
        "Tests are designed to pass only when the new system is correctly implemented."
      ],
      "subtask_id": "3dc75a90-c48c-40d2-87f9-3a377f44a8de"
    },
    {
      "name": "implement_prompt_system",
      "description": "Implement the new centralized, structured, and lazy-loaded prompt system.",
      "depends_on": [
        "create_prompt_system_tests",
        "design_new_prompt_system"
      ],
      "type": "code_generation",
      "input_artifacts": [
        "docs/prompt_system_design.md",
        "tests/unit/test_prompt_system.py",
        "tests/integration/test_prompt_loading_integration.py"
      ],
      "output_artifacts": [
        "src/ai_whisperer/prompt_system.py"
      ],
      "instructions": [
        "Create a new module `prompt_system.py`.",
        "Implement a class (e.g., `PromptSystem`) to handle prompt access.",
        "Integrate this class with the existing config loading mechanism.",
        "Implement the logic for parsing the new prompt structure in the config.",
        "Implement the lazy loading of prompt content.",
        "Implement the override and fallback logic (user config -> section default -> app default -> error) including file path overrides.",
        "Ensure prompts are accessed only through this new system after config is loaded.",
        "Do not modify existing code that *uses* prompts yet, only the loading and access mechanism."
      ],
      "constraints": [
        "All tests generated in 'create_prompt_system_tests' must pass."
      ],
      "validation_criteria": [
        "src/ai_whisperer/prompt_system.py is created.",
        "The implemented system adheres to the design specifications.",
        "All tests in tests/unit/test_prompt_system.py and tests/integration/test_prompt_loading_integration.py pass."
      ],
      "subtask_id": "a59f9ba3-0b63-4c96-9863-7257e220d4a2"
    },
    {
      "name": "update_prompt_usage",
      "description": "Update existing code to use the new prompt system for accessing prompts.",
      "depends_on": [
        "implement_prompt_system"
      ],
      "type": "file_edit",
      "input_artifacts": [
        "src/ai_whisperer/ai_service_interaction.py",
        "src/ai_whisperer/subtask_generator.py",
        "src/ai_whisperer/prompt_system.py"
      ],
      "output_artifacts": [
        "src/ai_whisperer/ai_service_interaction.py",
        "src/ai_whisperer/subtask_generator.py"
      ],
      "instructions": [
        "Identify all locations in the codebase (starting with `ai_service_interaction.py` and `subtask_generator.py`) where prompts are loaded or accessed directly.",
        "Replace the direct prompt access with calls to the new `PromptSystem` class.",
        "Ensure correct section and prompt keys are used according to the new structure.",
        "Verify that the application still functions correctly after these changes."
      ],
      "constraints": [],
      "validation_criteria": [
        "All identified prompt access points are updated to use the new system.",
        "The application runs without errors related to prompt loading.",
        "Existing functionality that relies on prompts works as before."
      ],
      "subtask_id": "ccaa0450-eae8-49db-b2e2-a6ef07094751"
    },
    {
      "name": "create_example_config_and_defaults",
      "description": "Create example configuration snippets and default prompt files to demonstrate the new system.",
      "depends_on": [
        "implement_prompt_system"
      ],
      "type": "file_io",
      "input_artifacts": [
        "docs/prompt_system_design.md"
      ],
      "output_artifacts": [
        "config.yaml.example",
        "prompts/example_section/example_prompt.md",
        "prompts/example_section/default.md",
        "prompts/another_section/example_prompt_no_section_default.md"
      ],
      "instructions": [
        "Update `config.yaml.example` to include examples of the new prompt configuration structure, demonstrating:",
        "- Setting a specific prompt value.",
        "- Setting a file path override for a prompt.",
        "- Setting a section default.",
        "- A section with no explicitly set prompts or defaults.",
        "Create dummy prompt files in the `prompts/` directory structure to match the config examples, including a section default file (`default.md`) and a file for a prompt in a section without a default.",
        "Ensure the file paths specified in the example config match the dummy files created."
      ],
      "constraints": [],
      "validation_criteria": [
        "`config.yaml.example` is updated with correct prompt configuration examples.",
        "Dummy prompt files are created in the `prompts/` directory matching the examples.",
        "The example config and dummy files correctly demonstrate user overrides, section defaults, and app defaults."
      ],
      "subtask_id": "d01241fc-b522-4042-81f7-2100f72bab12"
    },
    {
      "name": "update_documentation",
      "description": "Update relevant documentation to reflect the new prompt loading system.",
      "depends_on": [
        "create_example_config_and_defaults",
        "update_prompt_usage"
      ],
      "type": "documentation",
      "input_artifacts": [
        "docs/configuration.md",
        "docs/prompt_system_design.md",
        "config.yaml.example"
      ],
      "output_artifacts": [
        "docs/configuration.md"
      ],
      "instructions": [
        "Update `docs/configuration.md` to explain the new prompt configuration structure.",
        "Clearly describe how to override individual prompts and section defaults using the config file.",
        "Explain the override and fallback hierarchy (user config -> section default -> app default).",
        "Show examples using the new config structure.",
        "Document the location (`{app_path}/prompts`) and naming convention (`default.md`) for app defaults and section defaults."
      ],
      "constraints": [],
      "validation_criteria": [
        "`docs/configuration.md` is updated.",
        "The documentation accurately describes the new prompt system configuration.",
        "Examples are provided and are consistent with the `config.yaml.example`."
      ],
      "subtask_id": "7c2b2fb1-d331-4152-b840-b938a9391a78"
    }
  ],
  "task_id": "3b2255a4-04a0-439a-a4da-4f2d8cec22b2",
  "input_hashes": {
    "requirements_md": "36e06e99aba1ba0d2629ecd5da5f8620406bb21c3d70cd7ea84cbe4fbd9dd51f",
    "config_yaml": "ef050ce016c2e06b9bdadda4f22ae52229b7d014f3e61fb616fec45e76803e4b",
    "prompt_file": "hash_not_available"
  }
}