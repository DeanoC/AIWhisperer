{
  "description": "Implement the Read Text File tool.",
  "instructions": [
    "Create a new Python file named `src/ai_whisperer/tools/read_file_tool.py`.",
    "Define a class `ReadFileTool` within this file that inherits from `src/ai_whisperer/tools/base_tool.py.BaseTool`.",
    "Implement the `name` property to return 'read_text_file'.",
    "Implement the `description` property to return a concise description of the tool's function.",
    "Implement the `get_openrouter_api_definition` method to return a dictionary representing the tool's API definition for Openrouter.",
    "The API definition should specify a single required parameter, likely named 'file_path', of type 'string'.",
    "Implement the `get_ai_prompt_instructions` method to return a string containing clear instructions for the AI on how to use this tool.",
    "Implement the `execute` method which takes a dictionary of arguments (expected to contain 'file_path').",
    "Inside the `execute` method, read the content of the file specified by 'file_path'.",
    "Include error handling for `FileNotFoundError` and `PermissionError`, returning an informative error message in case of failure.",
    "Return the content of the file as a string if successful.",
    "Ensure the implementation adheres to the constraints regarding text files.",
    "Run the unit tests in `tests/unit/test_file_tools.py` to verify the implementation."
  ],
  "input_artifacts": [
    "docs/tool_interface_design.md",
    "src/ai_whisperer/tools/base_tool.py",
    "tests/unit/test_file_tools.py"
  ],
  "output_artifacts": [
    "src/ai_whisperer/tools/read_file_tool.py"
  ],
  "constraints": [
    "The tool should only attempt to read text files. Consider adding a check for common text file extensions or a mechanism to prevent reading binary files.",
    "Handle `FileNotFoundError` by returning a specific error message.",
    "Handle `PermissionError` by returning a specific error message.",
    "The tool should not allow reading files outside the project directory or sensitive system files. Implement appropriate path validation or sanitization."
  ],
  "validation_criteria": [
    "The file `src/ai_whisperer/tools/read_file_tool.py` exists.",
    "The `ReadFileTool` class is defined in `src/ai_whisperer/tools/read_file_tool.py` and inherits from `BaseTool`.",
    "The `ReadFileTool` class implements the `name`, `description`, `get_openrouter_api_definition`, `get_ai_prompt_instructions`, and `execute` methods.",
    "The `get_openrouter_api_definition` method returns a valid dictionary matching the expected schema for a tool definition, including the 'file_path' parameter.",
    "The `execute` method correctly reads the content of a valid text file.",
    "The `execute` method correctly handles `FileNotFoundError` and returns an appropriate error message.",
    "The `execute` method correctly handles `PermissionError` and returns an appropriate error message.",
    "All relevant unit tests in `tests/unit/test_file_tools.py` pass."
  ],
  "type": "code_generation",
  "name": "implement_read_text_file_tool",
  "depends_on": [
    "implement_tool_interface_and_management",
    "testgen_file_tools_and_management"
  ],
  "task_id": "a3fd54c4-30ec-4c58-a5a4-85fa7ad110ed",
  "subtask_id": "f4e1cce2-d04e-4ad7-b143-56ffff86e904"
}