```yaml
natural_language_goal: Enhance the `--list-models` command to display detailed OpenRouter model information, optionally exporting it to a CSV file.
overall_context: |
  The project requires strict Test-Driven Development (TDD).
  Code modifications and generations must follow the TDD cycle: Test Generation -> Code/Edit -> Validation (Test Execution).
  When modifying or generating code, reuse existing utility functions, constants, and exception handling from modules like `utils.py`, `config.py`, and `exceptions.py` where appropriate.
plan:
  - step_id: planning_list_models_enhancement
    description: Analyze the requirements, identify necessary code modifications in main.py and the OpenRouter API class, and outline the structure for fetching, formatting, and saving model data.
    depends_on: []
    agent_spec:
      type: planning
      input_artifacts:
        - main.py
        - openrouter_api.py
        - README.md
      output_artifacts:
        - docs/list_models_enhancement_plan.md
      instructions: |
        Analyze the user requirements for enhancing the `--list-models` command.
        Identify the specific changes needed in `main.py` to handle the new `--output-csv` argument and call the enhanced API method.
        Analyze the changes needed in `openrouter_api.py` to fetch comprehensive model details instead of just names from the OpenRouter API.
        Determine the structure of the data to be retrieved and how it should be formatted for both console output and CSV export.
        Outline a high-level implementation plan, including the steps for modifying the CLI parser, the API call, data processing, and CSV writing.
        Consider how to handle potential API response variations or errors.
        Create a summary document (`docs/list_models_enhancement_plan.md`) detailing the analysis and plan.
      validation_criteria:
        - "docs/list_models_enhancement_plan.md exists"
        - "docs/list_models_enhancement_plan.md clearly identifies required code changes in main.py and openrouter_api.py"
        - "docs/list_models_enhancement_plan.md outlines the data structure for model details"
        - "docs/list_models_enhancement_plan.md describes the high-level implementation steps"
  - step_id: test_generate_cli_parsing
    description: Generate unit tests for the `main.py` module to verify the handling of the new `--output-csv` argument when used with `--list-models`.
    depends_on:
      - planning_list_models_enhancement
    agent_spec:
      type: test_generation
      input_artifacts:
        - main.py
        - docs/list_models_enhancement_plan.md
      output_artifacts:
        - tests/unit/test_main_cli.py
      instructions: |
        Generate unit tests for the argument parsing logic in `main.py`.
        Focus specifically on testing the behavior when `--list-models` is used with and without the optional `--output-csv` argument.
        Ensure tests cover cases where a CSV filename is provided and where it is omitted.
        Tests should verify that the correct arguments are parsed and made available to the program logic.
        Do not implement the actual code changes in `main.py` yet.
        Reuse existing test structures and utilities in the `tests/unit/` directory if applicable.
      validation_criteria:
        - "tests/unit/test_main_cli.py exists"
        - "tests/unit/test_main_cli.py contains tests for --list-models with and without --output-csv"
        - "Tests in tests/unit/test_main_cli.py cover cases with and without a CSV filename for --output-csv"
  - step_id: file_edit_main_cli
    description: Modify `main.py` to add the optional `--output-csv` argument to the argument parser for the `--list-models` command.
    depends_on:
      - test_generate_cli_parsing
    agent_spec:
      type: file_edit
      input_artifacts:
        - main.py
        - docs/list_models_enhancement_plan.md
        - tests/unit/test_main_cli.py
      output_artifacts:
        - main.py
      instructions: |
        Modify the `main.py` file to add an optional argument `--output-csv` to the command-line parser.
        This argument should be associated with the `--list-models` command.
        It should expect a filename as its value.
        Ensure the existing functionality for `--list-models` without `--output-csv` remains unchanged.
        Do not implement the logic for fetching or saving data yet.
        The code should correctly implement the parsing logic tested in `tests/unit/test_main_cli.py`.
        Examine existing code for argument parsing patterns to maintain consistency.
      validation_criteria:
        - "main.py is modified to include the --output-csv argument for --list-models"
        - "Argument parser in main.py correctly handles --list-models with and without --output-csv"
        - "Argument parser in main.py expects a filename after --output-csv"
  - step_id: validate_cli_parsing
    description: Run the unit tests for `main.py`'s CLI parsing to ensure the `--output-csv` argument is handled correctly.
    depends_on:
      - file_edit_main_cli
    agent_spec:
      type: validation
      input_artifacts:
        - main.py
        - tests/unit/test_main_cli.py
      instructions: |
        Execute the unit tests located in `tests/unit/test_main_cli.py`.
        Verify that all tests related to `--list-models` and the new `--output-csv` argument pass.
      validation_criteria:
        - "Execute `pytest tests/unit/test_main_cli.py` successfully"
        - "All tests in tests/unit/test_main_cli.py related to --list-models and --output-csv pass"
  - step_id: test_generate_api_data_fetch
    description: Generate unit tests for the `OpenRouterAPI` class to verify fetching comprehensive model details.
    depends_on:
      - validate_cli_parsing
    agent_spec:
      type: test_generation
      input_artifacts:
        - openrouter_api.py
        - docs/list_models_enhancement_plan.md
      output_artifacts:
        - tests/unit/test_openrouter_api.py
      instructions: |
        Generate unit tests for the `OpenRouterAPI` class, specifically focusing on the `list_models` method or a new method for fetching detailed model info.
        Tests should mock the API response to simulate receiving detailed model data, including features, costs, context window, provider, etc.
        Verify that the method correctly parses this mocked response and returns structured data containing all the required attributes.
        Ensure tests cover cases with multiple models and various data points.
        Reuse existing test structures and utilities in the `tests/unit/` directory if applicable.
        Do not implement the actual API modification yet.
      validation_criteria:
        - "tests/unit/test_openrouter_api.py exists"
        - "tests/unit/test_openrouter_api.py contains tests for fetching detailed model data"
        - "Tests in tests/unit/test_openrouter_api.py verify parsing of mocked detailed API responses"
        - "Tests verify that returned data includes features, costs, context window, and provider"
  - step_id: file_edit_openrouter_api
    description: Modify the `OpenRouterAPI` class to fetch and return detailed model metadata from the OpenRouter API.
    depends_on:
      - test_generate_api_data_fetch
    agent_spec:
      type: file_edit
      input_artifacts:
        - openrouter_api.py
        - docs/list_models_enhancement_plan.md
        - tests/unit/test_openrouter_api.py
      output_artifacts:
        - openrouter_api.py
      instructions: |
        Modify the `OpenRouterAPI` class, specifically the `list_models` method or create a new method, to fetch comprehensive model details from the OpenRouter API.
        Update the API call to retrieve the necessary fields as outlined in the requirements (features, costs, context window, provider, etc.).
        Ensure the method parses the API response and returns the data in a structured format that includes all the requested details for each model.
        The code should correctly implement the data fetching and parsing logic tested in `tests/unit/test_openrouter_api.py`.
        Examine existing API interaction patterns in `openrouter_api.py` for consistency.
        Consider error handling and reuse exceptions from `exceptions.py`.
      validation_criteria:
        - "openrouter_api.py is modified to fetch detailed model data"
        - "The method used in openrouter_api.py returns structured data including features, costs, context window, and provider for each model"
        - "Uses appropriate exception handling, potentially reusing exceptions from exceptions.py"
  - step_id: validate_api_data_fetch
    description: Run the unit tests for the `OpenRouterAPI` class to ensure detailed model data fetching works correctly.
    depends_on:
      - file_edit_openrouter_api
    agent_spec:
      type: validation
      input_artifacts:
        - openrouter_api.py
        - tests/unit/test_openrouter_api.py
      instructions: |
        Execute the unit tests located in `tests/unit/test_openrouter_api.py`.
        Verify that all tests related to fetching detailed model data pass.
      validation_criteria:
        - "Execute `pytest tests/unit/test_openrouter_api.py` successfully"
        - "All tests in tests/unit/test_openrouter_api.py related to fetching detailed model data pass"
  - step_id: test_generate_data_formatting_export
    description: Generate unit tests for formatting model data for console output and CSV export.
    depends_on:
      - validate_api_data_fetch
    agent_spec:
      type: test_generation
      input_artifacts:
        - main.py
        - docs/list_models_enhancement_plan.md
      output_artifacts:
        - tests/unit/test_data_formatting.py
      instructions: |
        Generate unit tests for logic that will format the detailed model data fetched from the API.
        Include tests for formatting the data into a human-readable console output format.
        Include tests for formatting the data into a structure suitable for CSV export (e.g., a list of dictionaries or lists).
        Mock input data similar to what the enhanced API method would return.
        Verify the output format matches expected structures for both console and CSV.
        Do not implement the actual formatting or export logic yet.
        Reuse existing test structures and utilities in the `tests/unit/` directory if applicable.
      validation_criteria:
        - "tests/unit/test_data_formatting.py exists"
        - "tests/unit/test_data_formatting.py contains tests for formatting detailed model data for console output"
        - "tests/unit/test_data_formatting.py contains tests for formatting detailed model data for CSV export"
        - "Tests verify correct data structure for CSV output"
  - step_id: file_edit_main_data_handling
    description: Modify `main.py` to call the enhanced API method, process the detailed data, and handle console output or CSV export based on arguments.
    depends_on:
      - validate_api_data_fetch
      - test_generate_data_formatting_export
    agent_spec:
      type: file_edit
      input_artifacts:
        - main.py
        - openrouter_api.py
        - docs/list_models_enhancement_plan.md
        - tests/unit/test_data_formatting.py
      output_artifacts:
        - main.py
        - models.csv # Expected output if --output-csv is used in validation
      instructions: |
        Modify the `main.py` file to use the enhanced method in `openrouter_api.py` to fetch detailed model data when `--list-models` is used.
        Implement logic to process the detailed model data.
        If `--output-csv` is NOT provided, format the detailed data for console output and print it. Ensure existing console output format is maintained or improved while showing more detail.
        If `--output-csv` IS provided with a filename, format the detailed data into a CSV format and write it to the specified file. Use a standard CSV library for writing.
        The code should correctly implement the data handling, formatting, and export logic tested in `tests/unit/test_data_formatting.py`.
        Reuse existing utility functions from `utils.py` for file operations if applicable.
        Include comprehensive information in the CSV, using appropriate headers derived from the model attributes (features, costs, context window, provider, etc.).
      validation_criteria:
        - "main.py is modified to fetch detailed data using openrouter_api"
        - "main.py prints detailed model data to console when --output-csv is not specified"
        - "main.py generates a CSV file with detailed model data when --output-csv is specified"
        - "The CSV file contains headers and data for features, costs, context window, and provider"
        - "Uses appropriate file writing methods, potentially reusing utils.py functions"
  - step_id: validate_data_formatting_export
    description: Run unit tests and manually verify console and CSV output formats.
    depends_on:
      - file_edit_main_data_handling
    agent_spec:
      type: validation
      input_artifacts:
        - main.py
        - openrouter_api.py
        - tests/unit/test_data_formatting.py
      output_artifacts:
        - models.csv # Generated during validation run
      instructions: |
        Execute the unit tests located in `tests/unit/test_data_formatting.py`.
        Manually execute the `ai-whisperer --list-models --config config.yaml` command (assuming a dummy config and mocked API). Verify the console output shows detailed model information.
        Manually execute the `ai-whisperer --list-models --config config.yaml --output-csv models.csv` command. Verify that `models.csv` is created and contains correctly formatted detailed model data with appropriate headers.
      validation_criteria:
        - "Execute `pytest tests/unit/test_data_formatting.py` successfully"
        - "All tests in tests/unit/test_data_formatting.py pass"
        - "Running `ai-whisperer --list-models` displays detailed model info to the console"
        - "Running `ai-whisperer --list-models --output-csv models.csv` creates models.csv"
        - "models.csv contains detailed model data in CSV format with headers"
  - step_id: documentation_update
    description: Update the documentation to reflect the new `--output-csv` option for `--list-models`.
    depends_on:
      - validate_data_formatting_export
    agent_spec:
      type: documentation
      input_artifacts:
        - README.md
      output_artifacts:
        - README.md
      instructions: |
        Update the `README.md` file to document the enhanced `--list-models` command.
        Specifically, add a description of the new optional `--output-csv` parameter, explaining its purpose and how to use it with an example usage command.
        Ensure the documentation clearly states the benefits of using this option (detailed info, CSV format for analysis).
        Also update any relevant in-code documentation (like help messages for the CLI parser).
      validation_criteria:
        - "README.md is updated to describe the --output-csv option for --list-models"
        - "README.md includes an example usage for --list-models --output-csv"
        - "The CLI help message for --list-models includes documentation for the --output-csv option"
