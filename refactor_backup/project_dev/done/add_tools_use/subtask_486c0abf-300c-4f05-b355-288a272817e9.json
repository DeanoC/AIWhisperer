{
  "description": "Generate tests for the file read/write tools and the tool management functions.",
  "instructions": [
    "Review the tool interface design (`docs/tool_interface_design.md`) to understand the expected inputs, outputs, and behavior of the file read and write tools.",
    "Review the tool management design (`docs/tool_management_design.md`) to understand the functions for listing, filtering, and selecting tools.",
    "Review the tool testing strategy (`docs/tool_testing_strategy.md`) for guidance on test structure and methodology.",
    "Create a new file `tests/unit/test_file_tools.py` for the file tool unit tests.",
    "In `tests/unit/test_file_tools.py`, write tests to verify:",
    "- The correct generation of the Openrouter API tool definition for both read and write tools, ensuring the schema matches expectations.",
    "- The correct generation of AI prompt instructions for using the file tools.",
    "- The handling of valid file paths (e.g., ensuring the tool definition and instructions are generated correctly).",
    "- The handling of invalid file paths (e.g., ensuring appropriate error handling or validation is indicated in the generated output).",
    "- Mock permissions issues (e.g., read-only, no write access) and test how the tool definition or instructions reflect these constraints, or how the tool would indicate failure.",
    "Create a new file `tests/unit/test_tool_management.py` for the tool management unit tests.",
    "In `tests/unit/test_tool_management.py`, write tests to verify:",
    "- The function for listing all available tools returns the expected list of tool names or definitions.",
    "- The function for filtering tools based on criteria (if specified in the design) works correctly.",
    "- The function for selecting an existing tool by name returns the correct tool definition or object.",
    "- The function for selecting a non-existent tool by name raises an appropriate error or returns a specific indicator (e.g., None).",
    "Ensure all tests in both files are designed to work with mocked tool implementations and dependencies initially, focusing on the interface and management logic rather than actual file system interaction.",
    "Add necessary imports and test setup/teardown as required for the unit tests."
  ],
  "input_artifacts": [
    "docs/tool_interface_design.md",
    "docs/tool_management_design.md",
    "docs/tool_testing_strategy.md"
  ],
  "output_artifacts": [
    "tests/unit/test_file_tools.py",
    "tests/unit/test_tool_management.py"
  ],
  "constraints": [
    "Tests must be unit tests, focusing on isolated components.",
    "Actual file system operations should be mocked.",
    "Tests should adhere to the structure and principles outlined in the tool testing strategy."
  ],
  "validation_criteria": [
    "The file `tests/unit/test_file_tools.py` must exist and contain test cases covering the generation of Openrouter API definitions, AI prompt instructions, and handling of valid/invalid paths and mocked permissions for file read/write tools.",
    "The file `tests/unit/test_tool_management.py` must exist and contain test cases covering listing, filtering, and selecting tools, including the case of selecting non-existent tools.",
    "All tests in both files must be designed to run successfully in a mocked environment.",
    "The tests should be executable using a standard Python test runner (e.g., pytest)."
  ],
  "type": "test_generation",
  "name": "testgen_file_tools_and_management",
  "depends_on": [
    "design_tool_testing_strategy",
    "design_tool_interface",
    "design_tool_management"
  ],
  "task_id": "a3fd54c4-30ec-4c58-a5a4-85fa7ad110ed",
  "subtask_id": "486c0abf-300c-4f05-b355-288a272817e9"
}