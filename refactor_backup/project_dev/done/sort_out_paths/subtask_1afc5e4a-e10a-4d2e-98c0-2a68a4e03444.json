{
  "description": "Implement the global path management singleton based on the design and generated tests.",
  "instructions": [
    "Create the file src/ai_whisperer/path_management.py.",
    "Implement a Python class within src/ai_whisperer/path_management.py that follows the singleton pattern.",
    "The singleton class should have methods for setting and retrieving the four core paths as defined in docs/path_management_design.md.",
    "Implement the templated path expansion logic within the singleton class, following the specifications in docs/path_management_design.md.",
    "Ensure the implementation passes all unit tests located in tests/unit/test_path_management.py.",
    "Run the tests using `pytest tests/unit/test_path_management.py` and fix any failures."
  ],
  "input_artifacts": [
    "docs/path_management_design.md",
    "tests/unit/test_path_management.py"
  ],
  "output_artifacts": [
    "src/ai_whisperer/path_management.py"
  ],
  "constraints": [
    "The implementation must strictly adhere to the singleton design pattern.",
    "The implementation must be in Python.",
    "All unit tests in tests/unit/test_path_management.py must pass successfully."
  ],
  "validation_criteria": [
    "The file src/ai_whisperer/path_management.py exists.",
    "The code in src/ai_whisperer/path_management.py implements a singleton class.",
    "The singleton class provides methods for setting and retrieving the four core paths.",
    "The templated path expansion logic is implemented correctly.",
    "Running `pytest tests/unit/test_path_management.py` exits with a status code of 0 (indicating all tests passed)."
  ],
  "type": "code_generation",
  "name": "implement_path_management_singleton",
  "depends_on": [
    "create_path_management_tests"
  ],
  "task_id": "da0bff86-233d-4f69-bd5f-b4804aa4b3da",
  "subtask_id": "1afc5e4a-e10a-4d2e-98c0-2a68a4e03444"
}