{
  "description": "Implement the refactored AI loop component based on the design and passing the generated unit tests.",
  "instructions": [
    "Review the design document `docs/refactored_ai_loop_design.md` to understand the architecture, interfaces, and core logic of the refactored AI loop.",
    "Review the generated unit tests in `tests/unit/test_refactored_ai_loop.py` to understand the expected behavior and functionality.",
    "Create a new Python file named `ai_whisperer/refactored_ai_loop.py`.",
    "Implement the core logic of the AI loop within `ai_whisperer/refactored_ai_loop.py`, following the design specifications.",
    "Ensure the implementation adheres to the defined interfaces and minimizes direct dependencies on `ExecutionEngine` and `StateManager`. Use dependency injection or other decoupling techniques where necessary.",
    "Implement support for interactive sessions within the new AI loop component.",
    "Implement support for streaming API calls, potentially using delegate calls for progress updates as outlined in the design.",
    "Iteratively write code and run the unit tests from `tests/unit/test_refactored_ai_loop.py` frequently using `pytest` to verify the implementation and catch issues early.",
    "Refactor or reimplement logic from existing `ExecutionEngine` or `StateManager` only if it is essential for the AI loop's functionality and cannot be achieved through dependency injection or external calls, ensuring the decoupling principle is maintained.",
    "Ensure the new component can be instantiated and used independently of `ExecutionEngine` or `StateManager`."
  ],
  "input_artifacts": [
    "docs/refactored_ai_loop_design.md",
    "tests/unit/test_refactored_ai_loop.py"
  ],
  "output_artifacts": [
    "ai_whisperer/refactored_ai_loop.py"
  ],
  "constraints": [
    "The implementation must pass all unit tests located in `tests/unit/test_refactored_ai_loop.py`.",
    "The refactored AI loop component must be designed and implemented such that it does not require direct instantiation of `ExecutionEngine` or `StateManager` for its core functionality.",
    "Adhere strictly to the design principles outlined in `docs/refactored_ai_loop_design.md`."
  ],
  "validation_criteria": [
    "The file `ai_whisperer/refactored_ai_loop.py` exists and contains the Python code for the refactored AI loop.",
    "The implemented logic in `ai_whisperer/refactored_ai_loop.py` aligns with the design documented in `docs/refactored_ai_loop_design.md`.",
    "All unit tests in `tests/unit/test_refactored_ai_loop.py` execute successfully without errors or failures.",
    "The implemented component demonstrates support for interactive sessions and streaming API calls as specified in the design."
  ],
  "type": "code_generation",
  "name": "implement_refactored_ai_loop",
  "depends_on": [
    "generate_ai_loop_unit_tests"
  ],
  "task_id": "fc2d07f3-4317-4ca5-ab37-a9c1e6c766c5",
  "subtask_id": "6ebe020f-e66f-4dc2-88a3-eae52439dcde"
}