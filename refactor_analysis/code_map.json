{
  "modules": [
    {
      "path": "ai_whisperer/exceptions.py",
      "classes": [
        {
          "name": "AIWhispererError",
          "line": 7,
          "methods": [],
          "docstring": "Base class for all application-specific errors."
        },
        {
          "name": "ConfigError",
          "line": 13,
          "methods": [],
          "docstring": "Exception raised for errors in the configuration file (loading, parsing, validation)."
        },
        {
          "name": "OpenRouterAIServiceError",
          "line": 22,
          "methods": [
            "__init__"
          ],
          "docstring": "Base class for errors during interaction with the OpenRouter API.\n\nAttributes:\n    status_code: The HTTP status code associated with the error, if available.\n    response: The requests.Response object, if available."
        },
        {
          "name": "OpenRouterAuthError",
          "line": 36,
          "methods": [],
          "docstring": "Raised for authentication errors (HTTP 401) with the OpenRouter API."
        },
        {
          "name": "OpenRouterRateLimitError",
          "line": 42,
          "methods": [],
          "docstring": "Raised for rate limit errors (HTTP 429) with the OpenRouter API."
        },
        {
          "name": "OpenRouterConnectionError",
          "line": 48,
          "methods": [
            "__init__"
          ],
          "docstring": "Raised for network connection errors when trying to reach the OpenRouter API.\n\nAttributes:\n    original_exception: The original exception that caused this error (e.g., requests.ConnectionError)."
        },
        {
          "name": "ProcessingError",
          "line": 60,
          "methods": [],
          "docstring": "Exception raised for errors during file processing (reading MD, writing YAML, etc.)."
        },
        {
          "name": "OrchestratorError",
          "line": 69,
          "methods": [],
          "docstring": "Base class for errors specific to the Orchestrator."
        },
        {
          "name": "PlanNotLoadedError",
          "line": 74,
          "methods": [],
          "docstring": "Exception raised when a plan is expected but has not been loaded."
        },
        {
          "name": "HashMismatchError",
          "line": 78,
          "methods": [
            "__init__"
          ],
          "docstring": "Error raised when input hashes in the API response do not match calculated hashes."
        },
        {
          "name": "YAMLValidationError",
          "line": 88,
          "methods": [
            "__init__"
          ],
          "docstring": "Custom exception for YAML validation errors."
        },
        {
          "name": "PromptError",
          "line": 112,
          "methods": [],
          "docstring": "Errors related to loading or processing prompt files."
        },
        {
          "name": "OrchestrationError",
          "line": 118,
          "methods": [],
          "docstring": "Exception raised for errors during the orchestration process."
        },
        {
          "name": "TaskExecutionError",
          "line": 124,
          "methods": [
            "__init__"
          ],
          "docstring": "Exception raised for errors during the execution of a task."
        },
        {
          "name": "ToolNotFound",
          "line": 132,
          "methods": [],
          "docstring": "Exception raised when a requested tool is not found in the registry."
        },
        {
          "name": "FileRestrictionError",
          "line": 136,
          "methods": [],
          "docstring": "Exception raised when a file operation is restricted."
        },
        {
          "name": "SubtaskGenerationError",
          "line": 143,
          "methods": [],
          "docstring": "Exception raised for errors during the subtask generation process."
        },
        {
          "name": "SchemaValidationError",
          "line": 149,
          "methods": [],
          "docstring": "Exception raised when generated data fails schema validation."
        },
        {
          "name": "PromptNotFoundError",
          "line": 152,
          "methods": [],
          "docstring": "Exception raised when a prompt is not found in the resolution hierarchy."
        }
      ],
      "functions": [],
      "imports": [
        "requests",
        "jsonschema"
      ],
      "from_imports": [],
      "size": 154,
      "docstring": "Custom exception types for the AI Whisperer application."
    },
    {
      "path": "ai_whisperer/json_validator.py",
      "classes": [],
      "functions": [
        {
          "name": "set_schema_directory",
          "line": 15,
          "args": [
            "directory"
          ],
          "docstring": "Sets the global schema directory."
        },
        {
          "name": "get_schema_directory",
          "line": 21,
          "args": [],
          "docstring": "Gets the current schema directory, defaulting to DEFAULT_SCHEMA_DIR."
        },
        {
          "name": "load_schema",
          "line": 26,
          "args": [
            "schema_path"
          ],
          "docstring": "Loads a JSON schema from the given path."
        },
        {
          "name": "generate_uuid",
          "line": 38,
          "args": [],
          "docstring": "Generates a new UUID string."
        },
        {
          "name": "format_timestamp",
          "line": 43,
          "args": [
            "dt_object"
          ],
          "docstring": "Converts a datetime object to an ISO 8601 string in UTC.\nIf no dt_object is provided, uses the current UTC time."
        },
        {
          "name": "parse_timestamp",
          "line": 53,
          "args": [
            "timestamp_str"
          ],
          "docstring": "Converts an ISO 8601 string to a datetime object.\nAssumes the timestamp is in UTC if no timezone info is present."
        },
        {
          "name": "validate_against_schema",
          "line": 68,
          "args": [
            "data",
            "schema_name"
          ],
          "docstring": "Validates a dictionary against a specified JSON schema.\n\nArgs:\n    data (dict): The data to validate.\n    schema_name (str): The name of the schema file (e.g., 'subtask_plan_schema.json').\n\nReturns:\n    tuple: (is_valid, error_message_or_none)\n           is_valid (bool): True if validation passes, False otherwise.\n           error_message (str or None): Detailed error message if validation fails, None otherwise."
        }
      ],
      "imports": [
        "json",
        "uuid",
        "os"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timezone"
          ],
          "level": 0
        },
        {
          "module": "jsonschema",
          "names": [
            "validate",
            "ValidationError"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Optional"
          ],
          "level": 0
        }
      ],
      "size": 94,
      "docstring": null
    },
    {
      "path": "ai_whisperer/task_selector.py",
      "classes": [],
      "functions": [
        {
          "name": "get_model_for_task",
          "line": 10,
          "args": [
            "config",
            "task_name"
          ],
          "docstring": "Get the model configuration for a specific task.\n\nArgs:\n    config: The loaded application configuration.\n    task_name: The name of the task.\n\nReturns:\n    The model configuration for the task, or the default model configuration if\n    no task-specific configuration is found.\n\nRaises:\n    ConfigError: If the task model configuration is missing required fields."
        },
        {
          "name": "get_prompt_for_task",
          "line": 52,
          "args": [
            "prompt_system",
            "task_name"
          ],
          "docstring": "Get the prompt content for a specific task using the PromptSystem.\n\nArgs:\n    prompt_system: An instance of the PromptSystem.\n    task_name: The name of the task.\n\nReturns:\n    The prompt content string for the task.\n\nRaises:\n    ConfigError: If the prompt is not found by the PromptSystem."
        }
      ],
      "imports": [
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "exceptions",
          "names": [
            "ConfigError"
          ],
          "level": 1
        },
        {
          "module": "prompt_system",
          "names": [
            "PromptSystem"
          ],
          "level": 1
        }
      ],
      "size": 79,
      "docstring": null
    },
    {
      "path": "ai_whisperer/cli_commands_batch_mode.py",
      "classes": [
        {
          "name": "BatchModeCliCommand",
          "line": 9,
          "methods": [
            "__init__",
            "execute"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [
        "asyncio",
        "logging",
        "sys"
      ],
      "from_imports": [
        {
          "module": "ai_whisperer.batch.batch_client",
          "names": [
            "BatchClient"
          ],
          "level": 0
        },
        {
          "module": "cli_commands",
          "names": [
            "BaseCliCommand"
          ],
          "level": 1
        },
        {
          "module": "ai_whisperer.workspace_detection",
          "names": [
            "find_whisper_workspace",
            "WorkspaceNotFoundError"
          ],
          "level": 0
        }
      ],
      "size": 43,
      "docstring": null
    },
    {
      "path": "ai_whisperer/main.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "from_imports": [],
      "size": 8,
      "docstring": "This file is deprecated. CLI entry point is now handled by ai_whisperer/cli.py (batch mode only).\nUse the 'ai-whisperer' or 'ai-whisperer-interactive' commands as defined in pyproject.yaml."
    },
    {
      "path": "ai_whisperer/workspace_detection.py",
      "classes": [
        {
          "name": "WorkspaceNotFoundError",
          "line": 7,
          "methods": [],
          "docstring": null
        }
      ],
      "functions": [
        {
          "name": "find_whisper_workspace",
          "line": 10,
          "args": [
            "start_path"
          ],
          "docstring": "Search for a .WHISPER folder starting from start_path (or cwd) and walking up to the filesystem root.\nResolves symlinks and handles permission errors gracefully.\nReturns the Path to the workspace root (parent of .WHISPER).\nRaises WorkspaceNotFoundError if not found."
        },
        {
          "name": "load_project_json",
          "line": 40,
          "args": [
            "workspace_path"
          ],
          "docstring": "Loads .WHISPER/project.json from the workspace and returns the parsed dict.\nReturns None if not found. Raises if invalid JSON."
        }
      ],
      "imports": [
        "os",
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Any"
          ],
          "level": 0
        }
      ],
      "size": 50,
      "docstring": null
    },
    {
      "path": "ai_whisperer/state_management.py",
      "classes": [
        {
          "name": "StateManagerEncoder",
          "line": 106,
          "methods": [
            "default"
          ],
          "docstring": "Custom JSONEncoder to serialize ContextManager and skip unserializable objects."
        },
        {
          "name": "StateManagerDecoder",
          "line": 120,
          "methods": [
            "__init__",
            "object_hook"
          ],
          "docstring": "Custom JSONDecoder to deserialize ContextManager."
        },
        {
          "name": "StateManager",
          "line": 135,
          "methods": [
            "__init__",
            "load_state",
            "save_state",
            "initialize_state",
            "set_task_state",
            "get_task_status",
            "store_task_result",
            "get_task_result",
            "update_global_state",
            "get_global_state",
            "get_context_manager",
            "store_conversation_turn",
            "get_conversation_history"
          ],
          "docstring": "Manages the state of the execution for tasks and global context,\nincluding conversation history via ContextManager.\n\nThis class provides methods to load, save, and manipulate state data,\nincluding task statuses, results, and global context."
        }
      ],
      "functions": [
        {
          "name": "save_state",
          "line": 6,
          "args": [
            "state",
            "file_path"
          ],
          "docstring": "Saves the state dictionary to a JSON file.\n\nEnsures atomicity by writing to a temporary file first,\nthen renaming it to the final state file."
        },
        {
          "name": "load_state",
          "line": 30,
          "args": [
            "file_path"
          ],
          "docstring": "Loads the state from a JSON file.\n\nRaises FileNotFoundError if the file does not exist.\nRaises IOError if the file cannot be loaded or parsed."
        },
        {
          "name": "update_task_status",
          "line": 48,
          "args": [
            "state",
            "task_id",
            "status"
          ],
          "docstring": "Updates the status of a task in the state.\n\nInitializes 'tasks' or the specific task_id if not present.\nRaises ValueError if task_id is None."
        },
        {
          "name": "store_task_result",
          "line": 64,
          "args": [
            "state",
            "task_id",
            "result"
          ],
          "docstring": "Stores the intermediate result of a task in the state.\n\nInitializes 'tasks' or the specific task_id if not present."
        },
        {
          "name": "get_task_result",
          "line": 77,
          "args": [
            "state",
            "task_id"
          ],
          "docstring": "Retrieves the intermediate result of a task from the state.\n\nReturns None if the task or its result is not found."
        },
        {
          "name": "update_global_state",
          "line": 85,
          "args": [
            "state",
            "key",
            "value"
          ],
          "docstring": "Updates a key-value pair in the global state.\n\nInitializes 'global_state' if not present."
        },
        {
          "name": "get_global_state",
          "line": 96,
          "args": [
            "state",
            "key"
          ],
          "docstring": "Retrieves a value from the global state.\n\nReturns None if the key is not found in global_state."
        }
      ],
      "imports": [
        "json",
        "os",
        "logging"
      ],
      "from_imports": [
        {
          "module": "ai_whisperer.context_management",
          "names": [
            "ContextManager"
          ],
          "level": 0
        }
      ],
      "size": 323,
      "docstring": null
    },
    {
      "path": "ai_whisperer/model_info_provider.py",
      "classes": [
        {
          "name": "ModelInfoProvider",
          "line": 19,
          "methods": [
            "__init__",
            "list_models",
            "list_models_to_csv"
          ],
          "docstring": "Provides information about available AI models from OpenRouter."
        }
      ],
      "functions": [],
      "imports": [
        "logging",
        "csv"
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_loop.ai_config",
          "names": [
            "AIConfig"
          ],
          "level": 0
        },
        {
          "module": "config",
          "names": [
            "load_config"
          ],
          "level": 1
        },
        {
          "module": "exceptions",
          "names": [
            "ConfigError",
            "OpenRouterAIServiceError",
            "ProcessingError"
          ],
          "level": 1
        },
        {
          "module": "ai_whisperer.ai_service.openrouter_ai_service",
          "names": [
            "OpenRouterAIService"
          ],
          "level": 0
        }
      ],
      "size": 126,
      "docstring": "This module contains the ModelInfoProvider class, responsible for querying\nand providing information about available AI models."
    },
    {
      "path": "ai_whisperer/model_capabilities.py",
      "classes": [],
      "functions": [
        {
          "name": "get_model_capabilities",
          "line": 173,
          "args": [
            "model_name"
          ],
          "docstring": "Get capabilities for a specific model.\n\nArgs:\n    model_name: The model identifier (e.g., \"openai/gpt-4\")\n    \nReturns:\n    Dictionary of model capabilities"
        },
        {
          "name": "supports_multi_tool",
          "line": 195,
          "args": [
            "model_name"
          ],
          "docstring": "Check if a model supports multiple tool calls in one turn.\n\nArgs:\n    model_name: The model identifier\n    \nReturns:\n    True if model supports multi-tool calling"
        },
        {
          "name": "supports_structured_output",
          "line": 208,
          "args": [
            "model_name"
          ],
          "docstring": "Check if a model supports structured output with JSON Schema validation.\n\nArgs:\n    model_name: The model identifier\n    \nReturns:\n    True if model supports structured output"
        }
      ],
      "imports": [],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any"
          ],
          "level": 0
        }
      ],
      "size": 219,
      "docstring": "Model capabilities configuration for AIWhisperer.\nDefines which models support multi-tool calling and other advanced features."
    },
    {
      "path": "ai_whisperer/utils.py",
      "classes": [],
      "functions": [
        {
          "name": "setup_logging",
          "line": 11,
          "args": [
            "level"
          ],
          "docstring": "Sets up basic logging configuration to output to stderr."
        },
        {
          "name": "calculate_sha256",
          "line": 17,
          "args": [
            "file_path"
          ],
          "docstring": "Calculates the SHA-256 hash of a file's content.\n\nArgs:\n    file_path: The path to the file (as a string or Path object).\n\nReturns:\n    The hexadecimal representation of the SHA-256 hash.\n\nRaises:\n    FileNotFoundError: If the file does not exist.\n    IOError: If there is an error reading the file."
        },
        {
          "name": "save_json_to_file",
          "line": 46,
          "args": [
            "data",
            "output_path"
          ],
          "docstring": "Saves a dictionary as a JSON file with indentation.\n\nArgs:\n    data: The dictionary to save.\n    output_path: The path to the output JSON file (as a string or Path object)."
        },
        {
          "name": "_parse_gitignore",
          "line": 59,
          "args": [
            "gitignore_path"
          ],
          "docstring": "Parses a .gitignore file.\nReturns a list of tuples: (pattern_string, base_directory_of_this_gitignore_file).\nThese patterns are relative to the directory containing the .gitignore file."
        },
        {
          "name": "_is_item_ignored",
          "line": 84,
          "args": [
            "full_item_path",
            "is_item_dir",
            "item_name",
            "active_ignore_rules"
          ],
          "docstring": "Checks if an item should be ignored based on the current set of active_ignore_rules.\nThe rules are a list of (pattern_str, pattern_base_dir) tuples.\nThe LAST matching rule in the list determines the outcome (ignored or not ignored).\nThis mimics how .gitignore files override parent rules or later rules override earlier ones."
        },
        {
          "name": "_build_tree_recursive",
          "line": 151,
          "args": [
            "current_dir_path",
            "prefix_str",
            "inherited_ignore_rules",
            "output_lines_list"
          ],
          "docstring": "Internal recursive function to build the tree.\n- current_dir_path: The directory currently being processed.\n- prefix_str: The prefix string for indentation and tree lines.\n- inherited_ignore_rules: Rules from parent directories' .gitignore files.\n- output_lines_list: The list to which output lines are appended."
        },
        {
          "name": "build_ascii_directory_tree",
          "line": 202,
          "args": [
            "start_path",
            "ignore"
          ],
          "docstring": "Builds an ASCII directory tree starting from the given directory,\nrecursing through subdirectories and respecting .gitignore files and an explicit ignore list.\n\nArgs:\n    start_path (str): The path to the directory to start from. Defaults to current directory.\n    ignore (list[str] | None): List of file or directory names or relative paths to ignore.\n\nReturns:\n    str: A string containing the ASCII representation of the directory tree.\n         Returns an error message if start_path is not a valid directory."
        }
      ],
      "imports": [
        "logging",
        "sys",
        "hashlib",
        "json",
        "os",
        "fnmatch"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        }
      ],
      "size": 274,
      "docstring": null
    },
    {
      "path": "ai_whisperer/processing.py",
      "classes": [],
      "functions": [
        {
          "name": "read_markdown",
          "line": 6,
          "args": [
            "file_path"
          ],
          "docstring": "Reads the content of a Markdown file.\n\nArgs:\n    file_path: The path to the Markdown file.\n\nReturns:\n    The content of the file as a string.\n\nRaises:\n    ProcessingError: If the file cannot be found or read."
        },
        {
          "name": "save_json",
          "line": 35,
          "args": [
            "data",
            "file_path"
          ],
          "docstring": "Saves a dictionary to a JSON file.\n\nArgs:\n    data: The dictionary to save.\n    file_path: The path to the output JSON file.\n\nRaises:\n    ProcessingError: If the data cannot be written to the file."
        },
        {
          "name": "format_prompt",
          "line": 58,
          "args": [
            "template",
            "requirements",
            "config_vars"
          ],
          "docstring": "Formats the prompt using a template string and provided variables.\n\nArgs:\n    template: The prompt template string (using .format() style placeholders).\n    requirements: The content read from the requirements Markdown file.\n    config_vars: A dictionary containing configuration variables.\n\nReturns:\n    The formatted prompt string.\n\nRaises:\n    ProcessingError: If a placeholder in the template is not found in the\n                     combined variables (requirements + config_vars)."
        },
        {
          "name": "process_response",
          "line": 85,
          "args": [
            "response_text"
          ],
          "docstring": "Processes the raw text response from the API, expecting JSON format.\n\nArgs:\n    response_text: The raw string response from the API.\n\nReturns:\n    The parsed YAML data as a Python dictionary or list.\n\nRaises:\n    ProcessingError: If the response is empty or cannot be parsed as valid JSON."
        }
      ],
      "imports": [
        "json"
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "exceptions",
          "names": [
            "ProcessingError"
          ],
          "level": 1
        }
      ],
      "size": 128,
      "docstring": null
    },
    {
      "path": "ai_whisperer/prompt_system.py",
      "classes": [
        {
          "name": "Prompt",
          "line": 9,
          "methods": [
            "__init__",
            "content",
            "set_loader"
          ],
          "docstring": "Represents a loaded prompt with lazy content loading."
        },
        {
          "name": "PromptConfiguration",
          "line": 31,
          "methods": [
            "__init__",
            "get_override_path",
            "get_base_path",
            "get_definition_path"
          ],
          "docstring": "Manages the configuration for the prompt system."
        },
        {
          "name": "PromptLoader",
          "line": 51,
          "methods": [
            "load_prompt_content"
          ],
          "docstring": "Handles the actual reading of prompt content from a file."
        },
        {
          "name": "PromptResolver",
          "line": 61,
          "methods": [
            "__init__",
            "_get_shared_prompts_dir",
            "resolve_prompt_path"
          ],
          "docstring": "Determines the correct file path for a requested prompt based on a hierarchy."
        },
        {
          "name": "PromptSystem",
          "line": 182,
          "methods": [
            "__init__",
            "_load_shared_components",
            "_get_shared_prompts_dir",
            "enable_feature",
            "disable_feature",
            "get_enabled_features",
            "get_prompt",
            "get_formatted_prompt",
            "list_prompts"
          ],
          "docstring": "The central service for accessing and managing prompts."
        }
      ],
      "functions": [],
      "imports": [
        "logging",
        "re"
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Optional",
            "List",
            "Tuple",
            "Dict"
          ],
          "level": 0
        },
        {
          "module": "exceptions",
          "names": [
            "PromptNotFoundError"
          ],
          "level": 1
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "TYPE_CHECKING"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.tool_registry",
          "names": [
            "ToolRegistry"
          ],
          "level": 0
        }
      ],
      "size": 317,
      "docstring": null
    },
    {
      "path": "ai_whisperer/config.py",
      "classes": [],
      "functions": [
        {
          "name": "load_config",
          "line": 24,
          "args": [
            "config_path",
            "cli_args"
          ],
          "docstring": "Loads configuration from a YAML file, validates required keys, handles API key precedence,\nand initializes the PathManager with config and CLI values.\n\nArgs:\n    config_path: The path to the configuration file.\n    cli_args: Optional dictionary of parsed CLI arguments.\n\nReturns:\n    A dictionary containing the loaded and validated configuration, including prompt content.\n\nRaises:\n    ConfigError: If the configuration file does not exist, is invalid YAML,\n                 is missing required keys/sections, contains empty required values,\n                 if the API key is missing, or if prompt files cannot be loaded."
        }
      ],
      "imports": [
        "yaml",
        "os",
        "logging"
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "dotenv",
          "names": [
            "load_dotenv"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Optional",
            "Dict",
            "Any"
          ],
          "level": 0
        },
        {
          "module": "exceptions",
          "names": [
            "ConfigError"
          ],
          "level": 1
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "utils",
          "names": [
            "calculate_sha256"
          ],
          "level": 1
        }
      ],
      "size": 204,
      "docstring": null
    },
    {
      "path": "ai_whisperer/version.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "from_imports": [],
      "size": 1,
      "docstring": null
    },
    {
      "path": "ai_whisperer/user_message_level.py",
      "classes": [
        {
          "name": "UserMessageLevel",
          "line": 7,
          "methods": [],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        }
      ],
      "size": 9,
      "docstring": "Simple enum for message detail levels.\nReplaces the old monitor.user_message_delegate.UserMessageLevel"
    },
    {
      "path": "ai_whisperer/context_management.py",
      "classes": [
        {
          "name": "ContextManager",
          "line": 3,
          "methods": [
            "__init__",
            "add_message",
            "get_history",
            "clear_history"
          ],
          "docstring": "Manages the conversation history for AI interactions.\n\nThis class provides methods to add, retrieve, and clear conversation messages,\ncentralizing message history management for reusable AI loop components."
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [],
      "size": 72,
      "docstring": null
    },
    {
      "path": "ai_whisperer/logging_custom.py",
      "classes": [
        {
          "name": "LogLevel",
          "line": 12,
          "methods": [],
          "docstring": null
        },
        {
          "name": "ComponentType",
          "line": 18,
          "methods": [],
          "docstring": null
        },
        {
          "name": "LogSource",
          "line": 28,
          "methods": [],
          "docstring": "Identifies the source of log messages for multi-source debugging."
        },
        {
          "name": "LogMessage",
          "line": 45,
          "methods": [
            "to_dict"
          ],
          "docstring": null
        },
        {
          "name": "EnhancedLogMessage",
          "line": 78,
          "methods": [
            "to_dict"
          ],
          "docstring": "Extended log message with debugging context for Debbie's multi-source logging."
        }
      ],
      "functions": [
        {
          "name": "setup_logging",
          "line": 113,
          "args": [
            "config_path",
            "port"
          ],
          "docstring": "Configures the logging system.\n\nArgs:\n    config_path: Optional path to a logging configuration file (e.g., YAML).\n                 If None, a basic console logger is configured.\n    port: Optional port number to include in log filenames for server isolation"
        },
        {
          "name": "setup_basic_logging",
          "line": 145,
          "args": [
            "port"
          ],
          "docstring": "Sets up a basic console logger.\n\nArgs:\n    port: Optional port number to include in log filenames for server isolation"
        },
        {
          "name": "get_logger",
          "line": 228,
          "args": [
            "name"
          ],
          "docstring": "Gets a logger instance by name.\n\nArgs:\n    name: The name of the logger.\n\nReturns:\n    A logging.Logger instance."
        },
        {
          "name": "get_server_logger",
          "line": 240,
          "args": [],
          "docstring": null
        },
        {
          "name": "get_test_logger",
          "line": 243,
          "args": [],
          "docstring": null
        },
        {
          "name": "log_event",
          "line": 247,
          "args": [
            "log_message",
            "logger_name"
          ],
          "docstring": "Logs a structured LogMessage using a specified logger.\n\nArgs:\n    log_message: The LogMessage object to log.\n    logger_name: The name of the logger to use. Defaults to \"aiwhisperer\"."
        }
      ],
      "imports": [
        "logging",
        "logging.config",
        "yaml",
        "os",
        "sys",
        "traceback"
      ],
      "from_imports": [
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "level": 0
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timezone"
          ],
          "level": 0
        }
      ],
      "size": 269,
      "docstring": null
    },
    {
      "path": "ai_whisperer/path_management.py",
      "classes": [
        {
          "name": "PathManager",
          "line": 4,
          "methods": [
            "__new__",
            "__init__",
            "get_instance",
            "_reset_instance",
            "initialize_with_project_json",
            "initialize",
            "prompt_path",
            "app_path",
            "project_path",
            "output_path",
            "workspace_path",
            "resolve_path",
            "is_path_within_workspace",
            "is_path_within_output"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [
        "os"
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        }
      ],
      "size": 182,
      "docstring": null
    },
    {
      "path": "ai_whisperer/cli.py",
      "classes": [],
      "functions": [
        {
          "name": "cli",
          "line": 15,
          "args": [
            "args"
          ],
          "docstring": "Main entry point for the AI Whisperer CLI application."
        },
        {
          "name": "main",
          "line": 95,
          "args": [],
          "docstring": "Standard Python main function entry point."
        }
      ],
      "imports": [
        "argparse",
        "sys",
        "logging"
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "exceptions",
          "names": [
            "ConfigError"
          ],
          "level": 1
        },
        {
          "module": "cli_commands_batch_mode",
          "names": [
            "BatchModeCliCommand"
          ],
          "level": 1
        },
        {
          "module": "cli_commands",
          "names": [
            "BaseCliCommand"
          ],
          "level": 1
        },
        {
          "module": "config",
          "names": [
            "load_config"
          ],
          "level": 1
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 102,
      "docstring": null
    },
    {
      "path": "ai_whisperer/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "from_imports": [],
      "size": 10,
      "docstring": "AI Whisperer package initialization.\n\nNote: Most imports have been removed to avoid circular dependencies\nwith the deprecated delegate system. Import what you need directly."
    },
    {
      "path": "ai_whisperer/__main__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "cli",
          "names": [
            "main"
          ],
          "level": 1
        }
      ],
      "size": 4,
      "docstring": null
    },
    {
      "path": "ai_whisperer/cli_commands.py",
      "classes": [
        {
          "name": "BaseCliCommand",
          "line": 27,
          "methods": [
            "__init__",
            "execute"
          ],
          "docstring": "Base class for all CLI commands."
        },
        {
          "name": "BatchModeCliCommand",
          "line": 40,
          "methods": [
            "__init__",
            "execute"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [
        "asyncio",
        "logging",
        "yaml",
        "json",
        "threading"
      ],
      "from_imports": [
        {
          "module": "abc",
          "names": [
            "ABC",
            "abstractmethod"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_loop.ai_config",
          "names": [
            "AIConfig"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.context_management",
          "names": [
            "ContextManager"
          ],
          "level": 0
        },
        {
          "module": "user_message_level",
          "names": [
            "UserMessageLevel"
          ],
          "level": 1
        },
        {
          "module": "state_management",
          "names": [
            "StateManager"
          ],
          "level": 1
        },
        {
          "module": "config",
          "names": [
            "load_config"
          ],
          "level": 1
        },
        {
          "module": "logging_custom",
          "names": [
            "LogMessage",
            "LogLevel",
            "ComponentType",
            "log_event"
          ],
          "level": 1
        },
        {
          "module": "model_info_provider",
          "names": [
            "ModelInfoProvider"
          ],
          "level": 1
        },
        {
          "module": "ai_whisperer.workspace_detection",
          "names": [
            "find_whisper_workspace",
            "WorkspaceNotFoundError"
          ],
          "level": 0
        }
      ],
      "size": 266,
      "docstring": null
    },
    {
      "path": "ai_whisperer/model_override.py",
      "classes": [
        {
          "name": "ModelOverride",
          "line": 13,
          "methods": [
            "__init__",
            "apply_override",
            "_get_model_defaults",
            "_set_nested_value",
            "from_env",
            "save_override_config"
          ],
          "docstring": "Manages model overrides for testing and development"
        }
      ],
      "functions": [
        {
          "name": "get_model_from_config",
          "line": 213,
          "args": [
            "config"
          ],
          "docstring": "Extract model name from configuration"
        },
        {
          "name": "apply_model_override_to_session",
          "line": 218,
          "args": [
            "session_manager",
            "model_name"
          ],
          "docstring": "Apply model override to an existing session manager"
        }
      ],
      "imports": [
        "os",
        "json",
        "yaml"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Optional",
            "Any"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "copy",
          "names": [
            "deepcopy"
          ],
          "level": 0
        }
      ],
      "size": 228,
      "docstring": "Model override utilities for testing different models without modifying config.yaml"
    },
    {
      "path": "ai_whisperer/interactive_entry.py",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "line": 7,
          "args": [],
          "docstring": "Start the interactive_server.main module as a subprocess."
        }
      ],
      "imports": [
        "sys",
        "subprocess"
      ],
      "from_imports": [],
      "size": 20,
      "docstring": "Entry point for starting the interactive server from the CLI."
    },
    {
      "path": "ai_whisperer/plan_parser.py",
      "classes": [
        {
          "name": "PlanParsingError",
          "line": 9,
          "methods": [],
          "docstring": "Base class for errors during plan parsing."
        },
        {
          "name": "PlanFileNotFoundError",
          "line": 14,
          "methods": [],
          "docstring": "Raised when the main plan file is not found."
        },
        {
          "name": "PlanInvalidJSONError",
          "line": 19,
          "methods": [],
          "docstring": "Raised when the main plan file contains malformed JSON."
        },
        {
          "name": "PlanValidationError",
          "line": 24,
          "methods": [],
          "docstring": "Raised when the main plan JSON fails validation."
        },
        {
          "name": "SubtaskFileNotFoundError",
          "line": 30,
          "methods": [],
          "docstring": "Raised when a referenced subtask file is not found."
        },
        {
          "name": "SubtaskInvalidJSONError",
          "line": 36,
          "methods": [],
          "docstring": "Raised when a subtask file contains malformed JSON."
        },
        {
          "name": "SubtaskValidationError",
          "line": 42,
          "methods": [],
          "docstring": "Raised when a subtask JSON fails schema validation."
        },
        {
          "name": "PlanNotLoadedError",
          "line": 48,
          "methods": [],
          "docstring": "Raised when data access is attempted before a plan is loaded."
        },
        {
          "name": "ParserPlan",
          "line": 54,
          "methods": [
            "__init__",
            "_ensure_loaded",
            "_read_json_file",
            "load_single_file_plan",
            "load_overview_plan",
            "get_parsed_plan",
            "get_all_steps",
            "get_subtask_content"
          ],
          "docstring": "Parses and validates different types of JSON plan files and their referenced subtasks.\nImplements lazy loading of plan data."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "os"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Optional",
            "Dict",
            "Any",
            "List"
          ],
          "level": 0
        },
        {
          "module": "jsonschema",
          "names": [
            "ValidationError"
          ],
          "level": 0
        },
        {
          "module": "json_validator",
          "names": [
            "validate_against_schema"
          ],
          "level": 1
        }
      ],
      "size": 243,
      "docstring": null
    },
    {
      "path": "ai_whisperer/tools/delete_plan_tool.py",
      "classes": [
        {
          "name": "DeletePlanTool",
          "line": 17,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_find_plan",
            "_update_rfc_reference",
            "execute"
          ],
          "docstring": "Tool for deleting plan documents and their directories."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "json",
        "logging",
        "shutil"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 215,
      "docstring": "Delete Plan Tool - Removes plan documents from the system"
    },
    {
      "path": "ai_whisperer/tools/message_injector_tool.py",
      "classes": [
        {
          "name": "InjectionType",
          "line": 21,
          "methods": [],
          "docstring": "Types of message injections"
        },
        {
          "name": "InjectionResult",
          "line": 31,
          "methods": [
            "to_dict"
          ],
          "docstring": "Result of message injection"
        },
        {
          "name": "MessageInjectorTool",
          "line": 55,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "execute",
            "_get_current_session_id",
            "_check_rate_limit",
            "_generate_message",
            "_validate_session",
            "_inject_message",
            "_wait_for_response",
            "_check_for_response",
            "_track_injection",
            "_log_injection",
            "_mock_injection",
            "get_injection_history"
          ],
          "docstring": "Injects messages into AI sessions to unstick agents, recover from errors,\nor simulate user interactions for debugging purposes."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "time",
        "asyncio",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Union"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "level": 0
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "logging_custom",
          "names": [
            "EnhancedLogMessage",
            "LogLevel",
            "LogSource",
            "ComponentType"
          ],
          "level": 2
        }
      ],
      "size": 432,
      "docstring": "Message Injector Tool for Debbie the Debugger.\nInjects messages into AI sessions to unstick agents or simulate user responses."
    },
    {
      "path": "ai_whisperer/tools/system_health_check_tool.py",
      "classes": [
        {
          "name": "SystemHealthCheckTool",
          "line": 18,
          "methods": [
            "name",
            "description",
            "get_openrouter_tool_definition",
            "_find_health_check_directories",
            "_collect_check_scripts",
            "_detect_category",
            "_generate_health_report",
            "_format_error"
          ],
          "docstring": "Runs system health check scripts from a designated folder to verify\nAIWhisperer components are working correctly."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "json",
        "asyncio",
        "subprocess",
        "logging"
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool",
            "ToolResult"
          ],
          "level": 0
        },
        {
          "module": "itertools",
          "names": [
            "groupby"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.tool_registry",
          "names": [
            "get_tool_registry"
          ],
          "level": 0
        }
      ],
      "size": 401,
      "docstring": "System Health Check Tool - Runs automated health check scripts for AIWhisperer"
    },
    {
      "path": "ai_whisperer/tools/update_rfc_tool.py",
      "classes": [
        {
          "name": "UpdateRFCTool",
          "line": 18,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_find_rfc_file",
            "_read_rfc_content",
            "_write_rfc_content",
            "_update_metadata",
            "_update_section",
            "_add_history_entry",
            "execute"
          ],
          "docstring": "Tool for updating existing RFC documents during refinement."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "json",
        "re"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 335,
      "docstring": "Update RFC Tool - Updates existing RFC documents"
    },
    {
      "path": "ai_whisperer/tools/tool_set.py",
      "classes": [
        {
          "name": "ToolSet",
          "line": 10,
          "methods": [
            "__init__",
            "__repr__"
          ],
          "docstring": "Represents a collection of tools with inheritance support."
        },
        {
          "name": "ToolSetManager",
          "line": 41,
          "methods": [
            "__init__",
            "load_config",
            "_resolve_inheritance",
            "get_tool_set",
            "get_tools_for_set",
            "get_tags_for_set",
            "get_deny_tags_for_set",
            "list_tool_sets",
            "get_tool_set_info"
          ],
          "docstring": "Manages tool sets including loading, inheritance resolution, and lookups."
        }
      ],
      "functions": [],
      "imports": [
        "yaml",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Set",
            "Optional",
            "Any",
            "Union"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        }
      ],
      "size": 235,
      "docstring": "Tool Set management for organizing tools into collections."
    },
    {
      "path": "ai_whisperer/tools/read_rfc_tool.py",
      "classes": [
        {
          "name": "ReadRFCTool",
          "line": 17,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_find_rfc_file",
            "_extract_section",
            "_parse_metadata",
            "execute"
          ],
          "docstring": "Tool for reading RFC documents and extracting structured information."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "re",
        "json"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 243,
      "docstring": "Read RFC Tool - Reads RFC documents and extracts information"
    },
    {
      "path": "ai_whisperer/tools/read_plan_tool.py",
      "classes": [
        {
          "name": "ReadPlanTool",
          "line": 16,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_find_plan",
            "_format_task",
            "execute"
          ],
          "docstring": "Tool for reading execution plan details."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "json"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 210,
      "docstring": "Read Plan Tool - Reads and displays execution plan details"
    },
    {
      "path": "ai_whisperer/tools/python_ast_json_tool.py",
      "classes": [
        {
          "name": "ProcessingTimeoutError",
          "line": 121,
          "methods": [],
          "docstring": "Custom timeout error for processing timeouts."
        },
        {
          "name": "PythonASTJSONTool",
          "line": 126,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "_create_error_result",
            "_create_detailed_error_message",
            "_generate_error_suggestions",
            "_handle_graceful_degradation",
            "_validate_input_parameters",
            "get_ai_prompt_instructions",
            "execute",
            "_python_to_json",
            "_json_to_python",
            "_validate_json",
            "_fix_missing_locations",
            "_apply_reconstruction_mode",
            "ast_to_json",
            "json_to_ast",
            "file_to_json",
            "module_to_json",
            "json_to_code",
            "validate_ast_json",
            "read_python_file",
            "write_json_file",
            "convert_file",
            "_read_file_content",
            "_get_syntax_error_type",
            "_get_syntax_error_description",
            "_extract_metadata",
            "_extract_comments",
            "_process_type_annotations",
            "_optimize_ast",
            "batch_convert_files",
            "convert_directory",
            "reconstruct_python_file",
            "batch_process_files",
            "_process_files_sequential",
            "_process_files_parallel",
            "_process_single_file",
            "_start_resource_monitoring",
            "_stop_resource_monitoring",
            "_start_profiling",
            "_stop_profiling",
            "_save_checkpoint",
            "_generate_status_report",
            "_aggregate_errors"
          ],
          "docstring": "Tool for converting Python code to AST JSON representation and back."
        }
      ],
      "functions": [
        {
          "name": "extract_comments_from_source",
          "line": 25,
          "args": [
            "source"
          ],
          "docstring": "Extract comments from Python source code."
        },
        {
          "name": "calculate_formatting_metrics",
          "line": 45,
          "args": [
            "source"
          ],
          "docstring": "Calculate formatting metrics for source code."
        },
        {
          "name": "extract_docstring_info",
          "line": 103,
          "args": [
            "node"
          ],
          "docstring": "Extract docstring information from AST node."
        }
      ],
      "imports": [
        "ast",
        "json",
        "sys",
        "os",
        "re",
        "tokenize",
        "io",
        "importlib.util",
        "inspect",
        "time",
        "time",
        "time",
        "tempfile",
        "ast",
        "json",
        "time",
        "os",
        "time",
        "time",
        "threading",
        "queue",
        "time",
        "time",
        "time",
        "threading",
        "time",
        "time",
        "time",
        "re",
        "jsonschema",
        "psutil",
        "psutil",
        "astor"
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "Union",
            "List",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timezone"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor",
            "as_completed"
          ],
          "level": 0
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor",
            "as_completed"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor",
            "as_completed"
          ],
          "level": 0
        }
      ],
      "size": 4346,
      "docstring": "Python AST to JSON converter tool.\n\nThis tool provides functionality to convert Python Abstract Syntax Trees (AST)\nto JSON representation and back, supporting both file paths and module names."
    },
    {
      "path": "ai_whisperer/tools/fetch_url_tool.py",
      "classes": [
        {
          "name": "FetchURLTool",
          "line": 21,
          "methods": [
            "__init__",
            "_init_cache",
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_get_cache_key",
            "_get_cached_content",
            "_save_to_cache",
            "_html_to_markdown",
            "_extract_code_blocks",
            "execute"
          ],
          "docstring": "Tool for fetching and processing web page content."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "re",
        "time",
        "hashlib",
        "requests",
        "tempfile"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "level": 0
        },
        {
          "module": "urllib.parse",
          "names": [
            "urlparse",
            "urljoin"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 350,
      "docstring": "Fetch URL Tool - Fetches and processes web page content"
    },
    {
      "path": "ai_whisperer/tools/write_file_tool.py",
      "classes": [
        {
          "name": "WriteFileTool",
          "line": 13,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "execute",
            "get_ai_prompt_instructions"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [
        "logging",
        "pathlib"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.user_message_level",
          "names": [
            "UserMessageLevel"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.exceptions",
          "names": [
            "FileRestrictionError"
          ],
          "level": 0
        }
      ],
      "size": 123,
      "docstring": null
    },
    {
      "path": "ai_whisperer/tools/tool_registry.py",
      "classes": [
        {
          "name": "ToolRegistry",
          "line": 14,
          "methods": [
            "__new__",
            "reset_instance",
            "register_tool",
            "unregister_tool",
            "reset_tools",
            "get_tool_by_name",
            "get_all_tools",
            "get_all_tool_definitions",
            "get_all_ai_prompt_instructions",
            "get_filtered_tools",
            "initialize_tool_sets",
            "get_tool_set_manager",
            "register_tool_set",
            "get_tools_by_set",
            "get_tools_for_agent"
          ],
          "docstring": "Central registry for managing AI-usable tools.\nImplemented as a singleton."
        }
      ],
      "functions": [
        {
          "name": "get_tool_registry",
          "line": 247,
          "args": [],
          "docstring": "Returns the singleton instance of the ToolRegistry."
        }
      ],
      "imports": [
        "logging",
        "re"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Set"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "tool_set",
          "names": [
            "ToolSetManager"
          ],
          "level": 1
        }
      ],
      "size": 249,
      "docstring": null
    },
    {
      "path": "ai_whisperer/tools/find_pattern_tool.py",
      "classes": [
        {
          "name": "FindPatternTool",
          "line": 16,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "tags",
            "get_ai_prompt_instructions",
            "execute",
            "_collect_files",
            "_is_text_file",
            "_search_file"
          ],
          "docstring": "Tool for searching files for regex patterns with context lines."
        }
      ],
      "functions": [],
      "imports": [
        "re",
        "logging",
        "asyncio",
        "os"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "concurrent.futures",
          "names": [
            "ThreadPoolExecutor"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 341,
      "docstring": "Tool for finding patterns in files using regex, similar to grep."
    },
    {
      "path": "ai_whisperer/tools/validate_external_agent_tool.py",
      "classes": [
        {
          "name": "ValidateExternalAgentTool",
          "line": 14,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "tags",
            "get_ai_prompt_instructions",
            "execute"
          ],
          "docstring": "Tool for validating external agent environments."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "agents.external_adapters",
          "names": [
            "AdapterRegistry"
          ],
          "level": 2
        }
      ],
      "size": 132,
      "docstring": "Tool for validating external agent availability."
    },
    {
      "path": "ai_whisperer/tools/reply_mail_tool.py",
      "classes": [
        {
          "name": "ReplyMailTool",
          "line": 10,
          "methods": [
            "get_definition",
            "execute"
          ],
          "docstring": "Tool for replying to mail messages."
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "BaseTool",
            "ToolResult",
            "ToolDefinition",
            "ParameterDefinition"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.agents.mailbox",
          "names": [
            "Mail",
            "MessagePriority",
            "get_mailbox"
          ],
          "level": 0
        }
      ],
      "size": 127,
      "docstring": "Reply Mail Tool - Allows agents to reply to messages in their mailbox."
    },
    {
      "path": "ai_whisperer/tools/analyze_dependencies_tool.py",
      "classes": [
        {
          "name": "AnalyzeDependenciesTool",
          "line": 15,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "tags",
            "get_ai_prompt_instructions",
            "execute"
          ],
          "docstring": "Tool for analyzing and resolving task dependencies."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "agents.task_decomposer",
          "names": [
            "TaskDecomposer"
          ],
          "level": 2
        },
        {
          "module": "agents.agent_e_exceptions",
          "names": [
            "DependencyCycleError"
          ],
          "level": 2
        }
      ],
      "size": 164,
      "docstring": "Tool for analyzing task dependencies and creating execution order."
    },
    {
      "path": "ai_whisperer/tools/script_parser_tool.py",
      "classes": [
        {
          "name": "ScriptFormat",
          "line": 18,
          "methods": [],
          "docstring": "Supported script formats"
        },
        {
          "name": "ParsedScript",
          "line": 27,
          "methods": [
            "__post_init__"
          ],
          "docstring": "Represents a parsed batch script"
        },
        {
          "name": "ScriptParserTool",
          "line": 40,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "set_workspace",
            "detect_format",
            "parse_script",
            "_validate_file_path",
            "_read_file_safely",
            "_parse_json",
            "_parse_yaml",
            "_parse_text",
            "validate_script",
            "_validate_step",
            "_validate_path",
            "_get_json_depth",
            "execute"
          ],
          "docstring": "Tool for parsing and validating batch scripts in multiple formats.\nSupports JSON, YAML, and plain text formats with security validation."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "yaml",
        "os",
        "re"
      ],
      "from_imports": [
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Union"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        }
      ],
      "size": 535,
      "docstring": "ScriptParserTool - Parses and validates batch scripts in multiple formats.\nPart of Debbie's batch processing capabilities."
    },
    {
      "path": "ai_whisperer/tools/analyze_languages_tool.py",
      "classes": [
        {
          "name": "AnalyzeLanguagesTool",
          "line": 17,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_detect_frameworks",
            "execute",
            "_format_size",
            "_infer_project_type"
          ],
          "docstring": "Tool for analyzing programming languages used in the project."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "json"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Set"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 447,
      "docstring": "Analyze Languages Tool - Detects programming languages used in the project"
    },
    {
      "path": "ai_whisperer/tools/find_similar_code_tool.py",
      "classes": [
        {
          "name": "FindSimilarCodeTool",
          "line": 17,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_get_patterns_for_feature",
            "_calculate_relevance_score",
            "_extract_context",
            "execute",
            "_detect_language"
          ],
          "docstring": "Tool for finding code similar to proposed features or patterns."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "re"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 460,
      "docstring": "Find Similar Code Tool - Searches for code similar to proposed features"
    },
    {
      "path": "ai_whisperer/tools/save_generated_plan_tool.py",
      "classes": [
        {
          "name": "SaveGeneratedPlanTool",
          "line": 19,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_find_rfc_metadata",
            "execute"
          ],
          "docstring": "Saves a plan that was generated by the agent through the AI loop.\nHandles validation, directory creation, and RFC linkage."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.json_validator",
          "names": [
            "validate_against_schema"
          ],
          "level": 0
        }
      ],
      "size": 222,
      "docstring": "Tool to save a plan that was generated by the agent.\nThis complements prepare_plan_from_rfc by saving the agent-generated plan."
    },
    {
      "path": "ai_whisperer/tools/move_plan_tool.py",
      "classes": [
        {
          "name": "MovePlanTool",
          "line": 18,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_find_plan",
            "_update_rfc_metadata",
            "execute"
          ],
          "docstring": "Tool for moving plans between status directories."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "json",
        "shutil"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 205,
      "docstring": "Move Plan Tool - Moves plans between status directories"
    },
    {
      "path": "ai_whisperer/tools/prepare_plan_from_rfc_tool.py",
      "classes": [
        {
          "name": "PreparePlanFromRFCTool",
          "line": 20,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_find_rfc",
            "_calculate_rfc_hash",
            "_generate_plan_name",
            "_load_prompt_guidelines",
            "execute"
          ],
          "docstring": "Prepares RFC content and metadata for plan generation.\nReturns structured information that the agent can use to generate a plan."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging",
        "hashlib"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 276,
      "docstring": "Tool to prepare RFC content and context for plan generation.\nThis tool doesn't generate the plan itself - it prepares the information\nfor the agent to generate the plan through the normal AI loop."
    },
    {
      "path": "ai_whisperer/tools/tool_usage_logging.py",
      "classes": [],
      "functions": [
        {
          "name": "log_tool_usage",
          "line": 9,
          "args": [
            "agent",
            "tool",
            "params",
            "result"
          ],
          "docstring": null
        },
        {
          "name": "get_tool_usage_log",
          "line": 22,
          "args": [],
          "docstring": null
        }
      ],
      "imports": [
        "logging"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timezone"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.agents.registry",
          "names": [
            "Agent"
          ],
          "level": 0
        }
      ],
      "size": 23,
      "docstring": null
    },
    {
      "path": "ai_whisperer/tools/monitoring_control_tool.py",
      "classes": [
        {
          "name": "MonitoringControlTool",
          "line": 12,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "get_ai_prompt_instructions",
            "_get_monitoring_state",
            "_enable_monitoring",
            "_disable_monitoring",
            "_get_monitoring_status",
            "_set_threshold",
            "_clear_alerts"
          ],
          "docstring": "Control monitoring settings for AI sessions"
        }
      ],
      "functions": [],
      "imports": [
        "json"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        }
      ],
      "size": 319,
      "docstring": "Monitoring control tool for Debbie the Debugger.\nControls monitoring settings and alerts."
    },
    {
      "path": "ai_whisperer/tools/base_tool.py",
      "classes": [
        {
          "name": "AITool",
          "line": 4,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_openrouter_tool_definition",
            "get_ai_prompt_instructions",
            "execute"
          ],
          "docstring": "Abstract base class for all AI-usable tools in the AIWhisperer project."
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "abc",
          "names": [
            "ABC",
            "abstractmethod"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional"
          ],
          "level": 0
        }
      ],
      "size": 90,
      "docstring": null
    },
    {
      "path": "ai_whisperer/tools/python_executor_tool.py",
      "classes": [
        {
          "name": "ExecutionResult",
          "line": 36,
          "methods": [
            "to_dict"
          ],
          "docstring": "Result of Python script execution"
        },
        {
          "name": "DebugSandbox",
          "line": 50,
          "methods": [
            "__init__",
            "execute_sync",
            "_capture_variables"
          ],
          "docstring": "Sandboxed environment for executing Python scripts"
        },
        {
          "name": "PythonExecutorTool",
          "line": 190,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "execute",
            "_prepare_context",
            "_get_logs",
            "_get_state",
            "_track_execution",
            "_log_execution",
            "_get_debugging_hints",
            "get_script_history"
          ],
          "docstring": "Executes Python scripts for advanced debugging and analysis.\nProvides a sandboxed environment with debugging context."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "sys",
        "io",
        "json",
        "time",
        "traceback",
        "logging",
        "subprocess",
        "tempfile",
        "signal",
        "resource",
        "hashlib",
        "pandas",
        "numpy",
        "matplotlib.pyplot"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "level": 0
        },
        {
          "module": "contextlib",
          "names": [
            "redirect_stdout",
            "redirect_stderr"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "logging_custom",
          "names": [
            "EnhancedLogMessage",
            "LogLevel",
            "LogSource",
            "ComponentType"
          ],
          "level": 2
        },
        {
          "module": "logging_custom",
          "names": [
            "LogMessage",
            "LogLevel",
            "ComponentType"
          ],
          "level": 2
        }
      ],
      "size": 574,
      "docstring": "Python Executor Tool for Debbie the Debugger.\nExecutes Python scripts for advanced debugging and analysis with sandboxed environment."
    },
    {
      "path": "ai_whisperer/tools/workspace_validator_tool.py",
      "classes": [
        {
          "name": "ValidationStatus",
          "line": 22,
          "methods": [],
          "docstring": "Status levels for validation checks"
        },
        {
          "name": "CheckCategory",
          "line": 30,
          "methods": [],
          "docstring": "Categories of validation checks"
        },
        {
          "name": "ValidationCheck",
          "line": 40,
          "methods": [
            "to_dict"
          ],
          "docstring": "Individual validation check result"
        },
        {
          "name": "WorkspaceHealth",
          "line": 57,
          "methods": [
            "to_dict",
            "to_markdown",
            "_get_status_icon"
          ],
          "docstring": "Overall workspace health report"
        },
        {
          "name": "WorkspaceValidatorTool",
          "line": 119,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "execute",
            "_find_workspace",
            "_run_checks",
            "_check_structure",
            "_check_configuration",
            "_check_dependencies",
            "_check_permissions",
            "_check_integration",
            "_calculate_summary",
            "_generate_recommendations",
            "_save_report",
            "_log_validation"
          ],
          "docstring": "Validates AIWhisperer workspace structure, configuration, and health."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "json",
        "yaml",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "level": 0
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "logging_custom",
          "names": [
            "EnhancedLogMessage",
            "LogLevel",
            "LogSource",
            "ComponentType"
          ],
          "level": 2
        }
      ],
      "size": 673,
      "docstring": "Workspace Validator Tool for Debbie the Debugger.\nValidates AIWhisperer workspace health, configuration, and dependencies."
    },
    {
      "path": "ai_whisperer/tools/batch_command_tool.py",
      "classes": [
        {
          "name": "CommandInterpreter",
          "line": 19,
          "methods": [
            "interpret",
            "_build_action",
            "_extract_quoted_content"
          ],
          "docstring": "Interprets natural language commands into structured actions"
        },
        {
          "name": "BatchCommandTool",
          "line": 185,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "set_tool_registry",
            "interpret_command",
            "execute_script",
            "_execute_action_step",
            "_execute_command_step",
            "_interpolate_parameters",
            "_validate_script",
            "execute"
          ],
          "docstring": "Tool for interpreting and executing batch script commands.\nSupports both structured (JSON/YAML) and natural language (text) commands."
        }
      ],
      "functions": [],
      "imports": [
        "re",
        "logging",
        "re"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Callable",
            "Union"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "OrderedDict"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "script_parser_tool",
          "names": [
            "ParsedScript",
            "ScriptFormat"
          ],
          "level": 1
        }
      ],
      "size": 590,
      "docstring": "BatchCommandTool - Interprets and executes batch script commands.\nPart of Debbie's batch processing capabilities."
    },
    {
      "path": "ai_whisperer/tools/format_for_external_agent_tool.py",
      "classes": [
        {
          "name": "FormatForExternalAgentTool",
          "line": 16,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "tags",
            "get_ai_prompt_instructions",
            "execute"
          ],
          "docstring": "Tool for formatting tasks for specific external agents."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "agents.decomposed_task",
          "names": [
            "DecomposedTask"
          ],
          "level": 2
        },
        {
          "module": "agents.external_adapters",
          "names": [
            "AdapterRegistry"
          ],
          "level": 2
        },
        {
          "module": "agents.agent_e_exceptions",
          "names": [
            "ExternalAgentError"
          ],
          "level": 2
        }
      ],
      "size": 161,
      "docstring": "Tool for formatting tasks for external AI coding assistants."
    },
    {
      "path": "ai_whisperer/tools/check_mail_tool.py",
      "classes": [
        {
          "name": "CheckMailTool",
          "line": 10,
          "methods": [
            "get_definition",
            "execute"
          ],
          "docstring": "Tool for checking mailbox messages."
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "BaseTool",
            "ToolResult",
            "ToolDefinition",
            "ParameterDefinition"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.agents.mailbox",
          "names": [
            "get_mailbox"
          ],
          "level": 0
        }
      ],
      "size": 104,
      "docstring": "Check Mail Tool - Allows agents to check their mailbox for messages."
    },
    {
      "path": "ai_whisperer/tools/search_files_tool.py",
      "classes": [
        {
          "name": "SearchFilesTool",
          "line": 18,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "execute",
            "_search_by_name",
            "_search_by_content"
          ],
          "docstring": "Tool for searching files within the workspace by name or content."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "re",
        "fnmatch",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.exceptions",
          "names": [
            "FileRestrictionError"
          ],
          "level": 0
        }
      ],
      "size": 247,
      "docstring": "Search Files Tool - Search for files by name pattern or content"
    },
    {
      "path": "ai_whisperer/tools/list_rfcs_tool.py",
      "classes": [
        {
          "name": "ListRFCsTool",
          "line": 17,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_get_rfc_metadata",
            "_parse_datetime",
            "execute"
          ],
          "docstring": "Tool for listing RFC documents with filtering options."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "json",
        "re"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 236,
      "docstring": "List RFCs Tool - Lists RFC documents by status"
    },
    {
      "path": "ai_whisperer/tools/create_rfc_tool.py",
      "classes": [
        {
          "name": "CreateRFCTool",
          "line": 19,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_generate_rfc_filename",
            "_format_requirements",
            "_load_template",
            "execute"
          ],
          "docstring": "Tool for creating new RFC documents from ideas."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "json",
        "re"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.exceptions",
          "names": [
            "FileRestrictionError"
          ],
          "level": 0
        }
      ],
      "size": 297,
      "docstring": "Create RFC Tool - Creates new RFC documents for feature refinement"
    },
    {
      "path": "ai_whisperer/tools/update_task_status_tool.py",
      "classes": [
        {
          "name": "UpdateTaskStatusTool",
          "line": 15,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "tags",
            "get_ai_prompt_instructions",
            "execute",
            "get_task_record",
            "get_all_tasks"
          ],
          "docstring": "Tool for updating task execution status."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timezone"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "agents.decomposed_task",
          "names": [
            "TaskStatus"
          ],
          "level": 2
        }
      ],
      "size": 207,
      "docstring": "Tool for updating the status of decomposed tasks."
    },
    {
      "path": "ai_whisperer/tools/session_inspector_tool.py",
      "classes": [
        {
          "name": "SessionAnalysis",
          "line": 20,
          "methods": [
            "to_dict"
          ],
          "docstring": "Results of session analysis"
        },
        {
          "name": "SessionInspectorTool",
          "line": 42,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "execute",
            "_get_current_session_id",
            "_get_session_data",
            "_analyze_session",
            "_determine_stall_reason",
            "_analyze_tool_usage",
            "_count_errors",
            "_generate_warnings",
            "_generate_recommendations",
            "_determine_status",
            "_get_last_activity",
            "_parse_timestamp",
            "_format_message_history",
            "_log_analysis",
            "_get_mock_session_data"
          ],
          "docstring": "Inspects and analyzes active AI sessions to detect issues like stalls,\nerrors, and performance problems."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "time",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "logging_custom",
          "names": [
            "EnhancedLogMessage",
            "LogLevel",
            "LogSource",
            "ComponentType"
          ],
          "level": 2
        }
      ],
      "size": 410,
      "docstring": "Session Inspector Tool for Debbie the Debugger.\nAnalyzes active session state, message history, and detects common issues like stalls."
    },
    {
      "path": "ai_whisperer/tools/move_rfc_tool.py",
      "classes": [
        {
          "name": "MoveRFCTool",
          "line": 18,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_find_rfc_file",
            "_update_rfc_status",
            "_add_history_entry",
            "execute"
          ],
          "docstring": "Tool for moving RFC documents between status folders."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "json",
        "shutil",
        "re",
        "re"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 269,
      "docstring": "Move RFC Tool - Moves RFCs between status folders"
    },
    {
      "path": "ai_whisperer/tools/delete_rfc_tool.py",
      "classes": [
        {
          "name": "DeleteRFCTool",
          "line": 16,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_find_rfc",
            "execute"
          ],
          "docstring": "Tool for deleting RFC documents."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 179,
      "docstring": "Delete RFC Tool - Removes RFC documents from the system"
    },
    {
      "path": "ai_whisperer/tools/session_health_tool.py",
      "classes": [
        {
          "name": "SessionHealthTool",
          "line": 13,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "get_ai_prompt_instructions",
            "_gather_health_metrics",
            "_calculate_health_score",
            "_format_health_report"
          ],
          "docstring": "Check the health status of AI sessions"
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "time"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        }
      ],
      "size": 182,
      "docstring": "Session health monitoring tool for Debbie the Debugger.\nProvides real-time health metrics for AI sessions."
    },
    {
      "path": "ai_whisperer/tools/list_plans_tool.py",
      "classes": [
        {
          "name": "ListPlansTool",
          "line": 17,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_load_plan_info",
            "execute"
          ],
          "docstring": "Tool for listing execution plans."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "json"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 211,
      "docstring": "List Plans Tool - Lists available execution plans"
    },
    {
      "path": "ai_whisperer/tools/recommend_external_agent_tool.py",
      "classes": [
        {
          "name": "RecommendExternalAgentTool",
          "line": 15,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "tags",
            "get_ai_prompt_instructions",
            "execute"
          ],
          "docstring": "Tool for recommending external agents based on task characteristics."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "agents.external_adapters",
          "names": [
            "AdapterRegistry"
          ],
          "level": 2
        },
        {
          "module": "agents.decomposed_task",
          "names": [
            "DecomposedTask"
          ],
          "level": 2
        }
      ],
      "size": 190,
      "docstring": "Tool for recommending the best external agent for a task."
    },
    {
      "path": "ai_whisperer/tools/list_directory_tool.py",
      "classes": [
        {
          "name": "ListDirectoryTool",
          "line": 16,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "execute",
            "_list_flat",
            "_list_recursive",
            "_format_size"
          ],
          "docstring": "Tool for listing files and directories within the workspace."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.exceptions",
          "names": [
            "FileRestrictionError"
          ],
          "level": 0
        }
      ],
      "size": 233,
      "docstring": "List Directory Tool - Lists files and directories in workspace paths"
    },
    {
      "path": "ai_whisperer/tools/workspace_stats_tool.py",
      "classes": [
        {
          "name": "WorkspaceStatsTool",
          "line": 16,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "tags",
            "get_ai_prompt_instructions",
            "execute",
            "_analyze_directory",
            "_format_size"
          ],
          "docstring": "Tool for gathering statistics about the workspace."
        }
      ],
      "functions": [],
      "imports": [
        "logging",
        "time",
        "os"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 355,
      "docstring": "Tool for analyzing workspace statistics."
    },
    {
      "path": "ai_whisperer/tools/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "from_imports": [],
      "size": 1,
      "docstring": null
    },
    {
      "path": "ai_whisperer/tools/web_search_tool.py",
      "classes": [
        {
          "name": "WebSearchTool",
          "line": 21,
          "methods": [
            "__init__",
            "_init_cache",
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_get_cache_key",
            "_get_cached_results",
            "_save_to_cache",
            "_enhance_query",
            "_parse_duckduckgo_html",
            "_search_duckduckgo",
            "execute"
          ],
          "docstring": "Tool for searching the web for technical information and best practices."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "json",
        "time",
        "hashlib",
        "urllib.parse",
        "requests",
        "re",
        "tempfile"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 312,
      "docstring": "Web Search Tool - Basic web search functionality for Agent P"
    },
    {
      "path": "ai_whisperer/tools/session_analysis_tool.py",
      "classes": [
        {
          "name": "SessionAnalysisTool",
          "line": 14,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "get_ai_prompt_instructions",
            "_gather_session_data",
            "_analyze_errors",
            "_analyze_performance",
            "_analyze_patterns",
            "_generate_recommendations",
            "_format_analysis_report"
          ],
          "docstring": "Analyze session patterns and performance"
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "time"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        }
      ],
      "size": 371,
      "docstring": "Session analysis tool for Debbie the Debugger.\nProvides deep analysis of session patterns and performance."
    },
    {
      "path": "ai_whisperer/tools/create_plan_from_rfc_tool.py",
      "classes": [
        {
          "name": "CreatePlanFromRFCTool",
          "line": 22,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_find_rfc",
            "_calculate_rfc_hash",
            "_generate_plan_name",
            "_load_prompt_template",
            "_create_plan_prompt",
            "execute"
          ],
          "docstring": "Tool for converting RFCs into structured execution plans."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "json",
        "hashlib",
        "asyncio",
        "concurrent.futures"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.exceptions",
          "names": [
            "FileRestrictionError"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_service.openrouter_ai_service",
          "names": [
            "OpenRouterAIService"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.config",
          "names": [
            "load_config"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.json_validator",
          "names": [
            "validate_against_schema"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_loop.ai_config",
          "names": [
            "AIConfig"
          ],
          "level": 0
        }
      ],
      "size": 305,
      "docstring": "Create Plan from RFC Tool - Converts RFCs into structured execution plans"
    },
    {
      "path": "ai_whisperer/tools/decompose_plan_tool.py",
      "classes": [
        {
          "name": "DecomposePlanTool",
          "line": 19,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "tags",
            "get_ai_prompt_instructions",
            "execute"
          ],
          "docstring": "Tool for decomposing plans into executable tasks."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "agents.task_decomposer",
          "names": [
            "TaskDecomposer"
          ],
          "level": 2
        },
        {
          "module": "agents.decomposed_task",
          "names": [
            "DecomposedTask"
          ],
          "level": 2
        },
        {
          "module": "agents.agent_e_exceptions",
          "names": [
            "InvalidPlanError",
            "TaskDecompositionError"
          ],
          "level": 2
        }
      ],
      "size": 124,
      "docstring": "Tool for decomposing Agent P plans into executable tasks."
    },
    {
      "path": "ai_whisperer/tools/send_mail_tool.py",
      "classes": [
        {
          "name": "SendMailTool",
          "line": 11,
          "methods": [
            "get_definition",
            "execute"
          ],
          "docstring": "Tool for sending mail messages to agents or users."
        }
      ],
      "functions": [],
      "imports": [
        "json"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "BaseTool",
            "ToolResult",
            "ToolDefinition",
            "ParameterDefinition"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.agents.mailbox",
          "names": [
            "Mail",
            "MessagePriority",
            "get_mailbox"
          ],
          "level": 0
        }
      ],
      "size": 125,
      "docstring": "Send Mail Tool - Allows agents to send messages to other agents or users."
    },
    {
      "path": "ai_whisperer/tools/execute_command_tool.py",
      "classes": [
        {
          "name": "ExecuteCommandTool",
          "line": 12,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "execute"
          ],
          "docstring": "A tool to execute shell commands on the system."
        }
      ],
      "functions": [],
      "imports": [
        "subprocess",
        "logging",
        "sys",
        "asyncio",
        "threading"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        }
      ],
      "size": 171,
      "docstring": null
    },
    {
      "path": "ai_whisperer/tools/read_file_tool.py",
      "classes": [
        {
          "name": "ReadFileTool",
          "line": 9,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "execute"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [
        "os"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.exceptions",
          "names": [
            "FileRestrictionError"
          ],
          "level": 0
        }
      ],
      "size": 106,
      "docstring": null
    },
    {
      "path": "ai_whisperer/tools/update_plan_from_rfc_tool.py",
      "classes": [
        {
          "name": "UpdatePlanFromRFCTool",
          "line": 20,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_find_plan",
            "_calculate_rfc_hash",
            "_check_rfc_changes",
            "_create_update_prompt",
            "execute"
          ],
          "docstring": "Tool for updating plans when source RFC changes."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging",
        "json",
        "hashlib",
        "asyncio",
        "concurrent.futures"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_service.openrouter_ai_service",
          "names": [
            "OpenRouterAIService"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.json_validator",
          "names": [
            "validate_against_schema"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_loop.ai_config",
          "names": [
            "AIConfig"
          ],
          "level": 0
        }
      ],
      "size": 315,
      "docstring": "Update Plan from RFC Tool - Updates plans when source RFC changes"
    },
    {
      "path": "ai_whisperer/tools/parse_external_result_tool.py",
      "classes": [
        {
          "name": "ParseExternalResultTool",
          "line": 14,
          "methods": [
            "__init__",
            "name",
            "description",
            "parameters_schema",
            "tags",
            "get_ai_prompt_instructions",
            "execute"
          ],
          "docstring": "Tool for parsing execution results from external agents."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List"
          ],
          "level": 0
        },
        {
          "module": "base_tool",
          "names": [
            "AITool"
          ],
          "level": 1
        },
        {
          "module": "agents.external_adapters",
          "names": [
            "AdapterRegistry"
          ],
          "level": 2
        }
      ],
      "size": 178,
      "docstring": "Tool for parsing results from external agent execution."
    },
    {
      "path": "ai_whisperer/tools/get_file_content_tool.py",
      "classes": [
        {
          "name": "GetFileContentTool",
          "line": 16,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "execute",
            "_format_lines_with_numbers",
            "_is_binary_file",
            "_format_size"
          ],
          "docstring": "Tool for reading file content with advanced options like preview mode and line ranges."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.exceptions",
          "names": [
            "FileRestrictionError"
          ],
          "level": 0
        }
      ],
      "size": 237,
      "docstring": "Get File Content Tool - Read file content with advanced options"
    },
    {
      "path": "ai_whisperer/tools/get_project_structure_tool.py",
      "classes": [
        {
          "name": "GetProjectStructureTool",
          "line": 16,
          "methods": [
            "name",
            "description",
            "parameters_schema",
            "category",
            "tags",
            "get_ai_prompt_instructions",
            "_analyze_directory",
            "_identify_purpose",
            "_build_tree",
            "_identify_project_components",
            "execute"
          ],
          "docstring": "Tool for analyzing and understanding project structure and organization."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 516,
      "docstring": "Get Project Structure Tool - Analyzes and describes project organization"
    },
    {
      "path": "ai_whisperer/tools/tool_registration.py",
      "classes": [],
      "functions": [
        {
          "name": "register_all_tools",
          "line": 14,
          "args": [
            "path_manager"
          ],
          "docstring": "Register all available tools with the tool registry.\n\nArgs:\n    path_manager: Optional PathManager instance for tools that need it"
        },
        {
          "name": "_register_file_tools",
          "line": 57,
          "args": [
            "tool_registry"
          ],
          "docstring": "Register basic file operation tools."
        },
        {
          "name": "_register_analysis_tools",
          "line": 76,
          "args": [
            "tool_registry",
            "path_manager"
          ],
          "docstring": "Register advanced analysis tools."
        },
        {
          "name": "_register_rfc_tools",
          "line": 87,
          "args": [
            "tool_registry"
          ],
          "docstring": "Register RFC management tools."
        },
        {
          "name": "_register_plan_tools",
          "line": 106,
          "args": [
            "tool_registry"
          ],
          "docstring": "Register plan management tools."
        },
        {
          "name": "_register_codebase_tools",
          "line": 127,
          "args": [
            "tool_registry"
          ],
          "docstring": "Register codebase analysis tools."
        },
        {
          "name": "_register_web_tools",
          "line": 140,
          "args": [
            "tool_registry"
          ],
          "docstring": "Register web research tools."
        },
        {
          "name": "_register_debugging_tools",
          "line": 151,
          "args": [
            "tool_registry"
          ],
          "docstring": "Register Debbie's debugging and monitoring tools."
        },
        {
          "name": "_register_mailbox_tools",
          "line": 183,
          "args": [
            "tool_registry"
          ],
          "docstring": "Register mailbox communication tools."
        },
        {
          "name": "_register_agent_e_tools",
          "line": 195,
          "args": [
            "tool_registry"
          ],
          "docstring": "Register Agent E task decomposition tools."
        },
        {
          "name": "register_tool_category",
          "line": 221,
          "args": [
            "category",
            "path_manager"
          ],
          "docstring": "Register only tools from a specific category.\n\nArgs:\n    category: Category name (e.g., 'file', 'rfc', 'debugging')\n    path_manager: Optional PathManager instance"
        }
      ],
      "imports": [
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "tool_registry",
          "names": [
            "get_tool_registry"
          ],
          "level": 1
        },
        {
          "module": "path_management",
          "names": [
            "PathManager"
          ],
          "level": 2
        },
        {
          "module": "read_file_tool",
          "names": [
            "ReadFileTool"
          ],
          "level": 1
        },
        {
          "module": "write_file_tool",
          "names": [
            "WriteFileTool"
          ],
          "level": 1
        },
        {
          "module": "execute_command_tool",
          "names": [
            "ExecuteCommandTool"
          ],
          "level": 1
        },
        {
          "module": "list_directory_tool",
          "names": [
            "ListDirectoryTool"
          ],
          "level": 1
        },
        {
          "module": "search_files_tool",
          "names": [
            "SearchFilesTool"
          ],
          "level": 1
        },
        {
          "module": "get_file_content_tool",
          "names": [
            "GetFileContentTool"
          ],
          "level": 1
        },
        {
          "module": "find_pattern_tool",
          "names": [
            "FindPatternTool"
          ],
          "level": 1
        },
        {
          "module": "workspace_stats_tool",
          "names": [
            "WorkspaceStatsTool"
          ],
          "level": 1
        },
        {
          "module": "create_rfc_tool",
          "names": [
            "CreateRFCTool"
          ],
          "level": 1
        },
        {
          "module": "read_rfc_tool",
          "names": [
            "ReadRFCTool"
          ],
          "level": 1
        },
        {
          "module": "list_rfcs_tool",
          "names": [
            "ListRFCsTool"
          ],
          "level": 1
        },
        {
          "module": "update_rfc_tool",
          "names": [
            "UpdateRFCTool"
          ],
          "level": 1
        },
        {
          "module": "move_rfc_tool",
          "names": [
            "MoveRFCTool"
          ],
          "level": 1
        },
        {
          "module": "delete_rfc_tool",
          "names": [
            "DeleteRFCTool"
          ],
          "level": 1
        },
        {
          "module": "prepare_plan_from_rfc_tool",
          "names": [
            "PreparePlanFromRFCTool"
          ],
          "level": 1
        },
        {
          "module": "save_generated_plan_tool",
          "names": [
            "SaveGeneratedPlanTool"
          ],
          "level": 1
        },
        {
          "module": "list_plans_tool",
          "names": [
            "ListPlansTool"
          ],
          "level": 1
        },
        {
          "module": "read_plan_tool",
          "names": [
            "ReadPlanTool"
          ],
          "level": 1
        },
        {
          "module": "update_plan_from_rfc_tool",
          "names": [
            "UpdatePlanFromRFCTool"
          ],
          "level": 1
        },
        {
          "module": "move_plan_tool",
          "names": [
            "MovePlanTool"
          ],
          "level": 1
        },
        {
          "module": "delete_plan_tool",
          "names": [
            "DeletePlanTool"
          ],
          "level": 1
        },
        {
          "module": "analyze_languages_tool",
          "names": [
            "AnalyzeLanguagesTool"
          ],
          "level": 1
        },
        {
          "module": "find_similar_code_tool",
          "names": [
            "FindSimilarCodeTool"
          ],
          "level": 1
        },
        {
          "module": "get_project_structure_tool",
          "names": [
            "GetProjectStructureTool"
          ],
          "level": 1
        },
        {
          "module": "web_search_tool",
          "names": [
            "WebSearchTool"
          ],
          "level": 1
        },
        {
          "module": "fetch_url_tool",
          "names": [
            "FetchURLTool"
          ],
          "level": 1
        },
        {
          "module": "session_health_tool",
          "names": [
            "SessionHealthTool"
          ],
          "level": 1
        },
        {
          "module": "session_analysis_tool",
          "names": [
            "SessionAnalysisTool"
          ],
          "level": 1
        },
        {
          "module": "monitoring_control_tool",
          "names": [
            "MonitoringControlTool"
          ],
          "level": 1
        },
        {
          "module": "session_inspector_tool",
          "names": [
            "SessionInspectorTool"
          ],
          "level": 1
        },
        {
          "module": "message_injector_tool",
          "names": [
            "MessageInjectorTool"
          ],
          "level": 1
        },
        {
          "module": "workspace_validator_tool",
          "names": [
            "WorkspaceValidatorTool"
          ],
          "level": 1
        },
        {
          "module": "python_executor_tool",
          "names": [
            "PythonExecutorTool"
          ],
          "level": 1
        },
        {
          "module": "script_parser_tool",
          "names": [
            "ScriptParserTool"
          ],
          "level": 1
        },
        {
          "module": "batch_command_tool",
          "names": [
            "BatchCommandTool"
          ],
          "level": 1
        },
        {
          "module": "system_health_check_tool",
          "names": [
            "SystemHealthCheckTool"
          ],
          "level": 1
        },
        {
          "module": "agents.mailbox_tools",
          "names": [
            "register_mailbox_tools"
          ],
          "level": 2
        },
        {
          "module": "decompose_plan_tool",
          "names": [
            "DecomposePlanTool"
          ],
          "level": 1
        },
        {
          "module": "analyze_dependencies_tool",
          "names": [
            "AnalyzeDependenciesTool"
          ],
          "level": 1
        },
        {
          "module": "format_for_external_agent_tool",
          "names": [
            "FormatForExternalAgentTool"
          ],
          "level": 1
        },
        {
          "module": "update_task_status_tool",
          "names": [
            "UpdateTaskStatusTool"
          ],
          "level": 1
        },
        {
          "module": "validate_external_agent_tool",
          "names": [
            "ValidateExternalAgentTool"
          ],
          "level": 1
        },
        {
          "module": "recommend_external_agent_tool",
          "names": [
            "RecommendExternalAgentTool"
          ],
          "level": 1
        },
        {
          "module": "parse_external_result_tool",
          "names": [
            "ParseExternalResultTool"
          ],
          "level": 1
        }
      ],
      "size": 251,
      "docstring": "Centralized tool registration for AIWhisperer.\nThis module handles registering all available tools with the tool registry."
    },
    {
      "path": "ai_whisperer/ai_service/openrouter_ai_service.py",
      "classes": [
        {
          "name": "OpenRouterAIService",
          "line": 22,
          "methods": [
            "__init__",
            "list_models",
            "call_chat_completion",
            "_build_payload",
            "_handle_error_response"
          ],
          "docstring": "OpenRouter API wrapper that passes messages directly to the API."
        }
      ],
      "functions": [],
      "imports": [
        "requests",
        "json",
        "threading",
        "logging",
        "asyncio"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Generator",
            "Optional",
            "AsyncIterator"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_service.ai_service",
          "names": [
            "AIService",
            "AIStreamChunk"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_loop.ai_config",
          "names": [
            "AIConfig"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.exceptions",
          "names": [
            "OpenRouterAIServiceError",
            "OpenRouterAuthError",
            "OpenRouterRateLimitError",
            "OpenRouterConnectionError",
            "ConfigError"
          ],
          "level": 0
        }
      ],
      "size": 253,
      "docstring": "OpenRouter AI Service implementation"
    },
    {
      "path": "ai_whisperer/ai_service/tool_calling.py",
      "classes": [
        {
          "name": "ToolChoice",
          "line": 16,
          "methods": [],
          "docstring": "Tool choice options"
        },
        {
          "name": "ToolCall",
          "line": 24,
          "methods": [
            "from_api_response",
            "to_dict"
          ],
          "docstring": "Represents a tool call request from the model"
        },
        {
          "name": "ToolCallResult",
          "line": 52,
          "methods": [
            "to_message"
          ],
          "docstring": "Result from executing a tool call"
        },
        {
          "name": "Message",
          "line": 69,
          "methods": [
            "to_dict"
          ],
          "docstring": "Base message class"
        },
        {
          "name": "UserMessage",
          "line": 83,
          "methods": [
            "__init__"
          ],
          "docstring": "User message"
        },
        {
          "name": "AssistantMessage",
          "line": 90,
          "methods": [
            "__init__",
            "to_dict"
          ],
          "docstring": "Assistant message with optional tool calls"
        },
        {
          "name": "ToolCallMessage",
          "line": 105,
          "methods": [
            "__init__",
            "to_dict"
          ],
          "docstring": "Tool call result message"
        },
        {
          "name": "StreamAccumulator",
          "line": 122,
          "methods": [
            "add_chunk",
            "get_tool_calls"
          ],
          "docstring": "Accumulates streaming chunks for tool calls"
        },
        {
          "name": "ToolCallHandler",
          "line": 159,
          "methods": [
            "__init__",
            "register_tool",
            "register_tools",
            "get_tool_definitions",
            "parse_tool_calls",
            "format_messages",
            "build_api_params",
            "needs_continuation",
            "get_continuation_message",
            "reset_continuation",
            "get_model_capabilities",
            "create_stream_accumulator"
          ],
          "docstring": "Handles tool calling following OpenAI/OpenRouter standards"
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "List",
            "Dict",
            "Any",
            "Optional",
            "Union",
            "Callable"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "level": 0
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        }
      ],
      "size": 322,
      "docstring": "OpenAI/OpenRouter standard tool calling implementation.\nProvides proper tool call handling with message formatting following API standards."
    },
    {
      "path": "ai_whisperer/ai_service/ai_service.py",
      "classes": [
        {
          "name": "AIStreamChunk",
          "line": 5,
          "methods": [
            "__init__",
            "__eq__",
            "__repr__"
          ],
          "docstring": null
        },
        {
          "name": "AIService",
          "line": 34,
          "methods": [],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "abc",
          "names": [
            "ABC",
            "abstractmethod"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Dict",
            "Any",
            "Optional",
            "Union",
            "AsyncIterator"
          ],
          "level": 0
        }
      ],
      "size": 42,
      "docstring": null
    },
    {
      "path": "ai_whisperer/batch/batch_client.py",
      "classes": [
        {
          "name": "BatchClient",
          "line": 18,
          "methods": [
            "__init__"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [
        "sys",
        "os",
        "json",
        "logging",
        "asyncio"
      ],
      "from_imports": [
        {
          "module": "server_manager",
          "names": [
            "ServerManager"
          ],
          "level": 1
        },
        {
          "module": "websocket_client",
          "names": [
            "WebSocketClient"
          ],
          "level": 1
        },
        {
          "module": "script_processor",
          "names": [
            "ScriptProcessor",
            "ScriptFileNotFoundError"
          ],
          "level": 1
        },
        {
          "module": "ai_whisperer",
          "names": [
            "logging_custom"
          ],
          "level": 0
        }
      ],
      "size": 169,
      "docstring": "Batch client core integration for Debbie the Debugger.\nCoordinates server, websocket, and script processing for batch execution."
    },
    {
      "path": "ai_whisperer/batch/websocket_client.py",
      "classes": [
        {
          "name": "WebSocketError",
          "line": 21,
          "methods": [],
          "docstring": "Base exception for WebSocket operations."
        },
        {
          "name": "WebSocketConnectionError",
          "line": 26,
          "methods": [],
          "docstring": "Raised when WebSocket connection fails."
        },
        {
          "name": "WebSocketClient",
          "line": 31,
          "methods": [
            "__init__",
            "set_notification_handler"
          ],
          "docstring": "WebSocket client for communicating with the interactive server."
        }
      ],
      "functions": [],
      "imports": [
        "asyncio",
        "json",
        "logging",
        "websockets"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Optional",
            "Dict",
            "Any",
            "Callable"
          ],
          "level": 0
        },
        {
          "module": "websockets.client",
          "names": [
            "ClientConnection"
          ],
          "level": 0
        },
        {
          "module": "websockets.legacy.client",
          "names": [
            "WebSocketClientProtocol"
          ],
          "level": 0
        }
      ],
      "size": 210,
      "docstring": "WebSocket client for Debbie the Debugger.\nHandles WebSocket connection and communication with the interactive server."
    },
    {
      "path": "ai_whisperer/batch/script_processor.py",
      "classes": [
        {
          "name": "ScriptFileNotFoundError",
          "line": 13,
          "methods": [],
          "docstring": "Raised when a script file cannot be found."
        },
        {
          "name": "ScriptProcessor",
          "line": 18,
          "methods": [
            "__init__",
            "load_script",
            "get_next_command",
            "reset",
            "has_more_commands",
            "get_remaining_count",
            "peek_next_command"
          ],
          "docstring": "Processes batch scripts for execution."
        }
      ],
      "functions": [],
      "imports": [
        "os",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Optional",
            "List"
          ],
          "level": 0
        }
      ],
      "size": 117,
      "docstring": "Script processor for Debbie the Debugger.\nHandles loading and parsing of batch scripts with support for comments and blank lines."
    },
    {
      "path": "ai_whisperer/batch/debbie_integration.py",
      "classes": [
        {
          "name": "DebbieDebugger",
          "line": 20,
          "methods": [
            "__init__",
            "intercept_websocket",
            "get_statistics",
            "get_debugging_report"
          ],
          "docstring": "Main integration point for Debbie's debugging capabilities.\nCoordinates monitoring, intervention, and logging systems."
        },
        {
          "name": "DebbieFactory",
          "line": 255,
          "methods": [
            "create_default",
            "create_aggressive",
            "create_passive"
          ],
          "docstring": "Factory for creating Debbie instances with different configurations"
        }
      ],
      "functions": [],
      "imports": [
        "asyncio",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "monitoring",
          "names": [
            "DebbieMonitor",
            "AnomalyAlert"
          ],
          "level": 1
        },
        {
          "module": "intervention",
          "names": [
            "InterventionOrchestrator",
            "InterventionConfig"
          ],
          "level": 1
        },
        {
          "module": "websocket_interceptor",
          "names": [
            "WebSocketInterceptor"
          ],
          "level": 1
        },
        {
          "module": "logging.debbie_logger",
          "names": [
            "DebbieLogger"
          ],
          "level": 2
        },
        {
          "module": "logging.log_aggregator",
          "names": [
            "LogAggregator"
          ],
          "level": 2
        }
      ],
      "size": 344,
      "docstring": "Integration module for Debbie the Debugger.\nTies together monitoring, intervention, and interception systems."
    },
    {
      "path": "ai_whisperer/batch/intervention.py",
      "classes": [
        {
          "name": "InterventionStrategy",
          "line": 26,
          "methods": [],
          "docstring": "Types of intervention strategies"
        },
        {
          "name": "InterventionResult",
          "line": 37,
          "methods": [],
          "docstring": "Result of an intervention attempt"
        },
        {
          "name": "InterventionConfig",
          "line": 47,
          "methods": [],
          "docstring": "Configuration for intervention behavior"
        },
        {
          "name": "InterventionRecord",
          "line": 97,
          "methods": [
            "to_dict"
          ],
          "docstring": "Record of an intervention attempt"
        },
        {
          "name": "InterventionHistory",
          "line": 120,
          "methods": [
            "__init__",
            "add_record",
            "_update_success_rate",
            "get_session_history",
            "get_strategy_stats",
            "get_recent_interventions"
          ],
          "docstring": "Tracks intervention history and patterns"
        },
        {
          "name": "InterventionExecutor",
          "line": 182,
          "methods": [
            "__init__",
            "_should_skip_strategy",
            "get_intervention_stats"
          ],
          "docstring": "Executes intervention strategies"
        },
        {
          "name": "InterventionOrchestrator",
          "line": 556,
          "methods": [
            "__init__",
            "get_stats"
          ],
          "docstring": "Orchestrates monitoring and intervention systems"
        }
      ],
      "functions": [],
      "imports": [
        "asyncio",
        "time",
        "logging",
        "json",
        "uuid"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Callable",
            "Union"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "level": 0
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        },
        {
          "module": "logging_custom",
          "names": [
            "EnhancedLogMessage",
            "LogLevel",
            "LogSource",
            "ComponentType"
          ],
          "level": 2
        },
        {
          "module": "logging.debbie_logger",
          "names": [
            "DebbieLogger"
          ],
          "level": 2
        },
        {
          "module": "tools.message_injector_tool",
          "names": [
            "MessageInjectorTool",
            "InjectionType"
          ],
          "level": 2
        },
        {
          "module": "tools.session_inspector_tool",
          "names": [
            "SessionInspectorTool"
          ],
          "level": 2
        },
        {
          "module": "tools.python_executor_tool",
          "names": [
            "PythonExecutorTool"
          ],
          "level": 2
        },
        {
          "module": "monitoring",
          "names": [
            "AnomalyAlert"
          ],
          "level": 1
        }
      ],
      "size": 640,
      "docstring": "Automated intervention system for Debbie the Debugger.\nImplements recovery strategies and intervention policies."
    },
    {
      "path": "ai_whisperer/batch/websocket_interceptor.py",
      "classes": [
        {
          "name": "MessageDirection",
          "line": 24,
          "methods": [],
          "docstring": "Direction of WebSocket messages"
        },
        {
          "name": "MessageType",
          "line": 30,
          "methods": [],
          "docstring": "Types of JSON-RPC messages"
        },
        {
          "name": "InterceptedMessage",
          "line": 40,
          "methods": [
            "to_dict"
          ],
          "docstring": "Represents an intercepted WebSocket message"
        },
        {
          "name": "MessageInterceptor",
          "line": 65,
          "methods": [
            "__init__",
            "add_handler",
            "add_filter"
          ],
          "docstring": "Base class for message interception"
        },
        {
          "name": "WebSocketInterceptor",
          "line": 98,
          "methods": [
            "__init__",
            "_register_default_handlers",
            "_determine_message_type",
            "_update_session_mapping",
            "_log_message",
            "get_statistics",
            "create_intercepting_connection"
          ],
          "docstring": "Intercepts WebSocket messages for monitoring and debugging.\nActs as a transparent proxy between client and server."
        },
        {
          "name": "InterceptingWebSocket",
          "line": 460,
          "methods": [
            "__init__",
            "closed",
            "__getattr__"
          ],
          "docstring": "WebSocket wrapper that intercepts messages.\nMimics the WebSocket client interface."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "asyncio",
        "logging",
        "time",
        "websockets"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Callable",
            "Set",
            "Tuple",
            "Union"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "level": 0
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        },
        {
          "module": "logging_custom",
          "names": [
            "EnhancedLogMessage",
            "LogLevel",
            "LogSource",
            "ComponentType"
          ],
          "level": 2
        },
        {
          "module": "logging.debbie_logger",
          "names": [
            "DebbieLogger"
          ],
          "level": 2
        },
        {
          "module": "logging.log_aggregator",
          "names": [
            "LogAggregator"
          ],
          "level": 2
        },
        {
          "module": "monitoring",
          "names": [
            "MonitoringEvent",
            "DebbieMonitor"
          ],
          "level": 1
        }
      ],
      "size": 520,
      "docstring": "WebSocket message interceptor for Debbie the Debugger.\nProvides non-invasive monitoring of WebSocket communications."
    },
    {
      "path": "ai_whisperer/batch/server_manager.py",
      "classes": [
        {
          "name": "ServerManager",
          "line": 13,
          "methods": [
            "__init__",
            "start_server",
            "_start_subprocess",
            "stop_server",
            "is_running",
            "_wait_for_server_ready"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [
        "random",
        "subprocess",
        "time",
        "socket",
        "sys",
        "os"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Optional"
          ],
          "level": 0
        }
      ],
      "size": 126,
      "docstring": "Server lifecycle management for batch mode.\nHandles starting, stopping, and monitoring the interactive server for Debbie's batch client."
    },
    {
      "path": "ai_whisperer/batch/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "batch_client",
          "names": [
            "BatchClient"
          ],
          "level": 1
        },
        {
          "module": "server_manager",
          "names": [
            "ServerManager"
          ],
          "level": 1
        },
        {
          "module": "websocket_client",
          "names": [
            "WebSocketClient",
            "WebSocketError",
            "WebSocketConnectionError"
          ],
          "level": 1
        },
        {
          "module": "script_processor",
          "names": [
            "ScriptProcessor",
            "ScriptFileNotFoundError"
          ],
          "level": 1
        }
      ],
      "size": 21,
      "docstring": "Batch mode components for Debbie the Debugger.\n\nThis module provides the infrastructure for running AIWhisperer in batch mode,\nallowing automated script execution and debugging assistance."
    },
    {
      "path": "ai_whisperer/batch/monitoring.py",
      "classes": [
        {
          "name": "MonitoringEvent",
          "line": 26,
          "methods": [],
          "docstring": "Types of monitoring events"
        },
        {
          "name": "MonitoringMetrics",
          "line": 42,
          "methods": [
            "update_response_time",
            "to_dict"
          ],
          "docstring": "Performance and health metrics for a session"
        },
        {
          "name": "AnomalyAlert",
          "line": 76,
          "methods": [
            "to_dict"
          ],
          "docstring": "Alert for detected anomaly"
        },
        {
          "name": "AnomalyDetector",
          "line": 99,
          "methods": [
            "__init__",
            "analyze",
            "_analyze_tool_usage",
            "update_baseline"
          ],
          "docstring": "Detects anomalies in session behavior"
        },
        {
          "name": "DebbieMonitor",
          "line": 229,
          "methods": [
            "__init__",
            "_register_default_handlers",
            "register_handler",
            "_update_metrics_from_inspection",
            "get_session_metrics",
            "get_all_metrics"
          ],
          "docstring": "Main monitoring system for Debbie"
        },
        {
          "name": "MetricsCollector",
          "line": 566,
          "methods": [
            "__init__",
            "record_metric",
            "get_metric_stats"
          ],
          "docstring": "Collects and aggregates performance metrics"
        }
      ],
      "functions": [],
      "imports": [
        "asyncio",
        "time",
        "json",
        "logging",
        "statistics"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Callable",
            "Set",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "level": 0
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "deque",
            "defaultdict"
          ],
          "level": 0
        },
        {
          "module": "logging_custom",
          "names": [
            "EnhancedLogMessage",
            "LogLevel",
            "LogSource",
            "ComponentType"
          ],
          "level": 2
        },
        {
          "module": "logging.debbie_logger",
          "names": [
            "DebbieLogger"
          ],
          "level": 2
        },
        {
          "module": "logging.log_aggregator",
          "names": [
            "LogAggregator"
          ],
          "level": 2
        },
        {
          "module": "tools.session_inspector_tool",
          "names": [
            "SessionInspectorTool"
          ],
          "level": 2
        },
        {
          "module": "tools.message_injector_tool",
          "names": [
            "MessageInjectorTool"
          ],
          "level": 2
        }
      ],
      "size": 607,
      "docstring": "Real-time monitoring system for Debbie the Debugger.\nMonitors AI sessions for anomalies, stalls, and performance issues."
    },
    {
      "path": "ai_whisperer/batch/__main__.py",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "line": 11,
          "args": [],
          "docstring": "Main entry point for batch client"
        }
      ],
      "imports": [
        "sys",
        "asyncio"
      ],
      "from_imports": [
        {
          "module": "batch_client",
          "names": [
            "BatchClient"
          ],
          "level": 1
        }
      ],
      "size": 29,
      "docstring": "Entry point for batch mode execution.\nUsage: python -m ai_whisperer.batch.batch_client <script_path>"
    },
    {
      "path": "ai_whisperer/commands/echo.py",
      "classes": [
        {
          "name": "EchoCommand",
          "line": 4,
          "methods": [
            "run"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "base",
          "names": [
            "Command"
          ],
          "level": 1
        },
        {
          "module": "registry",
          "names": [
            "CommandRegistry"
          ],
          "level": 1
        }
      ],
      "size": 12,
      "docstring": null
    },
    {
      "path": "ai_whisperer/commands/session.py",
      "classes": [
        {
          "name": "SessionSwitchAgentCommand",
          "line": 4,
          "methods": [
            "run"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [
        "json"
      ],
      "from_imports": [
        {
          "module": "base",
          "names": [
            "Command"
          ],
          "level": 1
        },
        {
          "module": "registry",
          "names": [
            "CommandRegistry"
          ],
          "level": 1
        },
        {
          "module": "interactive_server.main",
          "names": [
            "session_manager"
          ],
          "level": 0
        }
      ],
      "size": 22,
      "docstring": null
    },
    {
      "path": "ai_whisperer/commands/help.py",
      "classes": [
        {
          "name": "HelpCommand",
          "line": 5,
          "methods": [
            "run"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "base",
          "names": [
            "Command"
          ],
          "level": 1
        },
        {
          "module": "registry",
          "names": [
            "CommandRegistry"
          ],
          "level": 1
        },
        {
          "module": "errors",
          "names": [
            "CommandError"
          ],
          "level": 1
        }
      ],
      "size": 27,
      "docstring": null
    },
    {
      "path": "ai_whisperer/commands/base.py",
      "classes": [
        {
          "name": "Command",
          "line": 5,
          "methods": [
            "run",
            "parse_args"
          ],
          "docstring": "Abstract base class for all commands."
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "abc",
          "names": [
            "ABC",
            "abstractmethod"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict"
          ],
          "level": 0
        },
        {
          "module": "args",
          "names": [
            "parse_args"
          ],
          "level": 1
        }
      ],
      "size": 28,
      "docstring": null
    },
    {
      "path": "ai_whisperer/commands/debbie.py",
      "classes": [
        {
          "name": "DebbieCommand",
          "line": 13,
          "methods": [
            "run",
            "_get_observer",
            "_status_command",
            "_analyze_command",
            "_suggest_command",
            "_report_command"
          ],
          "docstring": "Debbie debugging command with subcommands for session monitoring.\n\nUsage:\n    /debbie status [session_id] - Show current session health\n    /debbie analyze [session_id] [time_range] - Deep analysis of recent activity  \n    /debbie suggest [session_id] - Get recommendations for current session\n    /debbie report [session_id] - Generate comprehensive session report"
        }
      ],
      "functions": [],
      "imports": [
        "json"
      ],
      "from_imports": [
        {
          "module": "base",
          "names": [
            "Command"
          ],
          "level": 1
        },
        {
          "module": "registry",
          "names": [
            "CommandRegistry"
          ],
          "level": 1
        },
        {
          "module": "errors",
          "names": [
            "CommandError"
          ],
          "level": 1
        },
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "interactive_server.debbie_observer",
          "names": [
            "PatternType"
          ],
          "level": 0
        },
        {
          "module": "interactive_server.debbie_observer",
          "names": [
            "get_observer"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.session_analysis_tool",
          "names": [
            "SessionAnalysisTool"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "level": 0
        }
      ],
      "size": 386,
      "docstring": "Debbie debugging commands for interactive session monitoring and analysis."
    },
    {
      "path": "ai_whisperer/commands/status.py",
      "classes": [
        {
          "name": "StatusCommand",
          "line": 8,
          "methods": [
            "run"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [
        "time"
      ],
      "from_imports": [
        {
          "module": "base",
          "names": [
            "Command"
          ],
          "level": 1
        },
        {
          "module": "registry",
          "names": [
            "CommandRegistry"
          ],
          "level": 1
        },
        {
          "module": "ai_whisperer.version",
          "names": [
            "__version__"
          ],
          "level": 0
        }
      ],
      "size": 20,
      "docstring": null
    },
    {
      "path": "ai_whisperer/commands/registry.py",
      "classes": [
        {
          "name": "CommandRegistry",
          "line": 4,
          "methods": [
            "register",
            "get",
            "all"
          ],
          "docstring": "Registry for all available commands."
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Type"
          ],
          "level": 0
        },
        {
          "module": "base",
          "names": [
            "Command"
          ],
          "level": 1
        }
      ],
      "size": 23,
      "docstring": null
    },
    {
      "path": "ai_whisperer/commands/agent.py",
      "classes": [
        {
          "name": "AgentInspectCommand",
          "line": 26,
          "methods": [
            "run"
          ],
          "docstring": null
        }
      ],
      "functions": [
        {
          "name": "inspect_agent_context",
          "line": 7,
          "args": [
            "agent_id",
            "info_type",
            "context_manager",
            "session_id"
          ],
          "docstring": "Inspect agent info (context, state, etc.) for debugging. Synchronous version for command system."
        },
        {
          "name": "get_context_manager_for_agent",
          "line": 53,
          "args": [
            "agent_id",
            "session_id"
          ],
          "docstring": null
        }
      ],
      "imports": [
        "logging",
        "json"
      ],
      "from_imports": [
        {
          "module": "base",
          "names": [
            "Command"
          ],
          "level": 1
        },
        {
          "module": "registry",
          "names": [
            "CommandRegistry"
          ],
          "level": 1
        },
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict"
          ],
          "level": 0
        },
        {
          "module": "interactive_server.main",
          "names": [
            "session_manager"
          ],
          "level": 0
        }
      ],
      "size": 73,
      "docstring": null
    },
    {
      "path": "ai_whisperer/commands/args.py",
      "classes": [],
      "functions": [
        {
          "name": "parse_args",
          "line": 4,
          "args": [
            "argstr"
          ],
          "docstring": "Parse a command argument string into positional args and options.\nSupports --key=value, --flag, and positional args.\nReturns a dict with 'args' (list) and 'options' (dict)."
        }
      ],
      "imports": [
        "shlex"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any"
          ],
          "level": 0
        }
      ],
      "size": 22,
      "docstring": null
    },
    {
      "path": "ai_whisperer/commands/errors.py",
      "classes": [
        {
          "name": "CommandError",
          "line": 1,
          "methods": [],
          "docstring": "Custom exception for command errors (invalid arguments, unknown command, etc.)"
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [],
      "size": 3,
      "docstring": null
    },
    {
      "path": "ai_whisperer/agents/task_decomposer.py",
      "classes": [
        {
          "name": "TaskDecomposer",
          "line": 17,
          "methods": [
            "_get_task_dependencies",
            "_topological_sort",
            "__init__",
            "decompose_plan",
            "_validate_plan",
            "_generate_task_title",
            "_decompose_single_task",
            "_detect_technology_stack",
            "_build_task_context",
            "_generate_acceptance_criteria",
            "_estimate_complexity",
            "_create_execution_strategy",
            "_generate_task_title",
            "_generate_external_agent_prompts",
            "_get_task_attributes",
            "generate_claude_code_prompt",
            "generate_roocode_prompt",
            "generate_github_copilot_prompt",
            "resolve_dependencies",
            "_detect_cycles",
            "_validate_dependencies",
            "validate_dependencies",
            "assess_agent_suitability"
          ],
          "docstring": "Decomposes plans into executable tasks for external agents."
        }
      ],
      "functions": [],
      "imports": [
        "re",
        "uuid",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "List",
            "Dict",
            "Any",
            "Set",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "level": 0
        },
        {
          "module": "decomposed_task",
          "names": [
            "DecomposedTask"
          ],
          "level": 1
        },
        {
          "module": "agent_e_exceptions",
          "names": [
            "InvalidPlanError",
            "DependencyCycleError",
            "TaskDecompositionError"
          ],
          "level": 1
        }
      ],
      "size": 814,
      "docstring": "Task Decomposer for Agent E.\nBreaks down Agent P plans into executable tasks for external agents."
    },
    {
      "path": "ai_whisperer/agents/agent_communication.py",
      "classes": [
        {
          "name": "MessageType",
          "line": 12,
          "methods": [],
          "docstring": "Types of messages agents can exchange."
        },
        {
          "name": "AgentMessage",
          "line": 23,
          "methods": [
            "to_dict",
            "from_dict"
          ],
          "docstring": "Base message structure for agent communication."
        },
        {
          "name": "ClarificationRequest",
          "line": 60,
          "methods": [
            "to_message"
          ],
          "docstring": "Request for clarification on a specific aspect of a task."
        },
        {
          "name": "ClarificationResponse",
          "line": 86,
          "methods": [
            "to_message"
          ],
          "docstring": "Response to a clarification request."
        },
        {
          "name": "PlanRefinementRequest",
          "line": 110,
          "methods": [
            "to_message"
          ],
          "docstring": "Request to refine part of a plan based on decomposition insights."
        },
        {
          "name": "PlanRefinementResponse",
          "line": 136,
          "methods": [
            "to_message"
          ],
          "docstring": "Response to plan refinement request."
        }
      ],
      "functions": [],
      "imports": [
        "uuid"
      ],
      "from_imports": [
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timezone"
          ],
          "level": 0
        }
      ],
      "size": 156,
      "docstring": "Agent Communication Protocol for inter-agent messaging.\nDefines message types and data structures for Agent E <-> Agent P communication."
    },
    {
      "path": "ai_whisperer/agents/debbie_tools.py",
      "classes": [],
      "functions": [
        {
          "name": "get_debbie_tools",
          "line": 17,
          "args": [],
          "docstring": "Get all of Debbie's debugging tools"
        },
        {
          "name": "register_debbie_tools",
          "line": 26,
          "args": [],
          "docstring": "Register Debbie's tools with the tool registry"
        },
        {
          "name": "unregister_debbie_tools",
          "line": 35,
          "args": [],
          "docstring": "Unregister Debbie's tools from the tool registry"
        }
      ],
      "imports": [
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "List"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.session_health_tool",
          "names": [
            "SessionHealthTool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.session_analysis_tool",
          "names": [
            "SessionAnalysisTool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.monitoring_control_tool",
          "names": [
            "MonitoringControlTool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.tool_registry",
          "names": [
            "get_tool_registry"
          ],
          "level": 0
        }
      ],
      "size": 41,
      "docstring": "Tool registration for Debbie the Debugger.\nRegisters Debbie's specialized debugging tools when she's the active agent."
    },
    {
      "path": "ai_whisperer/agents/mailbox.py",
      "classes": [
        {
          "name": "MessagePriority",
          "line": 16,
          "methods": [],
          "docstring": "Message priority levels."
        },
        {
          "name": "MessageStatus",
          "line": 24,
          "methods": [],
          "docstring": "Message delivery status."
        },
        {
          "name": "Mail",
          "line": 33,
          "methods": [
            "to_dict",
            "from_dict"
          ],
          "docstring": "A mail message in the system."
        },
        {
          "name": "MailboxSystem",
          "line": 78,
          "methods": [
            "__init__",
            "send_mail",
            "check_mail",
            "get_all_mail",
            "has_unread_mail",
            "get_unread_count",
            "reply_to_mail",
            "archive_mail",
            "register_notification_handler",
            "get_conversation_thread"
          ],
          "docstring": "Centralized mailbox system for all agents and users."
        }
      ],
      "functions": [
        {
          "name": "get_mailbox",
          "line": 286,
          "args": [],
          "docstring": "Get the global mailbox system instance."
        },
        {
          "name": "reset_mailbox",
          "line": 294,
          "args": [],
          "docstring": "Reset the mailbox system (mainly for testing)."
        }
      ],
      "imports": [
        "uuid",
        "logging"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timezone"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Any",
            "Set"
          ],
          "level": 0
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "level": 0
        }
      ],
      "size": 297,
      "docstring": "Universal Mailbox System for Agent and User Communication.\nProvides a standardized way for agents to send and receive messages."
    },
    {
      "path": "ai_whisperer/agents/decomposed_task.py",
      "classes": [
        {
          "name": "TaskStatus",
          "line": 13,
          "methods": [],
          "docstring": "Status of a decomposed task."
        },
        {
          "name": "DecomposedTask",
          "line": 24,
          "methods": [
            "__post_init__",
            "_validate",
            "to_dict",
            "to_json",
            "from_dict",
            "from_json",
            "update_status",
            "record_execution_result",
            "add_external_agent_prompt",
            "get_dependencies"
          ],
          "docstring": "A task decomposed by Agent E for execution by external agents."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "uuid"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timezone"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Any"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field",
            "asdict"
          ],
          "level": 0
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        }
      ],
      "size": 135,
      "docstring": "DecomposedTask data model for Agent E.\nRepresents a task that has been decomposed for external agent execution."
    },
    {
      "path": "ai_whisperer/agents/context_manager.py",
      "classes": [
        {
          "name": "AgentContextManager",
          "line": 9,
          "methods": [
            "__init__",
            "_initialize_agent_context",
            "_add_workspace_structure",
            "_add_existing_schemas",
            "_add_recent_changes"
          ],
          "docstring": "Context manager specialized for agent-specific needs"
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "List",
            "Dict",
            "Any"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.context_management",
          "names": [
            "ContextManager"
          ],
          "level": 0
        },
        {
          "module": "registry",
          "names": [
            "Agent"
          ],
          "level": 1
        },
        {
          "module": "ai_whisperer.prompt_system",
          "names": [
            "PromptSystem",
            "PromptNotFoundError"
          ],
          "level": 0
        }
      ],
      "size": 62,
      "docstring": null
    },
    {
      "path": "ai_whisperer/agents/planner_handler.py",
      "classes": [
        {
          "name": "PlannerAgentHandler",
          "line": 5,
          "methods": [
            "__init__",
            "extract_requirements",
            "should_generate_plan",
            "generate_plan_preview",
            "confirm_plan",
            "generate_plan_json"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "List",
            "Dict",
            "Any"
          ],
          "level": 0
        },
        {
          "module": "registry",
          "names": [
            "Agent"
          ],
          "level": 1
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        }
      ],
      "size": 39,
      "docstring": null
    },
    {
      "path": "ai_whisperer/agents/session_manager.py",
      "classes": [
        {
          "name": "AgentSession",
          "line": 5,
          "methods": [
            "__init__",
            "switch_agent",
            "_create_handler"
          ],
          "docstring": "Manages a chat session with agent switching capabilities"
        },
        {
          "name": "DummyHandler",
          "line": 32,
          "methods": [
            "can_handoff"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Any"
          ],
          "level": 0
        },
        {
          "module": "registry",
          "names": [
            "Agent",
            "AgentRegistry"
          ],
          "level": 1
        },
        {
          "module": "base_handler",
          "names": [
            "BaseAgentHandler"
          ],
          "level": 1
        }
      ],
      "size": 37,
      "docstring": null
    },
    {
      "path": "ai_whisperer/agents/agent_e_exceptions.py",
      "classes": [
        {
          "name": "AgentEException",
          "line": 6,
          "methods": [],
          "docstring": "Base exception for Agent E errors."
        },
        {
          "name": "InvalidPlanError",
          "line": 11,
          "methods": [],
          "docstring": "Raised when a plan is invalid or missing required fields."
        },
        {
          "name": "TaskDecompositionError",
          "line": 16,
          "methods": [],
          "docstring": "Raised when task decomposition fails."
        },
        {
          "name": "DependencyCycleError",
          "line": 21,
          "methods": [],
          "docstring": "Raised when circular dependencies are detected in tasks."
        },
        {
          "name": "ExternalAgentError",
          "line": 26,
          "methods": [],
          "docstring": "Raised when external agent integration fails."
        },
        {
          "name": "CommunicationError",
          "line": 31,
          "methods": [],
          "docstring": "Raised when agent communication fails."
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [],
      "size": 33,
      "docstring": "Exception classes for Agent E functionality."
    },
    {
      "path": "ai_whisperer/agents/config.py",
      "classes": [
        {
          "name": "AgentConfigError",
          "line": 4,
          "methods": [],
          "docstring": "Raised when agent configuration is invalid."
        },
        {
          "name": "AgentConfig",
          "line": 8,
          "methods": [
            "__init__",
            "_validate",
            "to_dict",
            "from_dict"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Union"
          ],
          "level": 0
        }
      ],
      "size": 143,
      "docstring": null
    },
    {
      "path": "ai_whisperer/agents/agent_e_handler.py",
      "classes": [
        {
          "name": "AgentEHandler",
          "line": 25,
          "methods": [
            "__init__",
            "get_task_status",
            "get_message_history"
          ],
          "docstring": "Handles Agent E operations including decomposition and communication."
        }
      ],
      "functions": [],
      "imports": [
        "uuid",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timezone"
          ],
          "level": 0
        },
        {
          "module": "task_decomposer",
          "names": [
            "TaskDecomposer"
          ],
          "level": 1
        },
        {
          "module": "decomposed_task",
          "names": [
            "DecomposedTask"
          ],
          "level": 1
        },
        {
          "module": "agent_communication",
          "names": [
            "AgentMessage",
            "MessageType",
            "ClarificationRequest",
            "ClarificationResponse",
            "PlanRefinementRequest",
            "PlanRefinementResponse"
          ],
          "level": 1
        },
        {
          "module": "agent_e_exceptions",
          "names": [
            "AgentEException",
            "CommunicationError"
          ],
          "level": 1
        },
        {
          "module": "agents.mailbox",
          "names": [
            "Mail",
            "MessagePriority",
            "get_mailbox"
          ],
          "level": 2
        }
      ],
      "size": 278,
      "docstring": "Agent E Handler - manages communication and task decomposition for external agent execution."
    },
    {
      "path": "ai_whisperer/agents/prompt_optimizer.py",
      "classes": [
        {
          "name": "PromptOptimizer",
          "line": 13,
          "methods": [
            "__init__",
            "optimize_prompt",
            "_get_agent_specific_hints",
            "analyze_prompt_for_optimization"
          ],
          "docstring": "Optimizes prompts based on model capabilities for better continuation"
        }
      ],
      "functions": [
        {
          "name": "optimize_user_message",
          "line": 175,
          "args": [
            "message",
            "model_name",
            "agent_type"
          ],
          "docstring": "Convenience function to optimize a user message.\n\nArgs:\n    message: User's message\n    model_name: Target model\n    agent_type: Optional agent type\n    \nReturns:\n    Optimized message"
        }
      ],
      "imports": [
        "re"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.model_capabilities",
          "names": [
            "get_model_capabilities"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.logging_custom",
          "names": [
            "get_logger"
          ],
          "level": 0
        }
      ],
      "size": 188,
      "docstring": "Prompt optimization for model-specific continuation behavior."
    },
    {
      "path": "ai_whisperer/agents/base_handler.py",
      "classes": [
        {
          "name": "BaseAgentHandler",
          "line": 5,
          "methods": [
            "__init__",
            "can_handoff"
          ],
          "docstring": "Base class for all agent handlers"
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "abc",
          "names": [
            "ABC",
            "abstractmethod"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "registry",
          "names": [
            "Agent"
          ],
          "level": 1
        }
      ],
      "size": 18,
      "docstring": null
    },
    {
      "path": "ai_whisperer/agents/registry.py",
      "classes": [
        {
          "name": "Agent",
          "line": 6,
          "methods": [
            "shortcut"
          ],
          "docstring": "Represents a specialized AI agent with specific capabilities"
        },
        {
          "name": "AgentRegistry",
          "line": 27,
          "methods": [
            "__init__",
            "_load_default_agents",
            "get_agent",
            "list_agents"
          ],
          "docstring": "Manages available agents and their configurations"
        }
      ],
      "functions": [],
      "imports": [
        "yaml",
        "os"
      ],
      "from_imports": [
        {
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "List",
            "Dict",
            "Optional",
            "Any"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        }
      ],
      "size": 92,
      "docstring": null
    },
    {
      "path": "ai_whisperer/agents/mail_notification.py",
      "classes": [
        {
          "name": "MailNotificationMixin",
          "line": 12,
          "methods": [
            "check_for_mail_notification",
            "add_mail_notification_to_response",
            "format_mail_summary"
          ],
          "docstring": "Mixin to add mail notification capabilities to agents."
        }
      ],
      "functions": [
        {
          "name": "get_mail_notification",
          "line": 90,
          "args": [
            "agent_name"
          ],
          "docstring": "Helper function to generate mail notification string."
        },
        {
          "name": "inject_mail_notification",
          "line": 97,
          "args": [
            "agent_method"
          ],
          "docstring": "Decorator to inject mail notifications into agent responses.\n\nUsage:\n    @inject_mail_notification\n    async def process_message(self, message):\n        # ... process message ...\n        return response"
        }
      ],
      "imports": [
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "mailbox",
          "names": [
            "get_mailbox"
          ],
          "level": 1
        }
      ],
      "size": 123,
      "docstring": "Mail Notification System - Adds \"You've got mail\" notifications to agent responses."
    },
    {
      "path": "ai_whisperer/agents/agent.py",
      "classes": [
        {
          "name": "Agent",
          "line": 4,
          "methods": [
            "__init__"
          ],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "ai_whisperer.agents.config",
          "names": [
            "AgentConfig"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.context.agent_context",
          "names": [
            "AgentContext"
          ],
          "level": 0
        }
      ],
      "size": 30,
      "docstring": null
    },
    {
      "path": "ai_whisperer/agents/external_adapters.py",
      "classes": [
        {
          "name": "ExternalAgentAdapter",
          "line": 16,
          "methods": [
            "format_task",
            "parse_result",
            "get_execution_instructions",
            "validate_environment"
          ],
          "docstring": "Base class for external agent adapters."
        },
        {
          "name": "ClaudeCodeAdapter",
          "line": 66,
          "methods": [
            "format_task",
            "parse_result",
            "get_execution_instructions",
            "validate_environment"
          ],
          "docstring": "Adapter for Claude Code CLI (REPL mode)."
        },
        {
          "name": "RooCodeAdapter",
          "line": 214,
          "methods": [
            "format_task",
            "parse_result",
            "get_execution_instructions",
            "validate_environment"
          ],
          "docstring": "Adapter for RooCode in VS Code."
        },
        {
          "name": "GitHubCopilotAdapter",
          "line": 348,
          "methods": [
            "format_task",
            "parse_result",
            "get_execution_instructions",
            "validate_environment"
          ],
          "docstring": "Adapter for GitHub Copilot in agent mode."
        },
        {
          "name": "AdapterRegistry",
          "line": 497,
          "methods": [
            "__init__",
            "_register_defaults",
            "cleanup_all",
            "register",
            "get_adapter",
            "list_adapters",
            "validate_all",
            "recommend_adapters",
            "_score_adapter_for_task"
          ],
          "docstring": "Registry for external agent adapters."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "os",
        "subprocess",
        "subprocess"
      ],
      "from_imports": [
        {
          "module": "abc",
          "names": [
            "ABC",
            "abstractmethod"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "decomposed_task",
          "names": [
            "DecomposedTask"
          ],
          "level": 1
        },
        {
          "module": "agent_e_exceptions",
          "names": [
            "ExternalAgentError"
          ],
          "level": 1
        },
        {
          "module": "external_agent_result",
          "names": [
            "ExternalAgentResult"
          ],
          "level": 1
        },
        {
          "module": "task_decomposer",
          "names": [
            "TaskDecomposer"
          ],
          "level": 1
        }
      ],
      "size": 628,
      "docstring": "External Agent Adapters for Agent E.\nProvides adapters to format tasks for different external AI coding assistants."
    },
    {
      "path": "ai_whisperer/agents/planner_tools.py",
      "classes": [],
      "functions": [
        {
          "name": "analyze_workspace",
          "line": 5,
          "args": [
            "workspace_path"
          ],
          "docstring": "Return a flat list of files and folders in the workspace."
        },
        {
          "name": "read_schema_files",
          "line": 18,
          "args": [
            "schema_dir"
          ],
          "docstring": "Read all JSON schema files in a directory."
        },
        {
          "name": "validate_plan",
          "line": 27,
          "args": [
            "plan",
            "schema"
          ],
          "docstring": "Validate a plan dict against a JSON schema (very basic)."
        }
      ],
      "imports": [
        "os",
        "json"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any"
          ],
          "level": 0
        }
      ],
      "size": 34,
      "docstring": null
    },
    {
      "path": "ai_whisperer/agents/external_agent_result.py",
      "classes": [
        {
          "name": "ExternalAgentResult",
          "line": 8,
          "methods": [
            "__init__",
            "to_dict",
            "from_dict"
          ],
          "docstring": "Result from external agent execution."
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "level": 0
        }
      ],
      "size": 48,
      "docstring": "External Agent Result class.\nRepresents the result of executing a task with an external agent."
    },
    {
      "path": "ai_whisperer/agents/continuation_strategy.py",
      "classes": [
        {
          "name": "ContinuationProgress",
          "line": 13,
          "methods": [
            "to_dict"
          ],
          "docstring": "Tracks progress information for continuation operations."
        },
        {
          "name": "ContinuationState",
          "line": 33,
          "methods": [
            "from_dict"
          ],
          "docstring": "Represents the continuation state from an AI response."
        },
        {
          "name": "ContinuationStrategy",
          "line": 62,
          "methods": [
            "__init__",
            "reset",
            "should_continue",
            "extract_continuation_state",
            "extract_next_action",
            "update_context",
            "get_progress",
            "get_continuation_message",
            "_check_safety_limits",
            "_summarize_response",
            "get_iteration_count",
            "get_elapsed_time",
            "get_history"
          ],
          "docstring": "Manages continuation detection and execution for agents."
        }
      ],
      "functions": [],
      "imports": [
        "re",
        "time",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Optional",
            "Dict",
            "Any",
            "List"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "level": 0
        }
      ],
      "size": 267,
      "docstring": "Continuation strategy module for managing multi-step agent operations."
    },
    {
      "path": "ai_whisperer/agents/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "registry",
          "names": [
            "Agent",
            "AgentRegistry"
          ],
          "level": 1
        },
        {
          "module": "stateless_agent",
          "names": [
            "StatelessAgent"
          ],
          "level": 1
        },
        {
          "module": "config",
          "names": [
            "AgentConfig"
          ],
          "level": 1
        },
        {
          "module": "factory",
          "names": [
            "AgentFactory"
          ],
          "level": 1
        }
      ],
      "size": 7,
      "docstring": null
    },
    {
      "path": "ai_whisperer/agents/mailbox_tools.py",
      "classes": [],
      "functions": [
        {
          "name": "get_mailbox_tools",
          "line": 17,
          "args": [],
          "docstring": "Get all mailbox communication tools"
        },
        {
          "name": "register_mailbox_tools",
          "line": 26,
          "args": [],
          "docstring": "Register mailbox tools with the tool registry"
        },
        {
          "name": "is_mailbox_tool",
          "line": 35,
          "args": [
            "tool_name"
          ],
          "docstring": "Check if a tool name is a mailbox tool"
        }
      ],
      "imports": [
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "List"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.base_tool",
          "names": [
            "AITool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.send_mail_tool",
          "names": [
            "SendMailTool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.check_mail_tool",
          "names": [
            "CheckMailTool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.reply_mail_tool",
          "names": [
            "ReplyMailTool"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.tool_registry",
          "names": [
            "get_tool_registry"
          ],
          "level": 0
        }
      ],
      "size": 38,
      "docstring": "Tool registration for Mailbox system.\nRegisters mailbox tools that all agents can use for communication."
    },
    {
      "path": "ai_whisperer/agents/stateless_agent.py",
      "classes": [
        {
          "name": "StatelessAgent",
          "line": 17,
          "methods": [
            "__init__",
            "get_context_messages",
            "clear_context",
            "agent_id",
            "system_prompt",
            "_get_agent_tools",
            "should_continue_after_tools",
            "get_continuation_message",
            "__repr__"
          ],
          "docstring": "A stateless agent that processes messages without session management.\nEach message is processed independently through the AI loop."
        }
      ],
      "functions": [],
      "imports": [
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "Optional",
            "Callable",
            "List"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.agents.config",
          "names": [
            "AgentConfig"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.context.agent_context",
          "names": [
            "AgentContext"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_loop.stateless_ai_loop",
          "names": [
            "StatelessAILoop"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.agents.continuation_strategy",
          "names": [
            "ContinuationStrategy"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.tool_registry",
          "names": [
            "get_tool_registry"
          ],
          "level": 0
        }
      ],
      "size": 242,
      "docstring": "Stateless Agent implementation that works with the new stateless AILoop.\nThis agent doesn't manage sessions or use delegates - it simply processes\nmessages through the AI loop and returns results directly."
    },
    {
      "path": "ai_whisperer/agents/factory.py",
      "classes": [
        {
          "name": "AgentFactory",
          "line": 6,
          "methods": [
            "create_agent",
            "_dict_to_config",
            "_validate_config",
            "register_template",
            "create_agent_from_template",
            "register_preset",
            "create_agent_from_preset"
          ],
          "docstring": null
        },
        {
          "name": "DummyAILoop",
          "line": 22,
          "methods": [],
          "docstring": null
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "Optional",
            "Type",
            "Union"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.agents.agent",
          "names": [
            "Agent"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.agents.config",
          "names": [
            "AgentConfig"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.context.agent_context",
          "names": [
            "AgentContext"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.context.agent_context",
          "names": [
            "AgentContext"
          ],
          "level": 0
        }
      ],
      "size": 97,
      "docstring": null
    },
    {
      "path": "ai_whisperer/logging/log_aggregator.py",
      "classes": [
        {
          "name": "CorrelationGroup",
          "line": 20,
          "methods": [
            "add_entry",
            "get_timeline"
          ],
          "docstring": "Group of correlated log entries"
        },
        {
          "name": "Timeline",
          "line": 38,
          "methods": [
            "add_event",
            "_parse_timestamp",
            "get_duration",
            "to_dict"
          ],
          "docstring": "Timeline of events for visualization"
        },
        {
          "name": "TimelineBuilder",
          "line": 80,
          "methods": [
            "__init__",
            "add_event",
            "build_for_session",
            "get_all_timelines"
          ],
          "docstring": "Builds timelines from log events"
        },
        {
          "name": "LogAggregator",
          "line": 109,
          "methods": [
            "__init__",
            "add_log",
            "get_logs",
            "get_correlated_logs",
            "get_session_timeline",
            "search_logs",
            "get_statistics",
            "clear_session",
            "shutdown",
            "_cleanup_loop",
            "_cleanup_expired_correlations",
            "_is_in_time_range",
            "_matches_query"
          ],
          "docstring": "Aggregates logs from multiple sources with correlation"
        }
      ],
      "functions": [],
      "imports": [
        "time",
        "threading",
        "uuid"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Set",
            "Tuple",
            "Union"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "level": 0
        },
        {
          "module": "collections",
          "names": [
            "defaultdict",
            "deque"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "level": 0
        },
        {
          "module": "logging_custom",
          "names": [
            "EnhancedLogMessage",
            "LogSource"
          ],
          "level": 2
        }
      ],
      "size": 353,
      "docstring": "Log aggregator for multi-source log management and correlation."
    },
    {
      "path": "ai_whisperer/logging/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "debbie_logger",
          "names": [
            "DebbieLogger",
            "DebbieCommentary"
          ],
          "level": 1
        },
        {
          "module": "log_aggregator",
          "names": [
            "LogAggregator"
          ],
          "level": 1
        }
      ],
      "size": 13,
      "docstring": "Enhanced logging infrastructure for Debbie the Debugger.\nProvides multi-source logging, commentary, and analysis capabilities."
    },
    {
      "path": "ai_whisperer/logging/debbie_logger.py",
      "classes": [
        {
          "name": "PatternType",
          "line": 18,
          "methods": [],
          "docstring": "Types of patterns Debbie can detect"
        },
        {
          "name": "DetectedPattern",
          "line": 30,
          "methods": [
            "to_dict"
          ],
          "docstring": "A pattern detected in the logs"
        },
        {
          "name": "Insight",
          "line": 49,
          "methods": [
            "to_dict"
          ],
          "docstring": "An insight generated by Debbie"
        },
        {
          "name": "PatternDetector",
          "line": 67,
          "methods": [
            "__init__",
            "_initialize_rules",
            "analyze",
            "_detect_continuation_stall",
            "_detect_tool_loop",
            "_detect_error_pattern",
            "_detect_performance_degradation",
            "_detect_memory_spike",
            "_detect_websocket_delay",
            "_similarity_score"
          ],
          "docstring": "Detects patterns in log streams"
        },
        {
          "name": "InsightGenerator",
          "line": 228,
          "methods": [
            "generate",
            "_insight_continuation_stall",
            "_insight_tool_loop",
            "_insight_error_pattern",
            "_insight_performance_degradation",
            "_insight_memory_spike",
            "_insight_websocket_delay"
          ],
          "docstring": "Generates actionable insights from detected patterns"
        },
        {
          "name": "DebbieCommentary",
          "line": 354,
          "methods": [
            "__init__",
            "observe",
            "explain_stall",
            "explain_intervention",
            "_log_commentary"
          ],
          "docstring": "Debbie's intelligent commentary system"
        },
        {
          "name": "DebbieLogger",
          "line": 425,
          "methods": [
            "__init__",
            "log",
            "comment",
            "debug",
            "info",
            "warning",
            "error",
            "critical"
          ],
          "docstring": "Enhanced logger with Debbie's commentary capabilities"
        }
      ],
      "functions": [],
      "imports": [
        "logging",
        "time",
        "re"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "List",
            "Optional",
            "Callable"
          ],
          "level": 0
        },
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "enum",
          "names": [
            "Enum"
          ],
          "level": 0
        },
        {
          "module": "logging_custom",
          "names": [
            "EnhancedLogMessage",
            "LogLevel",
            "LogSource",
            "ComponentType"
          ],
          "level": 2
        }
      ],
      "size": 479,
      "docstring": "Debbie's enhanced logger with intelligent commentary and pattern detection."
    },
    {
      "path": "ai_whisperer/context/context_manager.py",
      "classes": [
        {
          "name": "AgentContextManager",
          "line": 14,
          "methods": [
            "__init__",
            "add_file_reference",
            "parse_file_references",
            "process_message_references",
            "get_agent_context",
            "refresh_stale_items",
            "remove_item",
            "get_context_summary",
            "clear_agent_context",
            "_cleanup_old_items",
            "_count_by_type"
          ],
          "docstring": "Manages context items for agents in a session.\n\nThis tracks what files and content each agent is aware of,\nmanages freshness, and provides context history."
        }
      ],
      "functions": [],
      "imports": [
        "logging",
        "re"
      ],
      "from_imports": [
        {
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "level": 0
        },
        {
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Tuple"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.context.context_item",
          "names": [
            "ContextItem"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.path_management",
          "names": [
            "PathManager"
          ],
          "level": 0
        }
      ],
      "size": 378,
      "docstring": "Context manager for tracking agent context items."
    },
    {
      "path": "ai_whisperer/context/provider.py",
      "classes": [
        {
          "name": "ContextProvider",
          "line": 3,
          "methods": [
            "store_message",
            "retrieve_messages",
            "set_metadata",
            "get_metadata"
          ],
          "docstring": "Abstract interface for unified context management.\nProvides message storage/retrieval and context metadata operations."
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "abc",
          "names": [
            "ABC",
            "abstractmethod"
          ],
          "level": 0
        }
      ],
      "size": 39,
      "docstring": null
    },
    {
      "path": "ai_whisperer/context/agent_context.py",
      "classes": [
        {
          "name": "AgentContext",
          "line": 9,
          "methods": [
            "__init__",
            "store_message",
            "retrieve_messages",
            "set_metadata",
            "get_metadata",
            "get_messages_by_role",
            "get_system_prompt",
            "set_system_prompt",
            "get_conversation_history",
            "set",
            "get",
            "keys",
            "to_dict",
            "from_dict",
            "save_to_file",
            "load_from_file"
          ],
          "docstring": "Concrete implementation of ContextProvider for agent-specific context management.\nHandles messages, system prompt, conversation history, and agent metadata."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "ai_whisperer.context.provider",
          "names": [
            "ContextProvider"
          ],
          "level": 0
        }
      ],
      "size": 142,
      "docstring": null
    },
    {
      "path": "ai_whisperer/context/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "context_item",
          "names": [
            "ContextItem"
          ],
          "level": 1
        },
        {
          "module": "context_manager",
          "names": [
            "AgentContextManager"
          ],
          "level": 1
        }
      ],
      "size": 5,
      "docstring": "Context tracking for agent file awareness."
    },
    {
      "path": "ai_whisperer/context/context_item.py",
      "classes": [
        {
          "name": "ContextItem",
          "line": 10,
          "methods": [
            "calculate_hash",
            "is_stale",
            "get_age_seconds",
            "to_dict",
            "from_dict"
          ],
          "docstring": "Represents a single item in agent context.\n\nThis tracks files, file sections, or other content that an agent\nis aware of during a conversation."
        }
      ],
      "functions": [],
      "imports": [
        "hashlib",
        "uuid"
      ],
      "from_imports": [
        {
          "module": "dataclasses",
          "names": [
            "dataclass",
            "field"
          ],
          "level": 0
        },
        {
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "level": 0
        },
        {
          "module": "typing",
          "names": [
            "Optional",
            "Literal",
            "Dict",
            "Any",
            "Tuple"
          ],
          "level": 0
        }
      ],
      "size": 89,
      "docstring": "Context item model for tracking files and content in agent context."
    },
    {
      "path": "ai_whisperer/ai_loop/tool_call_accumulator.py",
      "classes": [
        {
          "name": "ToolCallAccumulator",
          "line": 12,
          "methods": [
            "__init__",
            "add_chunk",
            "get_tool_calls",
            "get_tool_call_objects"
          ],
          "docstring": "Accumulates streaming tool call chunks into complete tool calls.\n\nNote: Unlike StreamAccumulator in ai_service.tool_calling which returns ToolCall objects,\nthis accumulator returns raw dictionaries for compatibility with stateless_ai_loop.\nUse get_tool_call_objects() if you need ToolCall objects instead."
        }
      ],
      "functions": [],
      "imports": [
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_service.tool_calling",
          "names": [
            "ToolCall"
          ],
          "level": 0
        }
      ],
      "size": 68,
      "docstring": "Tool call accumulator for properly handling streaming tool calls."
    },
    {
      "path": "ai_whisperer/ai_loop/ai_loopy.py",
      "classes": [
        {
          "name": "SessionState",
          "line": 16,
          "methods": [],
          "docstring": null
        },
        {
          "name": "AILoop",
          "line": 23,
          "methods": [
            "__init__",
            "is_waiting_for_input"
          ],
          "docstring": "The core AI Loop orchestrates the interaction between the AI service,\ncontext management, and tool execution. It manages the session state,\nprocesses user messages and tool results, and handles AI responses,\nincluding streaming and tool calls.\n\nThe AILoop emits the following delegate notifications:\n\n- ai_loop.session_started: Emitted when a new AI session begins.\n  event_data: None\n\n- ai_loop.session_ended: Emitted when an AI session concludes.\n  event_data: A string indicating the reason for termination (e.g., \"stopped\", \"error\", \"unknown\").\n\n- ai_loop.message.user_processed: Emitted when a user message is processed by the loop.\n  event_data: The user message string.\n\n- ai_loop.message.ai_chunk_received: Emitted for each chunk of content received during AI streaming.\n  event_data: The string content of the AI chunk.\n\n- ai_loop.tool_call.identified: Emitted when the AI response includes tool calls.\n  event_data: A list of tool names identified in the AI response.\n\n- ai_loop.tool_call.result_processed: Emitted when the result of a tool call is processed and added to context.\n  event_data: The tool result message dictionary (e.g., {\"role\": \"tool\", \"tool_call_id\": \"...\", \"name\": \"...\", \"content\": \"...\"}).\n\n- ai_loop.status.paused: Emitted when the AI loop session is paused.\n  event_data: None\n\n- ai_loop.status.resumed: Emitted when the AI loop session is resumed.\n  event_data: None\n\n- ai_loop.error: Emitted when an unhandled exception occurs within the AI loop.\n  event_data: The exception object."
        }
      ],
      "functions": [],
      "imports": [
        "asyncio",
        "json",
        "logging",
        "enum",
        "types",
        "types",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "AsyncIterator"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.context_management",
          "names": [
            "ContextManager"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_service.ai_service",
          "names": [
            "AIService"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_loop.ai_config",
          "names": [
            "AIConfig"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.tool_registry",
          "names": [
            "get_tool_registry"
          ],
          "level": 0
        }
      ],
      "size": 667,
      "docstring": null
    },
    {
      "path": "ai_whisperer/ai_loop/stateless_ai_loop.py",
      "classes": [
        {
          "name": "StatelessAILoop",
          "line": 21,
          "methods": [
            "__init__",
            "_determine_tool_strategy"
          ],
          "docstring": "A stateless version of AILoop that processes messages directly without\nmaintaining session state or using delegates."
        }
      ],
      "functions": [],
      "imports": [
        "asyncio",
        "json",
        "logging"
      ],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional",
            "Callable",
            "AsyncIterator"
          ],
          "level": 0
        },
        {
          "module": "types",
          "names": [
            "SimpleNamespace"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_loop.ai_config",
          "names": [
            "AIConfig"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_service.ai_service",
          "names": [
            "AIService"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.context.provider",
          "names": [
            "ContextProvider"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.tools.tool_registry",
          "names": [
            "get_tool_registry"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.ai_loop.tool_call_accumulator",
          "names": [
            "ToolCallAccumulator"
          ],
          "level": 0
        },
        {
          "module": "ai_whisperer.model_capabilities",
          "names": [
            "get_model_capabilities"
          ],
          "level": 0
        }
      ],
      "size": 569,
      "docstring": "Stateless AILoop implementation that works without delegates.\nThis provides a cleaner interface for direct usage without the complexity\nof delegate management and event notifications."
    },
    {
      "path": "ai_whisperer/ai_loop/ai_config.py",
      "classes": [
        {
          "name": "AIConfig",
          "line": 3,
          "methods": [
            "__init__",
            "__repr__"
          ],
          "docstring": "Configuration for the AILoop."
        }
      ],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional"
          ],
          "level": 0
        }
      ],
      "size": 26,
      "docstring": null
    },
    {
      "path": "ai_whisperer/ai_loop/__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "from_imports": [
        {
          "module": "ai_config",
          "names": [
            "AIConfig"
          ],
          "level": 1
        },
        {
          "module": "stateless_ai_loop",
          "names": [
            "StatelessAILoop"
          ],
          "level": 1
        }
      ],
      "size": 6,
      "docstring": null
    }
  ],
  "summary": {
    "total_files": 139,
    "total_classes": 228,
    "total_functions": 79,
    "total_lines": 32732
  }
}