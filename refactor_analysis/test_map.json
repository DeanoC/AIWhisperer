{
  "tests": [
    {
      "path": "tests/test_processing.py",
      "test_classes": [],
      "test_functions": [
        "test_read_markdown_success",
        "test_read_markdown_file_not_found",
        "test_read_markdown_empty_file",
        "test_read_markdown_encoding_error",
        "test_save_json_success",
        "test_save_json_empty_dict",
        "test_save_json_overwrite",
        "test_format_prompt_basic",
        "test_format_prompt_missing_vars_in_template",
        "test_format_prompt_no_vars_in_template",
        "test_process_response_valid_json",
        "test_process_response_nested_json",
        "test_process_response_empty_string",
        "test_process_response_invalid_json",
        "test_process_response_non_json_string"
      ],
      "imports": [
        "pytest",
        "json",
        "ai_whisperer.exceptions",
        "ai_whisperer.processing"
      ],
      "tested_modules": [
        "ai_whisperer.processing",
        "ai_whisperer.exceptions"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 153,
      "markers": [],
      "test_type": "other"
    },
    {
      "path": "tests/test_config.py",
      "test_classes": [],
      "test_functions": [
        "test_load_config_success_new_prompts",
        "test_load_config_success_empty_task_prompts",
        "test_load_config_file_not_found",
        "test_load_config_invalid_yaml",
        "test_load_config_missing_required_env_var_api_key",
        "test_load_config_empty_file",
        "test_load_config_not_a_dictionary",
        "test_load_config_optional_keys_openrouter",
        "test_load_config_optional_key_output_dir",
        "test_load_config_missing_task_model_config",
        "test_load_config_invalid_task_model_settings_type",
        "test_load_config_missing_openrouter_model"
      ],
      "imports": [
        "pytest",
        "json",
        "yaml",
        "os",
        "tempfile",
        "ai_whisperer.config",
        "ai_whisperer.exceptions",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.config",
        "ai_whisperer.path_management",
        "ai_whisperer.exceptions"
      ],
      "fixtures_used": [
        "tmp_path",
        "monkeypatch",
        "create_test_files"
      ],
      "size": 320,
      "markers": [
        "xfail"
      ],
      "test_type": "other"
    },
    {
      "path": "tests/test_utils.py",
      "test_classes": [],
      "test_functions": [
        "test_setup_logging_runs_without_error"
      ],
      "imports": [
        "pytest",
        "logging",
        "ai_whisperer.utils"
      ],
      "tested_modules": [
        "ai_whisperer.utils"
      ],
      "fixtures_used": [],
      "size": 16,
      "markers": [],
      "test_type": "other"
    },
    {
      "path": "tests/test_openrouter_api.py",
      "test_classes": [],
      "test_functions": [
        "test_openrouter_api_init_success",
        "test_openrouter_api_init_config_error",
        "test_chat_completion_success",
        "test_chat_completion_auth_error",
        "test_chat_completion_rate_limit_error",
        "test_chat_completion_not_found_error",
        "test_chat_completion_server_error",
        "test_chat_completion_connection_error",
        "test_chat_completion_timeout_error",
        "test_chat_completion_unexpected_response_format_no_choices",
        "test_chat_completion_unexpected_response_format_empty_choices",
        "test_chat_completion_unexpected_response_format_no_message",
        "test_chat_completion_unexpected_response_format_no_content",
        "test_list_models_success",
        "test_list_models_auth_error",
        "test_list_models_rate_limit_error",
        "test_list_models_server_error",
        "test_list_models_connection_error",
        "test_list_models_invalid_json",
        "test_list_models_empty_data",
        "test_call_openrouter_success_refactored"
      ],
      "imports": [
        "pytest",
        "requests",
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.exceptions",
        "ai_whisperer.ai_service.openrouter_ai_service"
      ],
      "tested_modules": [
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.ai_service.openrouter_ai_service",
        "ai_whisperer.exceptions"
      ],
      "fixtures_used": [
        "mock_requests"
      ],
      "size": 383,
      "markers": [],
      "test_type": "other"
    },
    {
      "path": "tests/test_debbie_scenarios.py",
      "test_classes": [
        {
          "name": "TestScenarios",
          "methods": [],
          "count": 0
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "json",
        "time",
        "pytest",
        "sys",
        "os",
        "ai_whisperer.batch.debbie_integration",
        "ai_whisperer.batch.monitoring",
        "ai_whisperer.batch.websocket_interceptor",
        "ai_whisperer.logging_custom"
      ],
      "tested_modules": [
        "ai_whisperer.batch.debbie_integration",
        "ai_whisperer.batch.websocket_interceptor",
        "ai_whisperer.batch.monitoring",
        "ai_whisperer.logging_custom"
      ],
      "fixtures_used": [
        "setup_debbie"
      ],
      "size": 409,
      "markers": [
        "asyncio"
      ],
      "test_type": "performance"
    },
    {
      "path": "ai_whisperer/commands/test_commands.py",
      "test_classes": [
        {
          "name": "TestCommands",
          "methods": [
            "test_echo",
            "test_status"
          ],
          "count": 2
        }
      ],
      "test_functions": [],
      "imports": [
        "unittest",
        "ai_whisperer.commands.echo",
        "ai_whisperer.commands.status"
      ],
      "tested_modules": [
        "ai_whisperer.commands.status",
        "ai_whisperer.commands.echo"
      ],
      "fixtures_used": [],
      "size": 19,
      "markers": [],
      "test_type": "other"
    },
    {
      "path": "tests/unit/test_postprocessing_backticks.py",
      "test_classes": [],
      "test_functions": [
        "test_clean_backtick_wrapper",
        "test_clean_backtick_wrapper_with_dictionary_input",
        "test_clean_backtick_wrapper_with_real_world_example"
      ],
      "imports": [
        "pytest",
        "os"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "expected_json"
      ],
      "size": 138,
      "markers": [
        "parametrize"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_minimal_schema_validation.py",
      "test_classes": [],
      "test_functions": [
        "test_minimal_required_field"
      ],
      "imports": [
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 22,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_format_json.py",
      "test_classes": [
        {
          "name": "TestFormatJson",
          "methods": [
            "test_format_valid_json_string",
            "test_format_already_formatted_json_string",
            "test_format_json_string_with_unicode",
            "test_input_is_dictionary",
            "test_invalid_json_string",
            "test_empty_json_string",
            "test_empty_json_array_string",
            "test_data_dict_initialization"
          ],
          "count": 8
        }
      ],
      "test_functions": [],
      "imports": [
        "unittest",
        "json"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 127,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_error_handling_ast_validation.py",
      "test_classes": [
        {
          "name": "TestSyntaxErrors",
          "methods": [
            "test_basic_syntax_error",
            "test_indentation_error",
            "test_mixed_tabs_spaces_error",
            "test_unicode_syntax_error",
            "test_incomplete_string_literal",
            "test_invalid_escape_sequence"
          ],
          "count": 6
        },
        {
          "name": "TestStructuralValidationErrors",
          "methods": [
            "test_malformed_ast_structure",
            "test_circular_reference_in_ast",
            "test_unsupported_ast_node_type",
            "test_ast_node_missing_required_fields"
          ],
          "count": 4
        },
        {
          "name": "TestJSONSerializationErrors",
          "methods": [
            "test_non_serializable_ast_data",
            "test_extremely_deep_nesting_json",
            "test_invalid_unicode_in_json"
          ],
          "count": 3
        },
        {
          "name": "TestValidationRuleErrors",
          "methods": [
            "test_python_version_compatibility_error",
            "test_invalid_identifier_names",
            "test_reserved_keyword_misuse",
            "test_encoding_declaration_validation"
          ],
          "count": 4
        },
        {
          "name": "TestMetadataValidationErrors",
          "methods": [
            "test_invalid_docstring_format",
            "test_comment_extraction_failure",
            "test_type_annotation_validation_error"
          ],
          "count": 3
        },
        {
          "name": "TestConfigurationValidationErrors",
          "methods": [
            "test_invalid_output_format_specification",
            "test_conflicting_options_validation",
            "test_invalid_parameter_types"
          ],
          "count": 3
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "tempfile",
        "ai_whisperer.tools.python_ast_json_tool",
        "ast",
        "ast",
        "json"
      ],
      "tested_modules": [
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 490,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_file_service.py",
      "test_classes": [
        {
          "name": "TestFileService",
          "methods": [
            "test_init",
            "test_cache_key_generation",
            "test_cache_validity",
            "test_cache_access_update",
            "test_cache_eviction",
            "test_clear_cache_all",
            "test_clear_cache_specific_path"
          ],
          "count": 7
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "time",
        "ai_whisperer.path_management",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.path_management"
      ],
      "fixtures_used": [
        "file_service",
        "mock_path_manager"
      ],
      "size": 321,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_ai_interaction_history.py",
      "test_classes": [],
      "test_functions": [
        "test_chat_completion_with_history",
        "test_chat_completion_with_multi_turn_history"
      ],
      "imports": [
        "pytest",
        "os",
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.ai_service.openrouter_ai_service"
      ],
      "tested_modules": [
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.ai_service.openrouter_ai_service"
      ],
      "fixtures_used": [
        "mock_post"
      ],
      "size": 206,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_jsonrpc_handlers_refactor.py",
      "test_classes": [],
      "test_functions": [
        "test_jsonrpc_handlers_refactor_placeholder"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.agents.agent",
        "ai_whisperer.agents.config",
        "ai_whisperer.agents.factory"
      ],
      "tested_modules": [
        "ai_whisperer.agents.factory",
        "ai_whisperer.agents.config",
        "ai_whisperer.agents.agent"
      ],
      "fixtures_used": [
        "session_manager",
        "session"
      ],
      "size": 170,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_logging.py",
      "test_classes": [],
      "test_functions": [
        "test_log_message_structure",
        "test_logging_different_levels",
        "test_logging_with_metadata"
      ],
      "imports": [
        "pytest",
        "logging",
        "ai_whisperer.logging_custom",
        "ai_whisperer.logging_custom"
      ],
      "tested_modules": [
        "ai_whisperer.logging_custom"
      ],
      "fixtures_used": [
        "mock_logger"
      ],
      "size": 264,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_workspace_detection_edge_cases.py",
      "test_classes": [],
      "test_functions": [
        "test_symlink_handling",
        "test_permission_denied_handling",
        "test_corrupted_workspace_config",
        "test_multiple_whisper_folders_in_hierarchy"
      ],
      "imports": [
        "os",
        "pytest",
        "tempfile",
        "shutil",
        "ai_whisperer.workspace_detection",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.workspace_detection"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 63,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_python_ast_parsing.py",
      "test_classes": [
        {
          "name": "TestASTParsingFilePaths",
          "methods": [
            "test_parse_simple_python_file"
          ],
          "count": 1
        },
        {
          "name": "TestASTParsingModules",
          "methods": [
            "test_parse_builtin_module"
          ],
          "count": 1
        },
        {
          "name": "TestASTParsingCodeStrings",
          "methods": [
            "test_parse_simple_code_string"
          ],
          "count": 1
        },
        {
          "name": "TestASTParsingInvalidSyntax",
          "methods": [
            "test_parse_syntax_error_missing_colon",
            "test_parse_syntax_error_invalid_indentation",
            "test_parse_syntax_error_unclosed_string",
            "test_parse_syntax_error_invalid_assignment",
            "test_parse_file_with_syntax_error",
            "test_parse_non_python_file"
          ],
          "count": 6
        },
        {
          "name": "TestASTNodeStructureVerification",
          "methods": [
            "test_verify_function_node_structure"
          ],
          "count": 1
        },
        {
          "name": "TestPython38PlusFeatures",
          "methods": [
            "test_parse_walrus_operator",
            "test_parse_positional_only_params",
            "test_parse_f_string_equals",
            "test_parse_type_hint_literals",
            "test_parse_match_statement",
            "test_parse_union_types",
            "test_parse_async_comprehensions",
            "test_parse_type_params"
          ],
          "count": 8
        },
        {
          "name": "TestASTParsingEdgeCases",
          "methods": [
            "test_parse_very_long_file"
          ],
          "count": 1
        },
        {
          "name": "TestASTParsingMetadata",
          "methods": [
            "test_metadata_includes_source_file",
            "test_metadata_includes_module_name",
            "test_metadata_includes_python_version",
            "test_metadata_encoding_detection"
          ],
          "count": 4
        }
      ],
      "test_functions": [
        "test_parse_file_with_functions",
        "test_parse_file_with_classes",
        "test_parse_nonexistent_file",
        "test_parse_file_with_encoding",
        "test_parse_relative_file_path",
        "test_parse_module_with_submodule",
        "test_parse_third_party_module",
        "test_parse_nonexistent_module",
        "test_parse_package_init",
        "test_module_to_json_static_method",
        "test_parse_multiline_code_string",
        "test_parse_empty_code_string",
        "test_verify_class_node_structure",
        "test_verify_comprehension_node_structure",
        "test_parse_deeply_nested_code",
        "test_parse_unicode_identifiers",
        "test_parse_complex_expressions",
        "test_parse_file_with_different_newlines"
      ],
      "imports": [
        "pytest",
        "ast",
        "tempfile",
        "os",
        "sys",
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 607,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_postprocessing_add_items.py",
      "test_classes": [
        {
          "name": "TestAddItemsPostprocessor",
          "methods": [
            "test_add_top_level_items",
            "test_add_step_level_items",
            "test_add_both_top_and_step_level_items",
            "test_empty_json_string",
            "test_invalid_json_string",
            "test_no_items_to_add",
            "test_empty_items_to_add",
            "test_add_items_with_existing_keys",
            "test_add_items_to_nested_steps",
            "test_missing_step_container",
            "test_step_container_not_a_list",
            "test_input_is_dictionary",
            "test_input_is_list",
            "test_add_items_to_empty_dict_input",
            "test_add_items_to_empty_list_input",
            "test_add_items_to_json_string_with_whitespace",
            "test_add_items_to_json_string_with_comments",
            "test_add_items_to_json_string_with_backticks",
            "test_add_items_to_json_string_with_extra_text",
            "test_add_items_to_json_string_with_unicode",
            "test_add_items_to_json_string_with_null_values",
            "test_add_items_to_json_string_with_boolean_values",
            "test_add_items_to_json_string_with_number_values",
            "test_add_items_to_json_string_with_nested_empty_objects_and_arrays",
            "test_add_items_to_json_string_with_complex_nested_structure"
          ],
          "count": 25
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 983,
      "markers": [
        "xfail"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_error_handling_edge_cases.py",
      "test_classes": [
        {
          "name": "TestMalformedInputFiles",
          "methods": [
            "test_file_with_random_binary_data",
            "test_file_with_null_bytes_throughout",
            "test_file_with_control_characters",
            "test_file_with_mixed_line_endings",
            "test_file_with_byte_order_mark",
            "test_extremely_long_lines",
            "test_file_with_incomplete_multibyte_sequence"
          ],
          "count": 7
        },
        {
          "name": "TestBoundaryConditions",
          "methods": [
            "test_maximum_identifier_length",
            "test_maximum_nesting_depth",
            "test_maximum_string_literal_length",
            "test_maximum_number_of_function_parameters",
            "test_extremely_large_number_literals"
          ],
          "count": 5
        },
        {
          "name": "TestCorruptedStructures",
          "methods": [
            "test_unmatched_brackets_complex",
            "test_malformed_function_definitions",
            "test_malformed_class_definitions",
            "test_malformed_import_statements",
            "test_malformed_exception_handling"
          ],
          "count": 5
        },
        {
          "name": "TestSpecialCharacterEdgeCases",
          "methods": [
            "test_all_unicode_categories",
            "test_zero_width_characters",
            "test_bidirectional_text_characters",
            "test_homoglyph_characters"
          ],
          "count": 4
        },
        {
          "name": "TestPathologicalInputs",
          "methods": [
            "test_alternating_quotes_stress",
            "test_escape_sequence_stress",
            "test_comment_edge_cases"
          ],
          "count": 3
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "os",
        "tempfile",
        "shutil",
        "string",
        "random",
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 534,
      "markers": [
        "xfail"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_context_tracking.py",
      "test_classes": [
        {
          "name": "TestContextItem",
          "methods": [
            "test_create_context_item",
            "test_calculate_hash",
            "test_is_stale",
            "test_serialization"
          ],
          "count": 4
        },
        {
          "name": "TestAgentContextManager",
          "methods": [
            "test_parse_file_references",
            "test_add_file_reference",
            "test_add_file_section",
            "test_process_message_references",
            "test_context_summary",
            "test_remove_item",
            "test_context_size_limit"
          ],
          "count": 7
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "tempfile",
        "ai_whisperer.context.context_item",
        "ai_whisperer.context.context_manager",
        "ai_whisperer.path_management",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.context.context_item",
        "ai_whisperer.path_management",
        "ai_whisperer.context.context_manager"
      ],
      "fixtures_used": [
        "temp_workspace",
        "context_manager"
      ],
      "size": 234,
      "markers": [
        "xfail"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_e_task_decomposition.py",
      "test_classes": [
        {
          "name": "TestTaskDecomposer",
          "methods": [
            "test_decomposer_initialization",
            "test_decompose_simple_plan",
            "test_task_has_required_fields",
            "test_external_agent_prompts_generated",
            "test_task_dependencies_preserved",
            "test_tdd_phase_context_added",
            "test_invalid_plan_raises_error",
            "test_circular_dependency_detection",
            "test_technology_detection",
            "test_acceptance_criteria_generation",
            "test_complexity_estimation"
          ],
          "count": 11
        },
        {
          "name": "TestDecomposedTask",
          "methods": [
            "test_task_creation",
            "test_task_serialization",
            "test_task_status_transitions",
            "test_execution_result_recording"
          ],
          "count": 4
        },
        {
          "name": "TestDependencyResolution",
          "methods": [
            "test_simple_dependency_chain",
            "test_parallel_dependencies",
            "test_missing_dependency_error"
          ],
          "count": 3
        },
        {
          "name": "TestExternalAgentPromptGeneration",
          "methods": [
            "test_claude_code_prompt_generation",
            "test_github_copilot_prompt_generation",
            "test_agent_suitability_assessment"
          ],
          "count": 3
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "uuid",
        "ai_whisperer.agents.task_decomposer",
        "ai_whisperer.agents.decomposed_task",
        "ai_whisperer.agents.agent_e_exceptions"
      ],
      "tested_modules": [
        "ai_whisperer.agents.decomposed_task",
        "ai_whisperer.agents.agent_e_exceptions",
        "ai_whisperer.agents.task_decomposer"
      ],
      "fixtures_used": [
        "sample_plan",
        "decomposer"
      ],
      "size": 543,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_tool_permission.py",
      "test_classes": [],
      "test_functions": [
        "test_agent_tool_permission_allow",
        "test_agent_tool_permission_deny"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.tools.tool_registry",
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.agents.registry"
      ],
      "tested_modules": [
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.agents.registry",
        "ai_whisperer.tools.tool_registry"
      ],
      "fixtures_used": [],
      "size": 94,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_workspace_tools.py",
      "test_classes": [],
      "test_functions": [
        "test_workspace_tools_can_be_instantiated",
        "test_workspace_tools_have_correct_tags",
        "test_workspace_tools_registration",
        "test_workspace_tools_filtering"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.tools.tool_registry",
        "ai_whisperer.tools.list_directory_tool",
        "ai_whisperer.tools.search_files_tool",
        "ai_whisperer.tools.get_file_content_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.search_files_tool",
        "ai_whisperer.tools.get_file_content_tool",
        "ai_whisperer.tools.list_directory_tool",
        "ai_whisperer.tools.tool_registry"
      ],
      "fixtures_used": [],
      "size": 104,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_refine_ai_interaction.py",
      "test_classes": [
        {
          "name": "TestRefineAIInteraction",
          "methods": [
            "test_prompt_construction_default",
            "test_prompt_construction_custom",
            "test_handle_mocked_ai_response_and_save",
            "test_file_saving_with_iterations"
          ],
          "count": 4
        }
      ],
      "test_functions": [],
      "imports": [
        "unittest",
        "os",
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "mock_file_open"
      ],
      "size": 214,
      "markers": [
        "skipif"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_stateless_ailoop.py",
      "test_classes": [
        {
          "name": "TestStatelessAILoop",
          "methods": [],
          "count": 0
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "os",
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.context.provider",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "asyncio",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "json"
      ],
      "tested_modules": [
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.context.provider"
      ],
      "fixtures_used": [
        "mock_context_provider",
        "mock_ai_service"
      ],
      "size": 954,
      "markers": [
        "xfail",
        "asyncio",
        "skipif"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_file_tools.py",
      "test_classes": [],
      "test_functions": [
        "test_read_file_tool_name",
        "test_read_file_tool_description",
        "test_read_file_tool_parameters_schema",
        "test_read_file_tool_openrouter_tool_definition",
        "test_read_file_tool_ai_prompt_instructions",
        "test_read_file_tool_execute_success",
        "test_read_file_tool_execute_file_not_found",
        "test_read_file_tool_execute_permission_denied",
        "test_read_file_tool_execute_missing_file_path",
        "test_read_file_tool_execute_path_outside_project_dir",
        "test_read_file_tool_execute_unsupported_file_type",
        "test_write_file_tool_name",
        "test_write_file_tool_description",
        "test_write_file_tool_parameters_schema",
        "test_write_file_tool_openrouter_api_definition",
        "test_write_file_tool_ai_prompt_instructions",
        "test_write_file_tool_run_success",
        "test_write_file_tool_run_overwrite",
        "test_write_file_tool_run_permission_denied",
        "test_write_file_tool_run_directory_created",
        "test_write_file_tool_run_missing_arguments"
      ],
      "imports": [
        "pathlib",
        "ai_whisperer.exceptions",
        "pytest",
        "ai_whisperer.path_management",
        "pytest",
        "os",
        "tempfile",
        "shutil",
        "ai_whisperer.tools.read_file_tool",
        "ai_whisperer.tools.write_file_tool",
        "unittest.mock"
      ],
      "tested_modules": [
        "ai_whisperer.tools.write_file_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.exceptions",
        "ai_whisperer.tools.read_file_tool"
      ],
      "fixtures_used": [
        "temp_project_file",
        "path_manager_initialized",
        "temp_project_dir"
      ],
      "size": 344,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_cli.py",
      "test_classes": [],
      "test_functions": [
        "test_cli_help_message",
        "test_cli_mode_selection"
      ],
      "imports": [
        "subprocess",
        "sys",
        "os",
        "pytest",
        "pathlib"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "expected"
      ],
      "size": 26,
      "markers": [
        "parametrize",
        "skip"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_postprocessing_text_fields.py",
      "test_classes": [],
      "test_functions": [
        "test_escape_text_fields_json",
        "test_escape_text_fields_unsupported_type"
      ],
      "imports": [
        "pytest",
        "json"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "is_error_case"
      ],
      "size": 129,
      "markers": [
        "parametrize"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_minimal_nested_schema.py",
      "test_classes": [],
      "test_functions": [],
      "imports": [],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 0,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_tool_calling_standard.py",
      "test_classes": [
        {
          "name": "TestToolCallingStandard",
          "methods": [
            "test_tool_call_parsing",
            "test_multiple_tool_calls",
            "test_tool_result_message_format",
            "test_message_history_with_tools",
            "test_tool_choice_parameter",
            "test_strict_mode_schema_validation",
            "test_parallel_tool_calls_parameter"
          ],
          "count": 7
        },
        {
          "name": "TestDebbieSessionTools",
          "methods": [],
          "count": 0
        },
        {
          "name": "TestModelSpecificBehavior",
          "methods": [
            "test_model_capability_detection"
          ],
          "count": 1
        },
        {
          "name": "TestStreamingToolCalls",
          "methods": [
            "test_streaming_tool_call_accumulation"
          ],
          "count": 1
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "ai_whisperer.ai_service.tool_calling",
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.tools.session_health_tool",
        "ai_whisperer.tools.session_analysis_tool",
        "ai_whisperer.tools.monitoring_control_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.ai_service.tool_calling",
        "ai_whisperer.tools.session_health_tool",
        "ai_whisperer.tools.monitoring_control_tool",
        "ai_whisperer.tools.session_analysis_tool"
      ],
      "fixtures_used": [],
      "size": 455,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_python_ast_json_tool.py",
      "test_classes": [
        {
          "name": "TestPythonASTJSONToolSchema",
          "methods": [
            "test_schema_file_exists",
            "test_schema_is_valid_json",
            "test_schema_covers_all_node_types",
            "test_schema_includes_metadata",
            "test_schema_includes_source_location"
          ],
          "count": 5
        },
        {
          "name": "TestPythonASTJSONToolAPI",
          "methods": [
            "test_tool_properties",
            "test_parameters_schema",
            "test_execute_to_json_not_implemented",
            "test_execute_from_json_not_implemented",
            "test_execute_validate_not_implemented",
            "test_execute_unknown_action"
          ],
          "count": 6
        },
        {
          "name": "TestPythonASTJSONToolStaticMethods",
          "methods": [
            "test_ast_to_json_not_implemented",
            "test_json_to_ast_not_implemented",
            "test_file_to_json_not_implemented",
            "test_module_to_json_not_implemented",
            "test_json_to_code_not_implemented",
            "test_validate_ast_json_not_implemented"
          ],
          "count": 6
        },
        {
          "name": "TestPythonASTJSONToolBidirectional",
          "methods": [
            "test_supports_file_paths",
            "test_supports_module_names",
            "test_supports_code_strings",
            "test_metadata_preservation",
            "test_round_trip_conversion_design"
          ],
          "count": 5
        },
        {
          "name": "TestPythonASTJSONToolIntegration",
          "methods": [
            "test_tool_can_be_instantiated",
            "test_tool_inherits_from_aitool",
            "test_get_ai_prompt_instructions"
          ],
          "count": 3
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "ast",
        "ai_whisperer.tools.python_ast_json_tool",
        "ai_whisperer.tools.base_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [],
      "size": 231,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_e_integration.py",
      "test_classes": [
        {
          "name": "TestAgentEIntegration",
          "methods": [
            "test_agent_e_in_registry",
            "test_agent_e_prompt_exists",
            "test_agent_e_tool_sets_defined",
            "test_agent_e_tools_can_be_registered",
            "test_mailbox_tools_available",
            "test_agent_e_capabilities_in_config"
          ],
          "count": 6
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "ai_whisperer.agents.registry",
        "ai_whisperer.agents.config",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.tools.tool_registry",
        "yaml",
        "ai_whisperer.tools.tool_registration",
        "ai_whisperer.tools.tool_registration",
        "yaml"
      ],
      "tested_modules": [
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.tools.tool_registry",
        "ai_whisperer.agents.registry",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.agents.config",
        "ai_whisperer.tools.tool_registration"
      ],
      "fixtures_used": [],
      "size": 190,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_mailbox_system.py",
      "test_classes": [
        {
          "name": "TestMailboxSystem",
          "methods": [
            "test_send_and_check_mail",
            "test_reply_to_mail",
            "test_priority_messages",
            "test_user_mail",
            "test_notification_handler",
            "test_archive_mail"
          ],
          "count": 6
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "ai_whisperer.agents.mailbox"
      ],
      "tested_modules": [
        "ai_whisperer.agents.mailbox"
      ],
      "fixtures_used": [],
      "size": 170,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_postprocessing_type_preservation.py",
      "test_classes": [
        {
          "name": "TestTypePreservation",
          "methods": [
            "test_identity_transform_preserves_dict_type",
            "test_identity_transform_preserves_str_type",
            "test_add_items_postprocessor_preserves_dict_type",
            "test_add_items_postprocessor_preserves_str_type",
            "test_handle_required_fields_preserves_dict_type",
            "test_handle_required_fields_preserves_str_type",
            "test_validate_syntax_preserves_dict_type",
            "test_validate_syntax_preserves_str_type",
            "test_clean_backtick_wrapper_preserves_dict_type",
            "test_clean_backtick_wrapper_preserves_str_type"
          ],
          "count": 10
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "result_data"
      ],
      "size": 124,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_context_manager.py",
      "test_classes": [],
      "test_functions": [
        "test_context_initialization_workspace_structure",
        "test_context_filtering_by_agent"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.agents.registry",
        "ai_whisperer.agents.context_manager"
      ],
      "tested_modules": [
        "ai_whisperer.agents.registry",
        "ai_whisperer.agents.context_manager"
      ],
      "fixtures_used": [
        "monkeypatch"
      ],
      "size": 69,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_debbie_observer.py",
      "test_classes": [
        {
          "name": "TestPatternDetector",
          "methods": [
            "test_detect_stall",
            "test_detect_rapid_retry",
            "test_detect_error_cascade",
            "test_detect_permission_issues"
          ],
          "count": 4
        },
        {
          "name": "TestInteractiveMonitor",
          "methods": [
            "test_monitor_initialization",
            "test_on_message_tracking",
            "test_on_tool_tracking",
            "test_error_tracking",
            "test_health_score_calculation",
            "test_alert_generation"
          ],
          "count": 6
        },
        {
          "name": "TestDebbieObserver",
          "methods": [
            "test_observer_singleton",
            "test_observe_session",
            "test_stop_observing",
            "test_message_hooks",
            "test_disabled_hooks",
            "test_session_health"
          ],
          "count": 6
        },
        {
          "name": "TestDebbieObserverIntegration",
          "methods": [
            "test_get_all_sessions_health"
          ],
          "count": 1
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 341,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_workspace_stats_tool.py",
      "test_classes": [
        {
          "name": "TestWorkspaceStatsTool",
          "methods": [
            "test_basic_statistics",
            "test_file_extension_statistics",
            "test_size_by_extension",
            "test_largest_files",
            "test_directory_sizes",
            "test_recent_changes",
            "test_file_age_distribution",
            "test_exclude_directories",
            "test_include_hidden_files",
            "test_max_depth_limiting",
            "test_summary_information",
            "test_empty_directory",
            "test_single_file_path",
            "test_nonexistent_path",
            "test_size_formatting"
          ],
          "count": 15
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "tempfile",
        "time",
        "os",
        "ai_whisperer.tools.workspace_stats_tool",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.tools.workspace_stats_tool",
        "ai_whisperer.path_management"
      ],
      "fixtures_used": [
        "temp_workspace",
        "stats_tool"
      ],
      "size": 261,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_e_external_adapters.py",
      "test_classes": [
        {
          "name": "TestExternalAgentAdapter",
          "methods": [
            "test_adapter_interface",
            "test_adapter_registration"
          ],
          "count": 2
        },
        {
          "name": "TestClaudeCodeAdapter",
          "methods": [
            "test_format_task_for_claude",
            "test_claude_execution_instructions",
            "test_claude_result_parsing",
            "test_claude_prompt_optimization",
            "test_claude_environment_validation",
            "test_claude_no_temp_files"
          ],
          "count": 6
        },
        {
          "name": "TestRooCodeAdapter",
          "methods": [
            "test_format_task_for_roocode",
            "test_roocode_multi_file_emphasis",
            "test_roocode_execution_instructions",
            "test_roocode_result_parsing"
          ],
          "count": 4
        },
        {
          "name": "TestGitHubCopilotAdapter",
          "methods": [
            "test_format_task_for_copilot",
            "test_copilot_autonomous_emphasis",
            "test_copilot_execution_instructions",
            "test_copilot_result_parsing"
          ],
          "count": 4
        },
        {
          "name": "TestAdapterErrorHandling",
          "methods": [
            "test_invalid_task_handling",
            "test_malformed_result_handling",
            "test_execution_failure_handling",
            "test_timeout_handling"
          ],
          "count": 4
        },
        {
          "name": "TestAdapterSelection",
          "methods": [
            "test_select_adapter_for_tdd_task",
            "test_select_adapter_for_multi_file_refactor",
            "test_select_adapter_for_complex_iteration"
          ],
          "count": 3
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "ai_whisperer.agents.external_adapters",
        "ai_whisperer.agents.decomposed_task",
        "ai_whisperer.agents.external_agent_result"
      ],
      "tested_modules": [
        "ai_whisperer.agents.decomposed_task",
        "ai_whisperer.agents.external_agent_result",
        "ai_whisperer.agents.external_adapters"
      ],
      "fixtures_used": [
        "sample_task",
        "iterative_task",
        "roo_adapter",
        "multi_file_task",
        "claude_adapter",
        "copilot_adapter",
        "adapter_registry",
        "adapters"
      ],
      "size": 569,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_scripted_postprocessing.py",
      "test_classes": [],
      "test_functions": [
        "test_identity_transform",
        "test_identity_transform_with_empty_input",
        "test_identity_transform_with_complex_nested_structure"
      ],
      "imports": [
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 101,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_clear_command.py",
      "test_classes": [
        {
          "name": "TestClearCommand",
          "methods": [],
          "count": 0
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "ai_whisperer.context.context_manager",
        "ai_whisperer.context.context_item",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.context.context_item",
        "ai_whisperer.path_management",
        "ai_whisperer.context.context_manager"
      ],
      "fixtures_used": [
        "session"
      ],
      "size": 186,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_continuation_strategy.py",
      "test_classes": [
        {
          "name": "TestContinuationProgress",
          "methods": [
            "test_init_defaults",
            "test_to_dict"
          ],
          "count": 2
        },
        {
          "name": "TestContinuationState",
          "methods": [
            "test_from_dict_minimal",
            "test_from_dict_full",
            "test_from_dict_defaults"
          ],
          "count": 3
        },
        {
          "name": "TestContinuationStrategy",
          "methods": [
            "test_init_with_no_config",
            "test_init_with_config",
            "test_reset",
            "test_should_continue_explicit_signal_continue",
            "test_should_continue_explicit_signal_terminate",
            "test_should_continue_no_signal_require_explicit",
            "test_should_continue_pattern_matching",
            "test_should_continue_safety_limits",
            "test_should_continue_timeout",
            "test_extract_continuation_state",
            "test_extract_next_action_from_continuation",
            "test_extract_next_action_from_tool_calls",
            "test_update_context",
            "test_get_progress_explicit",
            "test_get_progress_calculated",
            "test_get_continuation_message",
            "test_iteration_tracking",
            "test_elapsed_time_tracking",
            "test_history_tracking"
          ],
          "count": 19
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "time",
        "ai_whisperer.agents.continuation_strategy"
      ],
      "tested_modules": [
        "ai_whisperer.agents.continuation_strategy"
      ],
      "fixtures_used": [],
      "size": 413,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_refactored_ai_loop.py",
      "test_classes": [],
      "test_functions": [
        "test_refactored_ai_loop_placeholder"
      ],
      "imports": [
        "pytest",
        "asyncio",
        "logging"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "ai_loop_dependencies"
      ],
      "size": 493,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_plan_ingestion.py",
      "test_classes": [],
      "test_functions": [
        "test_parser_plan_not_loaded_init",
        "test_load_single_file_plan_success",
        "test_load_single_file_plan_file_not_found",
        "test_load_single_file_plan_malformed_json",
        "test_load_single_file_plan_missing_top_level_field",
        "test_load_single_file_plan_missing_required_input_hashes_field",
        "test_load_single_file_plan_plan_not_a_list",
        "test_load_single_file_plan_missing_required_subtask_field",
        "test_load_single_file_plan_extra_property_in_subtask",
        "test_load_overview_plan_success",
        "test_load_overview_plan_file_not_found",
        "test_load_overview_plan_malformed_json",
        "test_load_overview_plan_missing_top_level_field",
        "test_load_overview_plan_plan_not_a_list",
        "test_load_overview_plan_missing_required_step_field",
        "test_load_overview_plan_subtask_file_not_found",
        "test_load_overview_plan_subtask_malformed_json",
        "test_load_overview_plan_subtask_validation_error",
        "test_data_access_after_single_file_load",
        "test_data_access_after_overview_load",
        "test_plan_with_optional_fields_missing_single_file",
        "test_overview_plan_with_optional_subtask_fields_missing"
      ],
      "imports": [
        "pytest",
        "json",
        "os",
        "shutil",
        "pytest",
        "ai_whisperer.path_management",
        "ai_whisperer.plan_parser",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.path_management",
        "ai_whisperer.plan_parser"
      ],
      "fixtures_used": [
        "request",
        "tmp_path",
        "create_overview_plan_with_subtasks"
      ],
      "size": 505,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_search_files_tool.py",
      "test_classes": [],
      "test_functions": [
        "test_search_files_tool_properties",
        "test_search_by_name_glob_pattern",
        "test_search_by_name_specific_pattern",
        "test_search_by_name_with_file_types",
        "test_search_by_content_simple",
        "test_search_by_content_regex",
        "test_search_with_ignore_case",
        "test_search_with_search_path",
        "test_search_max_results",
        "test_search_no_results",
        "test_search_invalid_pattern",
        "test_search_missing_pattern",
        "test_search_invalid_search_type",
        "test_search_nonexistent_path",
        "test_search_outside_workspace",
        "test_search_skips_binary_files"
      ],
      "imports": [
        "pytest",
        "os",
        "tempfile",
        "ai_whisperer.tools.search_files_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.exceptions",
        "pytest",
        "pytest",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.tools.search_files_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.exceptions"
      ],
      "fixtures_used": [
        "setup_test_workspace"
      ],
      "size": 305,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_tool_filtering.py",
      "test_classes": [],
      "test_functions": [
        "test_agent_tool_filtering"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.tools.tool_registry",
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.agents.registry"
      ],
      "tested_modules": [
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.agents.registry",
        "ai_whisperer.tools.tool_registry"
      ],
      "fixtures_used": [],
      "size": 64,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_path_management.py",
      "test_classes": [],
      "test_functions": [
        "test_singleton_instance"
      ],
      "imports": [
        "pytest",
        "os",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.path_management"
      ],
      "fixtures_used": [
        "mock_getcwd"
      ],
      "size": 152,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_e_communication.py",
      "test_classes": [
        {
          "name": "TestAgentCommunication",
          "methods": [],
          "count": 0
        },
        {
          "name": "TestAgentMessage",
          "methods": [
            "test_message_creation",
            "test_message_serialization"
          ],
          "count": 2
        },
        {
          "name": "TestCollaborativeRefinement",
          "methods": [],
          "count": 0
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "json",
        "ai_whisperer.agents.agent_e_handler",
        "ai_whisperer.agents.agent_communication"
      ],
      "tested_modules": [
        "ai_whisperer.agents.agent_communication",
        "ai_whisperer.agents.agent_e_handler"
      ],
      "fixtures_used": [
        "mock_session_manager",
        "agent_e_handler",
        "collaborative_session"
      ],
      "size": 322,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_inspect_command.py",
      "test_classes": [
        {
          "name": "TestAgentInspectCommand",
          "methods": [],
          "count": 0
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "ai_whisperer.commands"
      ],
      "tested_modules": [
        "ai_whisperer.commands"
      ],
      "fixtures_used": [],
      "size": 41,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_openrouter_advanced_features.py",
      "test_classes": [
        {
          "name": "TestOpenRouterAdvancedFeatures",
          "methods": [
            "test_system_prompt_basic",
            "test_system_prompt_with_caching_tags",
            "test_tools_basic_flow",
            "test_structured_output_json_schema",
            "test_caching_initialization",
            "test_caching_caches_response",
            "test_multimodal_image_url",
            "test_multimodal_image_base64",
            "test_multimodal_pdf_base64",
            "test_multimodal_pdf_with_annotations_reuse",
            "test_api_error_handling",
            "test_api_error_handling_non_json_response"
          ],
          "count": 12
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "os",
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.ai_service.openrouter_ai_service",
        "ai_whisperer.exceptions"
      ],
      "tested_modules": [
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.ai_service.openrouter_ai_service",
        "ai_whisperer.exceptions"
      ],
      "fixtures_used": [
        "mock_post"
      ],
      "size": 503,
      "markers": [
        "flaky",
        "xfail",
        "skip",
        "skipif"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_context.py",
      "test_classes": [],
      "test_functions": [
        "test_inherits_context_provider",
        "test_store_and_retrieve_messages",
        "test_filter_messages_by_role",
        "test_system_prompt_handling",
        "test_conversation_history",
        "test_metadata_storage_and_retrieval",
        "test_agent_specific_metadata",
        "test_system_prompt_as_string_in_retrieve_messages",
        "test_system_prompt_as_dict_in_retrieve_messages",
        "test_no_system_prompt_in_retrieve_messages"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.context.provider"
      ],
      "tested_modules": [
        "ai_whisperer.context.provider",
        "ai_whisperer.context.agent_context"
      ],
      "fixtures_used": [
        "agent_context"
      ],
      "size": 102,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_ast_to_json_conversion.py",
      "test_classes": [
        {
          "name": "TestASTToJSONStatements",
          "methods": [
            "test_convert_function_def",
            "test_convert_async_function_def",
            "test_convert_class_def",
            "test_convert_assign_statements",
            "test_convert_control_flow_statements",
            "test_convert_with_statement",
            "test_convert_try_except",
            "test_convert_import_statements",
            "test_convert_global_nonlocal",
            "test_convert_del_statement",
            "test_convert_raise_statement",
            "test_convert_assert_statement",
            "test_convert_match_statement"
          ],
          "count": 13
        },
        {
          "name": "TestASTToJSONExpressions",
          "methods": [
            "test_convert_binary_operations",
            "test_convert_unary_operations",
            "test_convert_comparison_operations",
            "test_convert_boolean_operations",
            "test_convert_function_calls",
            "test_convert_attribute_access",
            "test_convert_subscript_access",
            "test_convert_literals",
            "test_convert_containers",
            "test_convert_comprehensions",
            "test_convert_lambda",
            "test_convert_conditional_expression",
            "test_convert_starred_expression",
            "test_convert_yield_expressions",
            "test_convert_await_expression",
            "test_convert_walrus_operator"
          ],
          "count": 16
        },
        {
          "name": "TestASTToJSONComplexStructures",
          "methods": [
            "test_convert_nested_functions",
            "test_convert_class_with_nested_classes",
            "test_convert_complex_decorators",
            "test_convert_complex_type_annotations",
            "test_convert_deeply_nested_expressions",
            "test_convert_complex_comprehension_nesting"
          ],
          "count": 6
        },
        {
          "name": "TestASTToJSONMetadataPreservation",
          "methods": [
            "test_preserve_line_numbers",
            "test_preserve_column_offsets",
            "test_preserve_end_positions",
            "test_metadata_with_unicode",
            "test_docstring_preservation",
            "test_type_comment_preservation"
          ],
          "count": 6
        },
        {
          "name": "TestASTToJSONSchemaCompliance",
          "methods": [
            "test_json_structure_has_ast_and_metadata",
            "test_metadata_has_required_fields",
            "test_node_type_field_present",
            "test_location_info_structure",
            "test_json_serializable",
            "test_no_circular_references"
          ],
          "count": 6
        },
        {
          "name": "TestASTToJSONEdgeCases",
          "methods": [
            "test_empty_module",
            "test_comments_only",
            "test_single_expression",
            "test_very_long_identifiers",
            "test_special_string_literals",
            "test_extreme_nesting_depth"
          ],
          "count": 6
        },
        {
          "name": "TestASTToJSONWithOptions",
          "methods": [
            "test_without_metadata",
            "test_file_to_json_method",
            "test_module_to_json_method",
            "test_formatted_output",
            "test_unformatted_output"
          ],
          "count": 5
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "ast",
        "json",
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [],
      "size": 838,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_session_manager_refactor.py",
      "test_classes": [],
      "test_functions": [
        "test_session_manager_refactor_placeholder"
      ],
      "imports": [
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 8,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_openrouter_api_detailed.py",
      "test_classes": [],
      "test_functions": [
        "test_list_models_detailed_single",
        "test_list_models_detailed_multiple",
        "test_list_models_detailed_missing_fields",
        "test_list_models_detailed_empty_data"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.ai_service.openrouter_ai_service"
      ],
      "tested_modules": [
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.ai_service.openrouter_ai_service"
      ],
      "fixtures_used": [
        "mock_get"
      ],
      "size": 132,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_registry.py",
      "test_classes": [],
      "test_functions": [
        "test_agent_dataclass_creation",
        "test_agent_registry_loads_default_agents",
        "test_agent_registry_get_agent_invalid_id",
        "test_agent_registry_list_agents"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.agents.registry"
      ],
      "tested_modules": [
        "ai_whisperer.agents.registry"
      ],
      "fixtures_used": [
        "monkeypatch"
      ],
      "size": 79,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_python_ast_parsing_advanced.py",
      "test_classes": [
        {
          "name": "TestASTParsingAdvancedFeatures",
          "methods": [
            "test_parse_context_managers_with_multiple_items",
            "test_parse_exception_handling_complex",
            "test_parse_generator_expressions",
            "test_parse_starred_expressions",
            "test_parse_annotations_complex",
            "test_parse_async_await_comprehensive",
            "test_parse_dataclasses",
            "test_parse_metaclasses"
          ],
          "count": 8
        },
        {
          "name": "TestASTParsingErrorHandling",
          "methods": [
            "test_parse_binary_file_error"
          ],
          "count": 1
        },
        {
          "name": "TestASTParsingPerformance",
          "methods": [
            "test_parse_file_with_many_imports"
          ],
          "count": 1
        },
        {
          "name": "TestASTParsingStaticMethods",
          "methods": [
            "test_ast_to_json_with_ast_node",
            "test_ast_to_json_without_metadata",
            "test_file_to_json_with_pathlib",
            "test_module_to_json_builtin",
            "test_validate_ast_json_with_schema"
          ],
          "count": 5
        }
      ],
      "test_functions": [
        "test_parse_circular_import_handling",
        "test_parse_malformed_unicode",
        "test_parse_highly_nested_data_structures"
      ],
      "imports": [
        "pytest",
        "tempfile",
        "ai_whisperer.tools.python_ast_json_tool",
        "ast",
        "ast"
      ],
      "tested_modules": [
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 340,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_error_handling_graceful_degradation.py",
      "test_classes": [
        {
          "name": "TestPartialProcessingDegradation",
          "methods": [
            "test_metadata_extraction_failure_fallback",
            "test_comment_processing_failure_fallback",
            "test_type_annotation_processing_failure_fallback",
            "test_optimization_failure_fallback",
            "test_json_prettification_failure_fallback"
          ],
          "count": 5
        },
        {
          "name": "TestResourceConstraintDegradation",
          "methods": [
            "test_memory_pressure_degradation",
            "test_processing_timeout_degradation",
            "test_disk_space_degradation",
            "test_concurrent_access_degradation"
          ],
          "count": 4
        },
        {
          "name": "TestBatchProcessingDegradation",
          "methods": [
            "test_partial_batch_failure_recovery",
            "test_batch_memory_pressure_degradation",
            "test_batch_cascading_failure_prevention"
          ],
          "count": 3
        },
        {
          "name": "TestUserExperienceDegradation",
          "methods": [
            "test_progressive_feature_disabling",
            "test_informative_error_recovery",
            "test_quality_vs_performance_tradeoff",
            "test_fallback_output_formats"
          ],
          "count": 4
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "os",
        "tempfile",
        "shutil",
        "time",
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 467,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_error_handling_system_stability.py",
      "test_classes": [
        {
          "name": "TestMemoryStability",
          "methods": [
            "test_memory_leak_prevention_on_errors",
            "test_stack_overflow_recovery",
            "test_large_object_cleanup_on_error",
            "test_circular_reference_cleanup"
          ],
          "count": 4
        },
        {
          "name": "TestThreadSafety",
          "methods": [
            "test_concurrent_error_handling",
            "test_resource_contention_stability",
            "test_deadlock_prevention"
          ],
          "count": 3
        },
        {
          "name": "TestExceptionSafety",
          "methods": [
            "test_exception_propagation_safety",
            "test_resource_cleanup_on_exception",
            "test_file_handle_cleanup_on_error"
          ],
          "count": 3
        },
        {
          "name": "TestSystemResourceStability",
          "methods": [
            "test_file_descriptor_leak_prevention",
            "test_cpu_usage_stability_under_errors",
            "test_signal_handling_stability"
          ],
          "count": 3
        },
        {
          "name": "TestDataIntegrityUnderErrors",
          "methods": [
            "test_output_file_integrity_on_partial_failure",
            "test_atomic_operations_under_errors",
            "test_state_consistency_after_errors"
          ],
          "count": 3
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "os",
        "gc",
        "threading",
        "time",
        "tempfile",
        "shutil",
        "signal",
        "sys",
        "weakref",
        "ai_whisperer.tools.python_ast_json_tool",
        "psutil",
        "psutil",
        "psutil",
        "threading",
        "json"
      ],
      "tested_modules": [
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 662,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_rfc_tools.py",
      "test_classes": [
        {
          "name": "TestCreateRFCTool",
          "methods": [
            "test_tool_properties",
            "test_create_basic_rfc",
            "test_create_rfc_with_requirements",
            "test_generate_unique_rfc_id",
            "test_metadata_file_creation"
          ],
          "count": 5
        },
        {
          "name": "TestReadRFCTool",
          "methods": [
            "test_read_full_rfc",
            "test_read_specific_section",
            "test_read_nonexistent_rfc"
          ],
          "count": 3
        },
        {
          "name": "TestListRFCsTool",
          "methods": [
            "test_list_all_rfcs",
            "test_list_by_status",
            "test_sort_by_created",
            "test_empty_status"
          ],
          "count": 4
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "tempfile",
        "ai_whisperer.tools.create_rfc_tool",
        "ai_whisperer.tools.read_rfc_tool",
        "ai_whisperer.tools.list_rfcs_tool",
        "ai_whisperer.path_management",
        "re"
      ],
      "tested_modules": [
        "ai_whisperer.tools.list_rfcs_tool",
        "ai_whisperer.tools.read_rfc_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.tools.create_rfc_tool"
      ],
      "fixtures_used": [
        "temp_workspace",
        "create_tool",
        "list_tool",
        "temp_workspace_with_rfcs",
        "read_tool"
      ],
      "size": 347,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_round_trip_working.py",
      "test_classes": [
        {
          "name": "TestRoundTripBasicConstructs",
          "methods": [
            "test_simple_expressions",
            "test_basic_statements",
            "test_function_definitions",
            "test_class_definitions"
          ],
          "count": 4
        },
        {
          "name": "TestRoundTripDataStructures",
          "methods": [
            "test_literals",
            "test_collections",
            "test_comprehensions"
          ],
          "count": 3
        },
        {
          "name": "TestRoundTripControlFlow",
          "methods": [
            "test_if_statements",
            "test_loops",
            "test_exception_handling"
          ],
          "count": 3
        },
        {
          "name": "TestRoundTripRealWorld",
          "methods": [
            "test_complete_module"
          ],
          "count": 1
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "ast",
        "time",
        "hashlib",
        "difflib",
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [],
      "size": 421,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_list_directory_tool.py",
      "test_classes": [],
      "test_functions": [
        "test_list_directory_tool_properties",
        "test_list_directory_flat",
        "test_list_directory_with_hidden",
        "test_list_directory_subdirectory",
        "test_list_directory_recursive",
        "test_list_directory_recursive_depth_limit",
        "test_list_directory_nonexistent_path",
        "test_list_directory_file_not_directory",
        "test_list_directory_outside_workspace",
        "test_list_directory_empty_directory",
        "test_list_directory_file_sizes",
        "test_list_directory_max_depth_validation"
      ],
      "imports": [
        "pytest",
        "os",
        "tempfile",
        "ai_whisperer.tools.list_directory_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.exceptions"
      ],
      "tested_modules": [
        "ai_whisperer.tools.list_directory_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.exceptions"
      ],
      "fixtures_used": [
        "setup_test_directory"
      ],
      "size": 184,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_ai_service_interaction.py",
      "test_classes": [
        {
          "name": "TestOpenRouterAIServiceUnit",
          "methods": [
            "test_initialization_success",
            "test_initialization_invalid_config_type",
            "test_call_chat_completion_success",
            "test_call_chat_completion_with_history",
            "test_call_chat_completion_with_tool_calls",
            "test_call_chat_completion_auth_error",
            "test_call_chat_completion_rate_limit_error",
            "test_call_chat_completion_api_error",
            "test_call_chat_completion_connection_error",
            "test_call_chat_completion_timeout_error",
            "test_list_models_success",
            "test_list_models_api_error",
            "test_list_models_connection_error",
            "test_list_models_invalid_response_format"
          ],
          "count": 14
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "requests",
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.ai_service.ai_service",
        "ai_whisperer.ai_service.openrouter_ai_service",
        "ai_whisperer.exceptions"
      ],
      "tested_modules": [
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.ai_service.ai_service",
        "ai_whisperer.ai_service.openrouter_ai_service",
        "ai_whisperer.exceptions"
      ],
      "fixtures_used": [
        "api_client"
      ],
      "size": 542,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_factory.py",
      "test_classes": [],
      "test_functions": [
        "test_create_agent_from_config",
        "test_create_agent_from_dict",
        "test_create_agent_with_different_models",
        "test_agent_validation_missing_required_fields",
        "test_agent_validation_invalid_model",
        "test_error_on_invalid_config_type",
        "test_register_and_create_from_template",
        "test_error_on_unknown_template",
        "test_create_agent_with_custom_params",
        "test_agent_factory_supports_presets"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.agents.agent",
        "ai_whisperer.agents.config",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.agents.factory",
        "ai_whisperer.agents.config"
      ],
      "tested_modules": [
        "ai_whisperer.context.agent_context",
        "ai_whisperer.agents.factory",
        "ai_whisperer.agents.config",
        "ai_whisperer.agents.agent"
      ],
      "fixtures_used": [
        "config_dict",
        "basic_config"
      ],
      "size": 177,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_communication.py",
      "test_classes": [],
      "test_functions": [
        "test_handoff_protocol",
        "test_context_transfer_between_agents",
        "test_agent_recommendation_system"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.agents.session_manager",
        "ai_whisperer.agents.registry"
      ],
      "tested_modules": [
        "ai_whisperer.agents.registry",
        "ai_whisperer.agents.session_manager"
      ],
      "fixtures_used": [
        "session"
      ],
      "size": 78,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_find_pattern_tool.py",
      "test_classes": [
        {
          "name": "TestFindPatternTool",
          "methods": [
            "test_basic_pattern_search",
            "test_case_sensitive_search",
            "test_whole_word_search",
            "test_file_type_filtering",
            "test_context_lines",
            "test_max_results_limiting",
            "test_regex_patterns",
            "test_invalid_regex",
            "test_exclude_directories",
            "test_single_file_search",
            "test_nonexistent_path",
            "test_relative_paths_in_results",
            "test_empty_pattern",
            "test_performance_with_many_files"
          ],
          "count": 14
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "tempfile",
        "os",
        "ai_whisperer.tools.find_pattern_tool",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.tools.find_pattern_tool",
        "ai_whisperer.path_management"
      ],
      "fixtures_used": [
        "temp_workspace",
        "find_tool"
      ],
      "size": 254,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_get_file_content_tool.py",
      "test_classes": [],
      "test_functions": [
        "test_get_file_content_tool_properties",
        "test_read_small_file",
        "test_read_with_line_range",
        "test_preview_mode",
        "test_preview_mode_small_file",
        "test_read_empty_file",
        "test_read_unicode_file",
        "test_binary_file_detection",
        "test_nonexistent_file",
        "test_directory_instead_of_file",
        "test_outside_workspace_access",
        "test_missing_path_argument",
        "test_invalid_line_range",
        "test_line_range_adjustment",
        "test_file_size_formatting"
      ],
      "imports": [
        "pytest",
        "os",
        "tempfile",
        "ai_whisperer.tools.get_file_content_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.exceptions"
      ],
      "tested_modules": [
        "ai_whisperer.tools.get_file_content_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.exceptions"
      ],
      "fixtures_used": [
        "setup_test_files"
      ],
      "size": 245,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_tools.py",
      "test_classes": [],
      "test_functions": [
        "test_tool_tag_filtering",
        "test_tool_category_filtering",
        "test_tool_name_pattern_filtering"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.tools.tool_registry",
        "ai_whisperer.tools.base_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.tools.tool_registry"
      ],
      "fixtures_used": [],
      "size": 54,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_config.py",
      "test_classes": [],
      "test_functions": [
        "test_valid_agent_config_initialization",
        "test_missing_required_fields",
        "test_invalid_types",
        "test_generation_param_ranges",
        "test_model_selection_and_api_settings",
        "test_tool_permissions_and_limits",
        "test_context_settings_and_limits",
        "test_serialization_and_deserialization",
        "test_invalid_serialization_input",
        "test_error_messages_are_clear"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.agents.config",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.agents.config"
      ],
      "fixtures_used": [],
      "size": 115,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_cli_workspace_validation.py",
      "test_classes": [],
      "test_functions": [
        "test_cli_validates_workspace_before_execution",
        "test_cli_workspace_error_message"
      ],
      "imports": [
        "pytest",
        "ai_whisperer"
      ],
      "tested_modules": [
        "ai_whisperer"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 25,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_tool_sets.py",
      "test_classes": [
        {
          "name": "TestToolSet",
          "methods": [
            "test_tool_set_creation",
            "test_tool_set_minimal_config"
          ],
          "count": 2
        },
        {
          "name": "TestToolSetManager",
          "methods": [
            "test_load_config",
            "test_inheritance_resolution",
            "test_circular_inheritance_detection",
            "test_get_tool_set_info"
          ],
          "count": 4
        },
        {
          "name": "TestToolRegistryWithSets",
          "methods": [
            "test_get_tools_by_set",
            "test_get_tools_by_set_with_deny_tags",
            "test_get_tools_for_agent",
            "test_tool_filtering_precedence"
          ],
          "count": 4
        }
      ],
      "test_functions": [
        "test_registry_singleton_with_tool_sets"
      ],
      "imports": [
        "pytest",
        "tempfile",
        "yaml",
        "ai_whisperer.tools.tool_set",
        "ai_whisperer.tools.tool_registry",
        "ai_whisperer.tools.base_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.tools.tool_set",
        "ai_whisperer.tools.tool_registry"
      ],
      "fixtures_used": [
        "tmp_path",
        "registry_with_tools"
      ],
      "size": 412,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_tool_usage_logging.py",
      "test_classes": [],
      "test_functions": [
        "test_tool_usage_logging"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.agents.registry",
        "ai_whisperer.tools.tool_usage_logging"
      ],
      "tested_modules": [
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.agents.registry",
        "ai_whisperer.tools.tool_usage_logging"
      ],
      "fixtures_used": [],
      "size": 41,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_context_manager.py",
      "test_classes": [],
      "test_functions": [
        "test_context_manager_initialization",
        "test_add_message",
        "test_add_multiple_messages",
        "test_get_history_with_limit",
        "test_clear_history",
        "test_message_roles"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.context_management"
      ],
      "tested_modules": [
        "ai_whisperer.context_management"
      ],
      "fixtures_used": [],
      "size": 71,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_error_handling_file_io.py",
      "test_classes": [
        {
          "name": "TestFileAccessErrors",
          "methods": [
            "test_read_nonexistent_file",
            "test_read_permission_denied_file",
            "test_write_to_readonly_directory",
            "test_write_to_nonexistent_directory",
            "test_disk_full_simulation",
            "test_corrupted_file_read"
          ],
          "count": 6
        },
        {
          "name": "TestFileContentErrors",
          "methods": [
            "test_binary_file_input",
            "test_invalid_encoding_file",
            "test_empty_file_input",
            "test_whitespace_only_file",
            "test_extremely_large_file"
          ],
          "count": 5
        },
        {
          "name": "TestFileSystemErrors",
          "methods": [
            "test_invalid_characters_in_path",
            "test_path_too_long",
            "test_circular_symlink",
            "test_network_path_timeout"
          ],
          "count": 4
        },
        {
          "name": "TestConcurrentAccessErrors",
          "methods": [
            "test_file_locked_by_another_process",
            "test_file_deleted_during_processing",
            "test_output_file_conflicts"
          ],
          "count": 3
        },
        {
          "name": "TestResourceExhaustionErrors",
          "methods": [
            "test_memory_exhaustion",
            "test_recursive_depth_limit",
            "test_processing_timeout"
          ],
          "count": 3
        },
        {
          "name": "TestBatchProcessingErrors",
          "methods": [
            "test_batch_partial_failure_recovery",
            "test_batch_cascading_failures",
            "test_batch_memory_pressure_handling"
          ],
          "count": 3
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "os",
        "tempfile",
        "shutil",
        "stat",
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 559,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_prompt_system_performance.py",
      "test_classes": [
        {
          "name": "TestPromptSystemPerformance",
          "methods": [
            "test_initialization_performance",
            "test_prompt_composition_performance",
            "test_repeated_formatting_performance",
            "test_feature_toggle_performance",
            "test_large_template_substitution_performance"
          ],
          "count": 5
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "time",
        "tempfile",
        "shutil",
        "ai_whisperer.prompt_system",
        "statistics"
      ],
      "tested_modules": [
        "ai_whisperer.prompt_system"
      ],
      "fixtures_used": [
        "mock_path_manager"
      ],
      "size": 182,
      "markers": [
        "performance"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_continuation_depth.py",
      "test_classes": [],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "session"
      ],
      "size": 198,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_planner_tools.py",
      "test_classes": [],
      "test_functions": [
        "test_analyze_workspace",
        "test_read_schema_files",
        "test_validate_plan"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.agents.planner_tools"
      ],
      "tested_modules": [
        "ai_whisperer.agents.planner_tools"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 46,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_web_tools.py",
      "test_classes": [
        {
          "name": "TestWebSearchTool",
          "methods": [
            "test_tool_properties",
            "test_basic_search",
            "test_search_with_focus",
            "test_cache_functionality",
            "test_search_error_handling",
            "test_no_results",
            "test_max_results_limit"
          ],
          "count": 7
        },
        {
          "name": "TestFetchURLTool",
          "methods": [
            "test_tool_properties",
            "test_fetch_markdown",
            "test_fetch_code_blocks",
            "test_url_validation",
            "test_cache_functionality",
            "test_error_handling",
            "test_content_size_limit",
            "test_include_links_option"
          ],
          "count": 8
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "os",
        "tempfile",
        "ai_whisperer.tools.web_search_tool",
        "ai_whisperer.tools.fetch_url_tool",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.tools.web_search_tool",
        "ai_whisperer.tools.fetch_url_tool",
        "ai_whisperer.path_management"
      ],
      "fixtures_used": [
        "temp_cache_dir",
        "fetch_tool",
        "search_tool"
      ],
      "size": 360,
      "markers": [
        "skipif"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_workspace_handler.py",
      "test_classes": [
        {
          "name": "TestWorkspaceHandler",
          "methods": [
            "test_get_methods"
          ],
          "count": 1
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "ai_whisperer.path_management",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.path_management"
      ],
      "fixtures_used": [
        "workspace_handler",
        "mock_project_manager",
        "mock_file_service"
      ],
      "size": 236,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_rfc_extension_regression.py",
      "test_classes": [
        {
          "name": "TestRFCExtensionRegression",
          "methods": [
            "test_no_double_md_extension_on_move",
            "test_delete_after_move_with_extension_issue",
            "test_create_move_delete_workflow",
            "test_metadata_filename_field_consistency"
          ],
          "count": 4
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "tempfile",
        "json",
        "ai_whisperer.tools.create_rfc_tool",
        "ai_whisperer.tools.move_rfc_tool",
        "ai_whisperer.tools.delete_rfc_tool",
        "ai_whisperer.path_management",
        "re",
        "re"
      ],
      "tested_modules": [
        "ai_whisperer.tools.move_rfc_tool",
        "ai_whisperer.tools.delete_rfc_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.tools.create_rfc_tool"
      ],
      "fixtures_used": [
        "temp_workspace"
      ],
      "size": 187,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_metadata_preservation.py",
      "test_classes": [
        {
          "name": "TestDocstringPreservation",
          "methods": [
            "test_module_docstring_preservation",
            "test_function_docstring_preservation",
            "test_class_docstring_preservation",
            "test_docstring_special_cases"
          ],
          "count": 4
        },
        {
          "name": "TestSourceLocationMetadata",
          "methods": [
            "test_basic_location_preservation",
            "test_complex_location_preservation",
            "test_location_with_decorators",
            "test_location_in_comprehensions",
            "test_location_edge_cases"
          ],
          "count": 5
        },
        {
          "name": "TestCommentPreservation",
          "methods": [
            "test_comment_detection_and_storage",
            "test_multiline_comment_blocks",
            "test_comment_preservation_strategies",
            "test_comment_unicode_and_special_chars",
            "test_comment_reconstruction_accuracy"
          ],
          "count": 5
        },
        {
          "name": "TestFormattingPreservation",
          "methods": [
            "test_indentation_style_preservation",
            "test_line_length_preferences",
            "test_blank_line_patterns",
            "test_string_quote_preferences",
            "test_operator_spacing_preferences",
            "test_import_organization_style"
          ],
          "count": 6
        },
        {
          "name": "TestMetadataRoundTrip",
          "methods": [
            "test_complete_metadata_preservation",
            "test_metadata_in_json_structure",
            "test_metadata_reconstruction_options",
            "test_metadata_compatibility",
            "test_large_file_metadata_performance"
          ],
          "count": 5
        },
        {
          "name": "TestEdgeCasesAndErrors",
          "methods": [
            "test_malformed_docstrings",
            "test_extreme_formatting",
            "test_comment_edge_cases",
            "test_error_recovery"
          ],
          "count": 4
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "ast",
        "json",
        "textwrap",
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [],
      "size": 1075,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_rfc_move_extensions.py",
      "test_classes": [
        {
          "name": "TestMoveRFCExtensions",
          "methods": [
            "test_move_with_md_extension_input",
            "test_move_without_md_extension_input",
            "test_move_back_and_forth",
            "test_move_updates_metadata_correctly",
            "test_move_edge_cases"
          ],
          "count": 5
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "tempfile",
        "json",
        "os",
        "ai_whisperer.tools.create_rfc_tool",
        "ai_whisperer.tools.move_rfc_tool",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.tools.move_rfc_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.tools.create_rfc_tool"
      ],
      "fixtures_used": [
        "temp_workspace"
      ],
      "size": 250,
      "markers": [
        "skipif"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_direct_streaming.py",
      "test_classes": [
        {
          "name": "TestDirectStreaming",
          "methods": [],
          "count": 0
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.context.agent_context",
        "pytest",
        "pytest",
        "pytest",
        "pytest",
        "pytest",
        "pytest",
        "pytest",
        "pytest",
        "time"
      ],
      "tested_modules": [
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.context.agent_context"
      ],
      "fixtures_used": [
        "mock_config"
      ],
      "size": 335,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_python_ast_json_design.py",
      "test_classes": [
        {
          "name": "TestPythonASTJSONDesignRequirements",
          "methods": [
            "test_api_supports_file_path_input",
            "test_api_supports_module_name_input",
            "test_api_supports_code_string_input",
            "test_bidirectional_conversion_api",
            "test_metadata_fields_in_schema",
            "test_source_location_preservation",
            "test_comprehensive_node_coverage",
            "test_validation_capability",
            "test_error_handling_design",
            "test_formatting_options"
          ],
          "count": 10
        },
        {
          "name": "TestPythonASTJSONSchemaCompleteness",
          "methods": [
            "test_async_constructs",
            "test_type_annotations_support",
            "test_pattern_matching_support",
            "test_docstring_preservation"
          ],
          "count": 4
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "tempfile",
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.python_ast_json_tool"
      ],
      "fixtures_used": [],
      "size": 200,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_execute_command_tool.py",
      "test_classes": [],
      "test_functions": [
        "test_execute_command_tool_name",
        "test_execute_command_tool_description",
        "test_execute_command_tool_parameters_schema",
        "test_execute_command_tool_category",
        "test_execute_command_tool_tags",
        "test_execute_command_tool_ai_prompt_instructions",
        "test_execute_success_simple",
        "test_execute_success_with_cwd",
        "test_execute_command_not_found",
        "test_execute_command_produces_stderr_and_nonzero_return",
        "test_execute_empty_command"
      ],
      "imports": [
        "pytest",
        "asyncio",
        "os",
        "platform",
        "ai_whisperer.tools.execute_command_tool",
        "pytest",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.tools.execute_command_tool"
      ],
      "fixtures_used": [
        "tool",
        "tmp_path"
      ],
      "size": 167,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_jsonrpc.py",
      "test_classes": [],
      "test_functions": [
        "test_agent_list",
        "test_session_switch_agent",
        "test_session_current_agent",
        "test_session_handoff"
      ],
      "imports": [
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "jsonrpc_client"
      ],
      "size": 41,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_rfc_tools_complete.py",
      "test_classes": [
        {
          "name": "TestUpdateRFCTool",
          "methods": [
            "test_tool_properties",
            "test_update_existing_section",
            "test_append_to_section",
            "test_update_title",
            "test_add_new_section",
            "test_history_tracking",
            "test_metadata_update",
            "test_rfc_not_found"
          ],
          "count": 8
        },
        {
          "name": "TestMoveRFCTool",
          "methods": [
            "test_tool_properties",
            "test_move_in_progress_to_archived",
            "test_move_with_metadata",
            "test_history_tracking",
            "test_already_in_target_status",
            "test_rfc_not_found",
            "test_transition_messages"
          ],
          "count": 7
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "tempfile",
        "ai_whisperer.tools.update_rfc_tool",
        "ai_whisperer.tools.move_rfc_tool",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.tools.move_rfc_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.tools.update_rfc_tool"
      ],
      "fixtures_used": [
        "temp_workspace_with_rfcs",
        "move_tool",
        "update_tool",
        "temp_workspace_with_rfc"
      ],
      "size": 353,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_postprocessing_pipeline.py",
      "test_classes": [],
      "test_functions": [
        "test_pipeline_with_identity_step",
        "test_pipeline_with_multiple_identity_steps",
        "test_clean_backtick_wrapper"
      ],
      "imports": [
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 105,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_enhanced_prompt_system.py",
      "test_classes": [
        {
          "name": "TestEnhancedPromptSystem",
          "methods": [
            "test_shared_components_loaded_on_init",
            "test_core_feature_enabled_by_default",
            "test_enable_feature",
            "test_disable_feature",
            "test_get_enabled_features",
            "test_get_formatted_prompt_with_shared_components",
            "test_get_formatted_prompt_without_shared_components",
            "test_get_formatted_prompt_with_tools",
            "test_get_formatted_prompt_with_template_parameters",
            "test_shared_component_loading_error_handling",
            "test_missing_shared_directory",
            "test_special_continuation_and_mailbox_handling",
            "test_component_ordering"
          ],
          "count": 13
        },
        {
          "name": "TestPromptSystemIntegration",
          "methods": [
            "test_real_shared_prompts_loading",
            "test_real_agent_prompt_with_shared"
          ],
          "count": 2
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "tempfile",
        "shutil",
        "os",
        "ai_whisperer.prompt_system",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.path_management",
        "ai_whisperer.prompt_system"
      ],
      "fixtures_used": [
        "prompt_config",
        "prompt_system"
      ],
      "size": 374,
      "markers": [
        "integration"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_tool_tags.py",
      "test_classes": [],
      "test_functions": [
        "test_read_file_tool_tags",
        "test_write_file_tool_tags",
        "test_execute_command_tool_tags",
        "test_tool_registry_filtering_by_tags",
        "test_tool_registry_filtering_by_category"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.tools.read_file_tool",
        "ai_whisperer.tools.write_file_tool",
        "ai_whisperer.tools.execute_command_tool",
        "ai_whisperer.tools.tool_registry"
      ],
      "tested_modules": [
        "ai_whisperer.tools.write_file_tool",
        "ai_whisperer.tools.execute_command_tool",
        "ai_whisperer.tools.tool_registry",
        "ai_whisperer.tools.read_file_tool"
      ],
      "fixtures_used": [],
      "size": 96,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_context_serialization.py",
      "test_classes": [],
      "test_functions": [
        "test_context_save_and_load_basic",
        "test_context_data_integrity",
        "test_context_version_compatibility",
        "test_context_handles_corrupted_data",
        "test_context_empty_context",
        "test_context_large_context_performance",
        "test_context_json_serialization_interoperability"
      ],
      "imports": [
        "pytest",
        "json",
        "tempfile",
        "os",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.context.provider",
        "time"
      ],
      "tested_modules": [
        "ai_whisperer.context.provider",
        "ai_whisperer.context.agent_context"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 95,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_context_provider.py",
      "test_classes": [],
      "test_functions": [
        "test_context_provider_is_abstract",
        "test_dummy_provider_implements_interface",
        "test_metadata_support",
        "test_interface_contract_methods_exist"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.context.provider"
      ],
      "tested_modules": [
        "ai_whisperer.context.provider"
      ],
      "fixtures_used": [],
      "size": 50,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_rfc_naming.py",
      "test_classes": [
        {
          "name": "TestRFCNaming",
          "methods": [
            "test_create_rfc_with_short_name",
            "test_create_rfc_validates_short_name",
            "test_read_rfc_by_filename",
            "test_read_rfc_by_rfc_id",
            "test_move_rfc_preserves_filename",
            "test_delete_rfc_by_filename",
            "test_list_rfcs_shows_filenames",
            "test_no_extension_accumulation",
            "test_special_characters_in_filename"
          ],
          "count": 9
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "tempfile",
        "json",
        "ai_whisperer.tools.create_rfc_tool",
        "ai_whisperer.tools.read_rfc_tool",
        "ai_whisperer.tools.move_rfc_tool",
        "ai_whisperer.tools.delete_rfc_tool",
        "ai_whisperer.tools.list_rfcs_tool",
        "ai_whisperer.path_management",
        "re",
        "re",
        "re",
        "re",
        "re"
      ],
      "tested_modules": [
        "ai_whisperer.tools.list_rfcs_tool",
        "ai_whisperer.tools.read_rfc_tool",
        "ai_whisperer.tools.create_rfc_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.tools.move_rfc_tool",
        "ai_whisperer.tools.delete_rfc_tool"
      ],
      "fixtures_used": [
        "temp_workspace"
      ],
      "size": 297,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_codebase_analysis_tools.py",
      "test_classes": [
        {
          "name": "TestAnalyzeLanguagesTool",
          "methods": [
            "test_tool_properties",
            "test_analyze_languages_basic",
            "test_framework_detection",
            "test_exclude_config_files",
            "test_min_files_filter",
            "test_project_type_inference"
          ],
          "count": 6
        },
        {
          "name": "TestFindSimilarCodeTool",
          "methods": [
            "test_find_caching_patterns",
            "test_find_authentication_patterns",
            "test_custom_patterns",
            "test_file_type_filter",
            "test_no_matches",
            "test_context_extraction"
          ],
          "count": 6
        },
        {
          "name": "TestGetProjectStructureTool",
          "methods": [
            "test_basic_structure_analysis",
            "test_important_files_detection",
            "test_project_components",
            "test_directory_tree",
            "test_ignored_directories",
            "test_max_depth_limit",
            "test_file_type_distribution"
          ],
          "count": 7
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "tempfile",
        "ai_whisperer.tools.analyze_languages_tool",
        "ai_whisperer.tools.find_similar_code_tool",
        "ai_whisperer.tools.get_project_structure_tool",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.tools.find_similar_code_tool",
        "ai_whisperer.tools.get_project_structure_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.tools.analyze_languages_tool"
      ],
      "fixtures_used": [
        "similar_code_tool",
        "structure_tool",
        "analyze_tool"
      ],
      "size": 372,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_prompt_rules_removal.py",
      "test_classes": [
        {
          "name": "TestInitialPlanPromptRules",
          "methods": [
            "test_input_hashes_rule_removed",
            "test_task_id_rule_removed"
          ],
          "count": 2
        },
        {
          "name": "TestSubtaskGeneratorPromptRules",
          "methods": [
            "test_subtask_id_rule_removed"
          ],
          "count": 1
        }
      ],
      "test_functions": [
        "test_initial_plan_prompt_exists",
        "test_subtask_generator_prompt_exists"
      ],
      "imports": [
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 87,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_workspace_detection.py",
      "test_classes": [],
      "test_functions": [
        "test_whisper_folder_detected_in_current_dir",
        "test_whisper_folder_detected_in_parent_dir",
        "test_no_whisper_folder_raises_error",
        "test_whisper_folder_stops_at_filesystem_root",
        "test_whisper_folder_with_workspace_config"
      ],
      "imports": [
        "pytest",
        "os",
        "ai_whisperer.workspace_detection",
        "pytest",
        "pytest",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.workspace_detection"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 52,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_postprocessing_fields.py",
      "test_classes": [],
      "test_functions": [
        "test_handle_required_fields"
      ],
      "imports": [
        "pytest",
        "json"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "expected_content"
      ],
      "size": 171,
      "markers": [
        "parametrize"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_tool_management.py",
      "test_classes": [],
      "test_functions": [
        "test_register_and_get_tool",
        "test_get_non_existent_tool",
        "test_register_duplicate_tool",
        "test_get_all_tools",
        "test_get_all_tool_definitions",
        "test_get_all_ai_prompt_instructions",
        "test_get_filtered_tools",
        "test_register_non_aitool"
      ],
      "imports": [
        "pytest",
        "logging",
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.tools.tool_registry"
      ],
      "tested_modules": [
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.tools.tool_registry"
      ],
      "fixtures_used": [
        "ToolRegistry",
        "caplog"
      ],
      "size": 228,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_state_management.py",
      "test_classes": [
        {
          "name": "TestStateManagement",
          "methods": [
            "test_save_and_load_state",
            "test_load_state_file_not_found",
            "test_load_state_corrupted_file",
            "test_save_state_atomicity_failure",
            "test_update_task_status",
            "test_store_task_result",
            "test_get_task_result",
            "test_update_global_state",
            "test_get_global_state",
            "test_initial_state_structure_compliance",
            "test_store_ai_message_interaction_with_usage_info",
            "test_store_user_message_interaction_with_timestamp"
          ],
          "count": 12
        }
      ],
      "test_functions": [],
      "imports": [
        "unittest",
        "json",
        "os",
        "tempfile",
        "pytest",
        "ai_whisperer.state_management",
        "ai_whisperer.state_management",
        "ai_whisperer.context_management"
      ],
      "tested_modules": [
        "ai_whisperer.context_management",
        "ai_whisperer.state_management"
      ],
      "fixtures_used": [
        "mock_os_replace",
        "mock_json_load"
      ],
      "size": 204,
      "markers": [
        "skipif"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_agent_stateless.py",
      "test_classes": [
        {
          "name": "TestAgentWithStatelessAILoop",
          "methods": [
            "test_agent_creation_with_stateless_loop",
            "test_agent_config_validation"
          ],
          "count": 2
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "ai_whisperer.agents.agent",
        "ai_whisperer.agents.config",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "pytest",
        "ai_whisperer.agents.stateless_agent",
        "pytest",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.stateless_agent",
        "pytest",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.stateless_agent"
      ],
      "tested_modules": [
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.agent",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.agents.config"
      ],
      "fixtures_used": [
        "mock_stateless_ai_loop"
      ],
      "size": 293,
      "markers": [
        "asyncio"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_session_manager.py",
      "test_classes": [],
      "test_functions": [
        "test_agent_switching",
        "test_conversation_history_preservation",
        "test_agent_handoff_detection",
        "test_multi_agent_session_state"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.agents.session_manager",
        "ai_whisperer.agents.registry"
      ],
      "tested_modules": [
        "ai_whisperer.agents.registry",
        "ai_whisperer.agents.session_manager"
      ],
      "fixtures_used": [
        "session"
      ],
      "size": 85,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_planner_handler.py",
      "test_classes": [],
      "test_functions": [
        "test_requirement_extraction",
        "test_plan_generation_trigger",
        "test_plan_preview_generation",
        "test_plan_confirmation_flow",
        "test_plan_json_generation"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.agents.planner_handler",
        "ai_whisperer.agents.registry"
      ],
      "tested_modules": [
        "ai_whisperer.agents.registry",
        "ai_whisperer.agents.planner_handler"
      ],
      "fixtures_used": [
        "handler"
      ],
      "size": 67,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_debbie_command.py",
      "test_classes": [
        {
          "name": "TestDebbieCommand",
          "methods": [
            "test_status_command_specific_session",
            "test_status_command_global",
            "test_status_command_monitoring_disabled",
            "test_status_command_session_not_found",
            "test_status_command_detailed",
            "test_analyze_command",
            "test_analyze_command_no_session",
            "test_suggest_command_healthy_session",
            "test_suggest_command_unhealthy_session",
            "test_report_command",
            "test_report_command_poor_health",
            "test_unknown_subcommand",
            "test_observer_import_error",
            "test_parse_arguments",
            "test_context_session_id",
            "test_health_score_indicators"
          ],
          "count": 16
        },
        {
          "name": "TestDebbieCommandIntegration",
          "methods": [
            "test_command_registry_registration"
          ],
          "count": 1
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "ai_whisperer.commands.debbie",
        "ai_whisperer.commands.errors",
        "ai_whisperer.commands.registry"
      ],
      "tested_modules": [
        "ai_whisperer.commands.debbie",
        "ai_whisperer.commands.errors",
        "ai_whisperer.commands.registry"
      ],
      "fixtures_used": [
        "mock_get_observer",
        "mock_analysis_tool_class"
      ],
      "size": 317,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_prompt_optimizer.py",
      "test_classes": [
        {
          "name": "TestPromptOptimizer",
          "methods": [
            "test_multi_tool_optimization",
            "test_single_tool_optimization",
            "test_agent_specific_hints",
            "test_no_optimization_needed",
            "test_analyze_prompt",
            "test_high_tool_count_detection",
            "test_optimize_user_message_function",
            "test_step_indicator_addition",
            "test_preserve_original_meaning"
          ],
          "count": 9
        }
      ],
      "test_functions": [
        "test_model_strategy_detection"
      ],
      "imports": [
        "pytest",
        "ai_whisperer.agents.prompt_optimizer"
      ],
      "tested_modules": [
        "ai_whisperer.agents.prompt_optimizer"
      ],
      "fixtures_used": [
        "expected_strategy"
      ],
      "size": 141,
      "markers": [
        "parametrize"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/test_plan_tools.py",
      "test_classes": [
        {
          "name": "TestCreatePlanFromRFCTool",
          "methods": [
            "test_tool_properties",
            "test_create_plan_from_rfc_basic",
            "test_create_plan_with_short_name",
            "test_create_plan_nonexistent_rfc",
            "test_create_plan_with_model_override"
          ],
          "count": 5
        },
        {
          "name": "TestListPlansTool",
          "methods": [
            "test_list_all_plans",
            "test_list_by_status",
            "test_list_with_limit"
          ],
          "count": 3
        },
        {
          "name": "TestReadPlanTool",
          "methods": [
            "test_read_plan",
            "test_read_nonexistent_plan"
          ],
          "count": 2
        },
        {
          "name": "TestUpdatePlanFromRFCTool",
          "methods": [
            "test_update_plan_from_changed_rfc",
            "test_update_plan_no_changes"
          ],
          "count": 2
        },
        {
          "name": "TestMovePlanTool",
          "methods": [
            "test_move_plan_to_archived",
            "test_move_nonexistent_plan"
          ],
          "count": 2
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "tempfile",
        "hashlib",
        "ai_whisperer.tools.create_plan_from_rfc_tool",
        "ai_whisperer.tools.list_plans_tool",
        "ai_whisperer.tools.read_plan_tool",
        "ai_whisperer.tools.update_plan_from_rfc_tool",
        "ai_whisperer.tools.move_plan_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.ai_service.ai_service",
        "ai_whisperer.ai_service.ai_service",
        "ai_whisperer.ai_service.ai_service",
        "ai_whisperer.ai_service.ai_service"
      ],
      "tested_modules": [
        "ai_whisperer.tools.list_plans_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.ai_service.ai_service",
        "ai_whisperer.tools.update_plan_from_rfc_tool",
        "ai_whisperer.tools.read_plan_tool",
        "ai_whisperer.tools.create_plan_from_rfc_tool",
        "ai_whisperer.tools.move_plan_tool"
      ],
      "fixtures_used": [
        "temp_workspace",
        "update_tool",
        "list_tool",
        "create_tool",
        "temp_workspace_with_plan_to_move",
        "read_tool",
        "temp_workspace_with_modified_rfc",
        "move_tool"
      ],
      "size": 625,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/integration/test_workspace_pathmanager_integration.py",
      "test_classes": [],
      "test_functions": [
        "test_pathmanager_rejects_non_whisper_workspace",
        "test_workspace_config_overrides_pathmanager_defaults",
        "test_pathmanager_uses_whisper_workspace"
      ],
      "imports": [
        "pytest",
        "pytest",
        "os",
        "ai_whisperer.workspace_detection",
        "ai_whisperer.path_management",
        "ai_whisperer.workspace_detection",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.path_management",
        "ai_whisperer.workspace_detection"
      ],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 50,
      "markers": [
        "xfail"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_rfc_plan_bidirectional.py",
      "test_classes": [
        {
          "name": "TestRFCPlanBidirectional",
          "methods": [
            "test_rfc_to_plan_creation_and_linkage",
            "test_rfc_update_triggers_plan_sync",
            "test_plan_archival_workflow",
            "test_plan_deletion_updates_rfc",
            "test_error_handling_missing_rfc",
            "test_error_handling_invalid_plan_content",
            "test_multiple_plans_from_single_rfc"
          ],
          "count": 7
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "tempfile",
        "shutil",
        "hashlib",
        "ai_whisperer.tools.create_rfc_tool",
        "ai_whisperer.tools.update_rfc_tool",
        "ai_whisperer.tools.prepare_plan_from_rfc_tool",
        "ai_whisperer.tools.save_generated_plan_tool",
        "ai_whisperer.tools.update_plan_from_rfc_tool",
        "ai_whisperer.tools.read_plan_tool",
        "ai_whisperer.tools.move_plan_tool",
        "ai_whisperer.tools.delete_plan_tool",
        "ai_whisperer.path_management",
        "re",
        "glob",
        "re",
        "glob",
        "glob",
        "glob"
      ],
      "tested_modules": [
        "ai_whisperer.tools.create_rfc_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.tools.prepare_plan_from_rfc_tool",
        "ai_whisperer.tools.update_plan_from_rfc_tool",
        "ai_whisperer.tools.delete_plan_tool",
        "ai_whisperer.tools.update_rfc_tool",
        "ai_whisperer.tools.read_plan_tool",
        "ai_whisperer.tools.save_generated_plan_tool",
        "ai_whisperer.tools.move_plan_tool"
      ],
      "fixtures_used": [
        "temp_workspace"
      ],
      "size": 439,
      "markers": [],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_run_plan_script.py",
      "test_classes": [],
      "test_functions": [
        "test_run_plan_script"
      ],
      "imports": [
        "pytest",
        "subprocess",
        "os",
        "sys",
        "pytest",
        "tempfile"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 62,
      "markers": [],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_continuation_simple.py",
      "test_classes": [
        {
          "name": "TestContinuationSimple",
          "methods": [
            "test_continuation_strategy_basic",
            "test_should_continue_patterns",
            "test_model_capabilities",
            "test_continuation_depth_limit",
            "test_explicit_continuation_signal"
          ],
          "count": 5
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "ai_whisperer.agents.continuation_strategy",
        "ai_whisperer.model_capabilities"
      ],
      "tested_modules": [
        "ai_whisperer.model_capabilities",
        "ai_whisperer.agents.continuation_strategy"
      ],
      "fixtures_used": [],
      "size": 177,
      "markers": [
        "asyncio"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_continuation_verification.py",
      "test_classes": [
        {
          "name": "TestContinuationVerification",
          "methods": [],
          "count": 0
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "ai_whisperer.model_capabilities",
        "ai_whisperer.agents.continuation_strategy"
      ],
      "tested_modules": [
        "ai_whisperer.model_capabilities",
        "ai_whisperer.agents.continuation_strategy"
      ],
      "fixtures_used": [],
      "size": 231,
      "markers": [
        "asyncio"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_patricia_rfc_plan_integration.py",
      "test_classes": [
        {
          "name": "TestPatriciaRFCToPlanIntegration",
          "methods": [
            "test_batch_script_validation"
          ],
          "count": 1
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "ai_whisperer.batch.script_processor",
        "ai_whisperer.batch.batch_client",
        "ai_whisperer.path_management",
        "ai_whisperer.tools.update_plan_from_rfc_tool"
      ],
      "tested_modules": [
        "ai_whisperer.path_management",
        "ai_whisperer.tools.update_plan_from_rfc_tool",
        "ai_whisperer.batch.script_processor",
        "ai_whisperer.batch.batch_client"
      ],
      "fixtures_used": [
        "tmp_path",
        "batch_script_path"
      ],
      "size": 283,
      "markers": [
        "integration",
        "asyncio"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_session_integration.py",
      "test_classes": [],
      "test_functions": [
        "test_session_integration_placeholder"
      ],
      "imports": [
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 8,
      "markers": [],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_model_compatibility_simple.py",
      "test_classes": [],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "json",
        "os",
        "ai_whisperer.config",
        "ai_whisperer.agents.registry",
        "ai_whisperer.agents.factory",
        "ai_whisperer.ai_service.openrouter_ai_service",
        "ai_whisperer.model_capabilities",
        "traceback"
      ],
      "tested_modules": [
        "ai_whisperer.agents.factory",
        "ai_whisperer.model_capabilities",
        "ai_whisperer.ai_service.openrouter_ai_service",
        "ai_whisperer.config",
        "ai_whisperer.agents.registry"
      ],
      "fixtures_used": [
        "model_name"
      ],
      "size": 424,
      "markers": [
        "parametrize",
        "asyncio"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_context_integration.py",
      "test_classes": [],
      "test_functions": [
        "test_context_lifecycle_creation_usage_persistence_recovery",
        "test_multi_agent_context_isolation",
        "test_context_sharing_and_isolation",
        "test_error_recovery_on_corrupted_file",
        "test_contextmanager_compatibility",
        "test_agentcontextmanager_compatibility",
        "test_thread_safety_of_agent_context"
      ],
      "imports": [
        "os",
        "tempfile",
        "pytest",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.context_management",
        "ai_whisperer.agents.context_manager",
        "pytest",
        "threading"
      ],
      "tested_modules": [
        "ai_whisperer.context_management",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.agents.context_manager"
      ],
      "fixtures_used": [],
      "size": 113,
      "markers": [],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_agent_continuation_integration.py",
      "test_classes": [
        {
          "name": "TestAgentContinuationIntegration",
          "methods": [
            "test_explicit_continuation_signal",
            "test_continuation_safety_limits",
            "test_continuation_context_update"
          ],
          "count": 3
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.config",
        "ai_whisperer.agents.continuation_strategy",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.prompt_system",
        "ai_whisperer.path_management",
        "time"
      ],
      "tested_modules": [
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.path_management",
        "ai_whisperer.agents.continuation_strategy",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.prompt_system",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.agents.config"
      ],
      "fixtures_used": [
        "agent_with_continuation",
        "mock_websocket",
        "prompt_system"
      ],
      "size": 320,
      "markers": [
        "asyncio"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_continuation_progress_tracking.py",
      "test_classes": [
        {
          "name": "TestContinuationProgressTracking",
          "methods": [],
          "count": 0
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "json",
        "ai_whisperer.agents.config",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.continuation_strategy",
        "ai_whisperer.agents.registry",
        "ai_whisperer.context.agent_context"
      ],
      "tested_modules": [
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.continuation_strategy",
        "ai_whisperer.agents.registry",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.agents.config"
      ],
      "fixtures_used": [
        "session_manager",
        "mock_websocket"
      ],
      "size": 263,
      "markers": [
        "asyncio"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_interactive_session.py",
      "test_classes": [],
      "test_functions": [
        "test_interactive_session_persists_after_task",
        "test_graceful_termination_on_double_ctrl_c"
      ],
      "imports": [
        "pytest",
        "time",
        "subprocess",
        "sys"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 68,
      "markers": [],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_batch_mode_e2e.py",
      "test_classes": [],
      "test_functions": [
        "test_batch_mode_e2e"
      ],
      "imports": [
        "os",
        "subprocess",
        "time",
        "pytest",
        "ai_whisperer.config",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.config"
      ],
      "fixtures_used": [
        "monkeypatch"
      ],
      "size": 48,
      "markers": [
        "integration"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_graceful_exit.py",
      "test_classes": [],
      "test_functions": [],
      "imports": [
        "pytest",
        "time"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 88,
      "markers": [
        "asyncio"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_ai_tool_usage.py",
      "test_classes": [],
      "test_functions": [
        "test_ai_read_file_tool_call",
        "test_ai_write_file_tool_call",
        "test_ai_execute_command_tool_call",
        "test_ai_tool_valid_params_execution",
        "test_ai_tool_invalid_params_handling"
      ],
      "imports": [
        "pytest",
        "os",
        "dotenv",
        "json",
        "time",
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.path_management",
        "ai_whisperer.ai_service.openrouter_ai_service",
        "ai_whisperer.tools.tool_registry",
        "ai_whisperer.tools.read_file_tool",
        "ai_whisperer.tools.write_file_tool",
        "ai_whisperer.tools.execute_command_tool",
        "ai_whisperer.exceptions",
        "ai_whisperer.tools.read_file_tool",
        "ai_whisperer.tools.write_file_tool",
        "ai_whisperer.tools.execute_command_tool",
        "pytest",
        "ai_whisperer.exceptions",
        "re"
      ],
      "tested_modules": [
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.path_management",
        "ai_whisperer.tools.write_file_tool",
        "ai_whisperer.ai_service.openrouter_ai_service",
        "ai_whisperer.tools.tool_registry",
        "ai_whisperer.tools.read_file_tool",
        "ai_whisperer.tools.execute_command_tool",
        "ai_whisperer.exceptions"
      ],
      "fixtures_used": [
        "tuple",
        "ToolRegistry",
        "str"
      ],
      "size": 470,
      "markers": [
        "integration"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_plan_error_recovery.py",
      "test_classes": [
        {
          "name": "TestPlanErrorRecovery",
          "methods": [
            "test_prepare_plan_missing_rfc",
            "test_save_plan_invalid_schema",
            "test_save_plan_missing_rfc_reference",
            "test_update_plan_missing_plan",
            "test_delete_plan_without_confirmation",
            "test_concurrent_plan_updates",
            "test_corrupted_plan_file_recovery",
            "test_filesystem_permission_error",
            "test_large_plan_handling"
          ],
          "count": 9
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "tempfile",
        "ai_whisperer.tools.prepare_plan_from_rfc_tool",
        "ai_whisperer.tools.save_generated_plan_tool",
        "ai_whisperer.tools.update_plan_from_rfc_tool",
        "ai_whisperer.tools.delete_plan_tool",
        "ai_whisperer.tools.create_rfc_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.tools.read_plan_tool",
        "os",
        "stat",
        "re"
      ],
      "tested_modules": [
        "ai_whisperer.tools.create_rfc_tool",
        "ai_whisperer.path_management",
        "ai_whisperer.tools.prepare_plan_from_rfc_tool",
        "ai_whisperer.tools.update_plan_from_rfc_tool",
        "ai_whisperer.tools.delete_plan_tool",
        "ai_whisperer.tools.read_plan_tool",
        "ai_whisperer.tools.save_generated_plan_tool"
      ],
      "fixtures_used": [
        "temp_workspace"
      ],
      "size": 364,
      "markers": [
        "xfail"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_runner_plan_ingestion.py",
      "test_classes": [],
      "test_functions": [
        "test_runner_successfully_loads_valid_overview_plan",
        "test_runner_handles_malformed_plan_json",
        "test_runner_handles_plan_with_missing_top_level_field",
        "test_runner_handles_plan_file_not_found",
        "test_runner_handles_subtask_file_not_found",
        "test_runner_handles_subtask_malformed_json",
        "test_runner_handles_subtask_validation_error",
        "test_runner_integration_with_empty_plan_array"
      ],
      "imports": [
        "pytest",
        "json",
        "os",
        "shutil",
        "ai_whisperer.plan_parser",
        "ai_whisperer.json_validator",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.json_validator",
        "ai_whisperer.path_management",
        "ai_whisperer.plan_parser"
      ],
      "fixtures_used": [
        "create_overview_plan_with_subtasks_for_runner",
        "tmp_path"
      ],
      "size": 315,
      "markers": [],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_model_continuation_compatibility.py",
      "test_classes": [],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "json",
        "os",
        "ai_whisperer.config",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.registry",
        "ai_whisperer.prompt_system"
      ],
      "tested_modules": [
        "ai_whisperer.config",
        "ai_whisperer.agents.registry",
        "ai_whisperer.prompt_system",
        "ai_whisperer.agents.stateless_agent"
      ],
      "fixtures_used": [
        "model_name"
      ],
      "size": 436,
      "markers": [
        "parametrize",
        "asyncio"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_agent_jsonrpc_ws.py",
      "test_classes": [],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "websockets",
        "json",
        "ai_whisperer.logging_custom",
        "pytest",
        "time",
        "pytest",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.logging_custom"
      ],
      "fixtures_used": [],
      "size": 79,
      "markers": [
        "xfail",
        "asyncio"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_project_pathmanager_integration.py",
      "test_classes": [
        {
          "name": "TestProjectPathManagerIntegration",
          "methods": [
            "test_project_creation_initializes_pathmanager",
            "test_project_with_custom_output_path",
            "test_update_project_output_path",
            "test_project_context_manager_preserves_pathmanager",
            "test_project_json_integration",
            "test_path_restriction_with_output_path"
          ],
          "count": 6
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "tempfile",
        "shutil",
        "ai_whisperer.path_management",
        "pytest"
      ],
      "tested_modules": [
        "ai_whisperer.path_management"
      ],
      "fixtures_used": [
        "sample_project_dir",
        "sample_output_dir"
      ],
      "size": 200,
      "markers": [
        "xfail"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_conversation_persistence.py",
      "test_classes": [
        {
          "name": "TestConversationPersistence",
          "methods": [],
          "count": 0
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "json",
        "os",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.config",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.context.context_manager",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.path_management",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.context.context_manager",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.agents.config"
      ],
      "fixtures_used": [
        "session_with_agents"
      ],
      "size": 357,
      "markers": [
        "asyncio"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_project_settings_persistence.py",
      "test_classes": [],
      "test_functions": [
        "test_project_settings_persistence"
      ],
      "imports": [
        "os",
        "json",
        "tempfile",
        "shutil",
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 49,
      "markers": [],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/test_agent_continuation_fix.py",
      "test_classes": [
        {
          "name": "TestAgentContinuationFix",
          "methods": [
            "test_agent_gets_continuation_strategy_from_config"
          ],
          "count": 1
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "asyncio",
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.config",
        "ai_whisperer.agents.continuation_strategy",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.ai_loop.stateless_ai_loop"
      ],
      "tested_modules": [
        "ai_whisperer.agents.stateless_agent",
        "ai_whisperer.agents.continuation_strategy",
        "ai_whisperer.ai_loop.stateless_ai_loop",
        "ai_whisperer.context.agent_context",
        "ai_whisperer.agents.config"
      ],
      "fixtures_used": [
        "session_with_continuation",
        "single_tool_agent_config"
      ],
      "size": 148,
      "markers": [
        "asyncio"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/interactive_server/test_notifications_streaming.py",
      "test_classes": [],
      "test_functions": [
        "test_server_to_client_session_status_notification",
        "test_async_notification_streaming"
      ],
      "imports": [
        "sys",
        "os",
        "json",
        "pytest",
        "threading",
        "time",
        "importlib.util",
        "threading"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "interactive_app"
      ],
      "size": 182,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_tool_result_handler.py",
      "test_classes": [],
      "test_functions": [
        "test_tool_result_flow_real"
      ],
      "imports": [
        "pytest",
        "json",
        "os",
        "importlib.util",
        "os",
        "threading",
        "ai_whisperer.tools.tool_registry",
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.ai_service.ai_service",
        "ai_whisperer.logging_custom"
      ],
      "tested_modules": [
        "ai_whisperer.tools.base_tool",
        "ai_whisperer.ai_service.ai_service",
        "ai_whisperer.logging_custom",
        "ai_whisperer.tools.tool_registry"
      ],
      "fixtures_used": [
        "interactive_app"
      ],
      "size": 127,
      "markers": [
        "skipif"
      ],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_interactive_message_models.py",
      "test_classes": [],
      "test_functions": [
        "test_start_session_request",
        "test_start_session_response",
        "test_send_user_message_request",
        "test_send_user_message_response",
        "test_ai_message_chunk_notification",
        "test_session_status_notification",
        "test_stop_session_request",
        "test_stop_session_response",
        "test_provide_tool_result_request",
        "test_provide_tool_result_response"
      ],
      "imports": [
        "pytest",
        "sys",
        "os"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 54,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_real_session_handlers.py",
      "test_classes": [],
      "test_functions": [
        "test_start_session_real",
        "test_send_user_message_real",
        "test_stop_session_real",
        "test_error_event_notification"
      ],
      "imports": [
        "pytest",
        "json",
        "concurrent.futures",
        "threading",
        "time",
        "os",
        "importlib.util",
        "os"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "interactive_app"
      ],
      "size": 352,
      "markers": [
        "skipif"
      ],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_message_models.py",
      "test_classes": [],
      "test_functions": [
        "test_echo_params_valid",
        "test_echo_params_invalid",
        "test_add_params_valid",
        "test_add_params_invalid"
      ],
      "imports": [
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 25,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_jsonrpc_routing.py",
      "test_classes": [],
      "test_functions": [
        "test_jsonrpc_routing_to_handlers"
      ],
      "imports": [
        "pytest",
        "json",
        "importlib.util",
        "os"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "interactive_app"
      ],
      "size": 41,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_jsonrpc_notifications.py",
      "test_classes": [],
      "test_functions": [
        "test_jsonrpc_notification_no_response",
        "test_jsonrpc_response_for_request"
      ],
      "imports": [
        "pytest",
        "json",
        "threading",
        "time",
        "importlib.util",
        "os"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "interactive_app"
      ],
      "size": 47,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_jsonrpc_protocol_more.py",
      "test_classes": [],
      "test_functions": [
        "test_jsonrpc_method_not_found",
        "test_jsonrpc_parse_error",
        "test_jsonrpc_invalid_params"
      ],
      "imports": [
        "pytest",
        "json",
        "importlib.util",
        "os"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "interactive_app"
      ],
      "size": 47,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_integration_end_to_end.py",
      "test_classes": [],
      "test_functions": [
        "test_end_to_end_websocket_jsonrpc",
        "test_invalid_jsonrpc_request"
      ],
      "imports": [
        "sys",
        "os",
        "json",
        "pytest",
        "asyncio",
        "signal",
        "importlib.util",
        "pytest",
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "interactive_app"
      ],
      "size": 110,
      "markers": [],
      "test_type": "integration"
    },
    {
      "path": "tests/interactive_server/test_ai_service_timeout.py",
      "test_classes": [],
      "test_functions": [],
      "imports": [
        "asyncio",
        "json",
        "pytest",
        "websockets",
        "time",
        "os",
        "ai_whisperer.logging_custom",
        "pytest",
        "pytest",
        "ai_whisperer.ai_loop.ai_config"
      ],
      "tested_modules": [
        "ai_whisperer.ai_loop.ai_config",
        "ai_whisperer.logging_custom"
      ],
      "fixtures_used": [
        "start_interactive_server"
      ],
      "size": 131,
      "markers": [
        "xfail",
        "performance",
        "asyncio"
      ],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_long_running_session.py",
      "test_classes": [],
      "test_functions": [
        "test_long_running_session_stability"
      ],
      "imports": [
        "sys",
        "os",
        "json",
        "pytest",
        "threading",
        "importlib.util"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "interactive_app"
      ],
      "size": 116,
      "markers": [
        "performance"
      ],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_openrouter_shutdown_patch.py",
      "test_classes": [],
      "test_functions": [],
      "imports": [
        "pytest",
        "threading",
        "ai_whisperer.ai_service.openrouter_ai_service"
      ],
      "tested_modules": [
        "ai_whisperer.ai_service.openrouter_ai_service"
      ],
      "fixtures_used": [],
      "size": 22,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_websocket_endpoint.py",
      "test_classes": [],
      "test_functions": [
        "test_websocket_route_exists",
        "test_websocket_route_exists",
        "test_websocket_multiple_clients",
        "test_websocket_lifecycle"
      ],
      "imports": [
        "pytest",
        "asyncio",
        "os",
        "importlib.util",
        "sys",
        "os",
        "json",
        "importlib.util",
        "json",
        "json"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "interactive_app"
      ],
      "size": 109,
      "markers": [
        "skipif"
      ],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_websocket_stress.py",
      "test_classes": [],
      "test_functions": [
        "test_websocket_stress"
      ],
      "imports": [
        "pytest",
        "threading",
        "json",
        "time"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 219,
      "markers": [
        "timeout"
      ],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_websocket_stress_subprocess.py",
      "test_classes": [],
      "test_functions": [
        "test_websocket_stress_subprocess"
      ],
      "imports": [
        "subprocess",
        "sys",
        "os",
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 18,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_interactive_message_models_roundtrip.py",
      "test_classes": [],
      "test_functions": [
        "test_start_session_request_roundtrip",
        "test_start_session_response_roundtrip",
        "test_send_user_message_request_roundtrip",
        "test_send_user_message_response_roundtrip",
        "test_ai_message_chunk_notification_roundtrip",
        "test_session_status_notification_roundtrip",
        "test_stop_session_request_roundtrip",
        "test_stop_session_response_roundtrip",
        "test_provide_tool_result_request_roundtrip",
        "test_provide_tool_result_response_roundtrip"
      ],
      "imports": [
        "sys",
        "os",
        "json",
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 84,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_interactive_client_script.py",
      "test_classes": [],
      "test_functions": [
        "test_interactive_client_script"
      ],
      "imports": [
        "subprocess",
        "sys",
        "os",
        "pathlib",
        "pytest",
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "tmp_path"
      ],
      "size": 48,
      "markers": [
        "parametrize"
      ],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_jsonrpc_protocol.py",
      "test_classes": [],
      "test_functions": [
        "test_jsonrpc_request_response",
        "test_jsonrpc_invalid_request",
        "test_jsonrpc_notification"
      ],
      "imports": [
        "pytest",
        "json",
        "importlib.util",
        "os",
        "time",
        "threading"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "interactive_app"
      ],
      "size": 65,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_mocked_ailoop.py",
      "test_classes": [],
      "test_functions": [
        "test_tool_call_and_result_flow",
        "test_start_session_mocked",
        "test_send_user_message_mocked",
        "test_ai_message_chunk_notification_stream"
      ],
      "imports": [
        "sys",
        "os",
        "json",
        "pytest",
        "signal",
        "threading",
        "time",
        "importlib.util",
        "threading",
        "threading",
        "threading",
        "sys",
        "ai_whisperer.ai_service.ai_service"
      ],
      "tested_modules": [
        "ai_whisperer.ai_service.ai_service"
      ],
      "fixtures_used": [
        "interactive_app"
      ],
      "size": 273,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_project_setup.py",
      "test_classes": [],
      "test_functions": [
        "test_interactive_server_directory_exists",
        "test_main_entrypoint_exists",
        "test_main_entrypoint_importable"
      ],
      "imports": [
        "os",
        "importlib.util",
        "pytest",
        "pytest",
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 26,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_memory_usage_under_load.py",
      "test_classes": [],
      "test_functions": [],
      "imports": [
        "asyncio",
        "json",
        "pytest",
        "websockets",
        "tracemalloc",
        "threading",
        "pytest",
        "pytest"
      ],
      "tested_modules": [],
      "fixtures_used": [
        "start_interactive_server"
      ],
      "size": 119,
      "markers": [
        "xfail",
        "performance",
        "asyncio"
      ],
      "test_type": "server"
    },
    {
      "path": "tests/interactive_server/test_session_manager.py",
      "test_classes": [],
      "test_functions": [],
      "imports": [],
      "tested_modules": [],
      "fixtures_used": [],
      "size": 6,
      "markers": [],
      "test_type": "server"
    },
    {
      "path": "tests/unit/batch_mode/test_script_parser_security.py",
      "test_classes": [
        {
          "name": "TestScriptParserSecurity",
          "methods": [
            "test_enforce_workspace_boundaries",
            "test_prevent_symlink_escape",
            "test_prevent_command_injection_in_paths",
            "test_prevent_command_injection_in_content",
            "test_enforce_memory_limits",
            "test_enforce_parsing_timeout",
            "test_sanitize_file_names",
            "test_validate_encoding",
            "test_respect_file_permissions",
            "test_prevent_zip_bomb"
          ],
          "count": 10
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "os",
        "sys",
        "tempfile",
        "ai_whisperer.tools.script_parser_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.script_parser_tool"
      ],
      "fixtures_used": [
        "tmp_path",
        "parser_tool",
        "workspace_path"
      ],
      "size": 257,
      "markers": [
        "skip",
        "skipif"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/batch_mode/test_script_parser_tool.py",
      "test_classes": [
        {
          "name": "TestScriptParserTool",
          "methods": [
            "test_script_parser_tool_creation",
            "test_script_parser_tool_has_required_methods",
            "test_detect_json_format",
            "test_detect_yaml_format",
            "test_detect_text_format",
            "test_parse_valid_json_script",
            "test_parse_malformed_json",
            "test_parse_valid_yaml_script",
            "test_parse_malformed_yaml",
            "test_parse_valid_text_script",
            "test_text_parser_skips_comments_and_empty_lines",
            "test_validate_script_structure",
            "test_prevent_path_traversal",
            "test_file_size_limit",
            "test_validate_file_extension",
            "test_execute_method_with_file_path",
            "test_execute_method_with_missing_file",
            "test_execute_method_validation_errors"
          ],
          "count": 18
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "yaml",
        "ai_whisperer.tools.script_parser_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.script_parser_tool"
      ],
      "fixtures_used": [
        "parser_tool",
        "sample_yaml_script",
        "sample_text_script",
        "tmp_path",
        "sample_json_script"
      ],
      "size": 258,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/batch_mode/test_debbie_prompt_system.py",
      "test_classes": [
        {
          "name": "TestDebbiePromptSystem",
          "methods": [
            "test_debbie_prompt_file_exists",
            "test_debbie_prompt_contains_batch_instructions",
            "test_debbie_prompt_retains_debugging_instructions",
            "test_debbie_prompt_structure_is_valid",
            "test_debbie_prompt_mentions_dual_role",
            "test_prompt_loader_can_load_debbie_prompt"
          ],
          "count": 6
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "os",
        "ai_whisperer.prompt_system",
        "ai_whisperer.agents.registry",
        "ai_whisperer.path_management",
        "ai_whisperer.path_management",
        "ai_whisperer.path_management",
        "ai_whisperer.path_management",
        "ai_whisperer.path_management",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.agents.registry",
        "ai_whisperer.path_management",
        "ai_whisperer.prompt_system"
      ],
      "fixtures_used": [
        "debbie_agent"
      ],
      "size": 147,
      "markers": [
        "flaky",
        "skipif"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/batch_mode/test_batch_command_tool.py",
      "test_classes": [
        {
          "name": "TestBatchCommandTool",
          "methods": [
            "test_batch_command_tool_creation",
            "test_batch_command_tool_has_required_methods",
            "test_interpret_list_files_command",
            "test_interpret_read_file_command",
            "test_interpret_create_file_command",
            "test_interpret_switch_agent_command",
            "test_interpret_ambiguous_command",
            "test_execute_json_script",
            "test_execute_text_script",
            "test_execute_with_failed_step",
            "test_execute_with_stop_on_error",
            "test_tool_registry_not_set",
            "test_tool_not_found_in_registry",
            "test_execution_with_context",
            "test_parameter_interpolation",
            "test_progress_callback",
            "test_dry_run_execution",
            "test_validate_before_execution"
          ],
          "count": 18
        },
        {
          "name": "TestCommandInterpreter",
          "methods": [
            "test_command_patterns",
            "test_extract_quoted_content",
            "test_path_extraction",
            "test_agent_name_extraction",
            "test_case_insensitive_matching",
            "test_handle_extra_whitespace"
          ],
          "count": 6
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "ai_whisperer.tools.batch_command_tool",
        "ai_whisperer.tools.script_parser_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.batch_command_tool",
        "ai_whisperer.tools.script_parser_tool"
      ],
      "fixtures_used": [
        "interpreter",
        "command_tool",
        "mock_tool_registry"
      ],
      "size": 501,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/batch_mode/test_script_parser_validation.py",
      "test_classes": [
        {
          "name": "TestScriptParserValidation",
          "methods": [
            "test_validate_allowed_actions",
            "test_reject_dangerous_actions",
            "test_validate_required_parameters",
            "test_validate_parameter_types",
            "test_validate_safe_paths",
            "test_reject_unsafe_paths",
            "test_validate_content_size",
            "test_validate_no_script_injection",
            "test_validate_step_count_limit",
            "test_validate_no_recursive_scripts",
            "test_validate_json_specific_rules",
            "test_validate_yaml_specific_rules",
            "test_validate_text_specific_rules"
          ],
          "count": 13
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "yaml",
        "ai_whisperer.tools.script_parser_tool"
      ],
      "tested_modules": [
        "ai_whisperer.tools.script_parser_tool"
      ],
      "fixtures_used": [
        "parser_tool"
      ],
      "size": 255,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/batch_mode/test_debbie_agent_config.py",
      "test_classes": [
        {
          "name": "TestDebbieAgentConfig",
          "methods": [
            "test_debbie_agent_exists_in_config",
            "test_debbie_agent_has_required_properties",
            "test_debbie_agent_role_includes_batch_processor",
            "test_debbie_agent_has_batch_tools",
            "test_debbie_agent_prompt_supports_batch_mode",
            "test_debbie_agent_dual_role_configuration"
          ],
          "count": 6
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "ai_whisperer.agents.registry"
      ],
      "tested_modules": [
        "ai_whisperer.agents.registry"
      ],
      "fixtures_used": [
        "debbie_agent"
      ],
      "size": 74,
      "markers": [],
      "test_type": "unit"
    },
    {
      "path": "tests/unit/batch_mode/test_batch_command_performance.py",
      "test_classes": [
        {
          "name": "TestBatchCommandPerformance",
          "methods": [
            "test_execution_overhead",
            "test_parallel_vs_sequential",
            "test_memory_usage_large_scripts",
            "test_progress_callback_overhead",
            "test_dry_run_performance",
            "test_error_handling_performance",
            "test_context_passing_overhead"
          ],
          "count": 7
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "time",
        "ai_whisperer.tools.batch_command_tool",
        "ai_whisperer.tools.script_parser_tool",
        "os",
        "psutil"
      ],
      "tested_modules": [
        "ai_whisperer.tools.batch_command_tool",
        "ai_whisperer.tools.script_parser_tool"
      ],
      "fixtures_used": [
        "slow_tool_registry",
        "fast_tool_registry"
      ],
      "size": 281,
      "markers": [
        "skip",
        "xfail",
        "performance"
      ],
      "test_type": "unit"
    },
    {
      "path": "tests/integration/batch_mode/test_debbie_agent_integration.py",
      "test_classes": [
        {
          "name": "TestDebbieAgentIntegration",
          "methods": [
            "test_debbie_loads_with_all_configurations",
            "test_debbie_agent_list_shows_dual_role",
            "test_debbie_continuation_config_includes_batch",
            "test_debbie_capabilities_include_batch_processing"
          ],
          "count": 4
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "os",
        "ai_whisperer.agents.registry",
        "ai_whisperer.path_management",
        "ai_whisperer.path_management"
      ],
      "tested_modules": [
        "ai_whisperer.agents.registry",
        "ai_whisperer.path_management"
      ],
      "fixtures_used": [
        "agent_registry"
      ],
      "size": 106,
      "markers": [
        "flaky",
        "skipif"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/batch_mode/test_batch_performance.py",
      "test_classes": [
        {
          "name": "TestBatchModePerformance",
          "methods": [
            "test_large_script_parsing_performance",
            "test_large_script_execution_performance",
            "test_natural_language_interpretation_performance",
            "test_context_passing_performance",
            "test_error_handling_performance",
            "test_memory_usage_large_scripts"
          ],
          "count": 6
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "time",
        "tempfile",
        "os",
        "ai_whisperer.tools.script_parser_tool",
        "ai_whisperer.tools.batch_command_tool",
        "ai_whisperer.tools.tool_registry",
        "ai_whisperer.tools.script_parser_tool",
        "ai_whisperer.tools.script_parser_tool",
        "ai_whisperer.tools.script_parser_tool",
        "psutil",
        "os"
      ],
      "tested_modules": [
        "ai_whisperer.tools.batch_command_tool",
        "ai_whisperer.tools.script_parser_tool",
        "ai_whisperer.tools.tool_registry"
      ],
      "fixtures_used": [
        "command_tool",
        "parser_tool"
      ],
      "size": 320,
      "markers": [
        "skip",
        "performance",
        "skipif"
      ],
      "test_type": "integration"
    },
    {
      "path": "tests/integration/batch_mode/test_batch_script_execution.py",
      "test_classes": [
        {
          "name": "TestBatchScriptIntegration",
          "methods": [
            "test_json_script_end_to_end",
            "test_yaml_script_end_to_end",
            "test_text_script_end_to_end",
            "test_parsing_error_handling",
            "test_execution_error_handling",
            "test_stop_on_error_mode",
            "test_context_passing_between_steps",
            "test_progress_tracking",
            "test_security_validation_prevents_execution",
            "test_dry_run_mode",
            "test_parameter_interpolation"
          ],
          "count": 11
        }
      ],
      "test_functions": [],
      "imports": [
        "pytest",
        "json",
        "yaml",
        "tempfile",
        "ai_whisperer.tools.script_parser_tool",
        "ai_whisperer.tools.batch_command_tool",
        "ai_whisperer.tools.tool_registry"
      ],
      "tested_modules": [
        "ai_whisperer.tools.batch_command_tool",
        "ai_whisperer.tools.script_parser_tool",
        "ai_whisperer.tools.tool_registry"
      ],
      "fixtures_used": [
        "sample_workspace"
      ],
      "size": 393,
      "markers": [],
      "test_type": "integration"
    }
  ],
  "summary": {
    "total_files": 157,
    "total_test_classes": 158,
    "total_test_methods": 812,
    "total_test_functions": 392,
    "by_type": {
      "other": 5,
      "performance": 1,
      "unit": 103,
      "integration": 27,
      "server": 21
    },
    "by_marker": {
      "xfail": 13,
      "asyncio": 29,
      "parametrize": 8,
      "skipif": 13,
      "skip": 5,
      "flaky": 3,
      "performance": 6,
      "integration": 4,
      "timeout": 1
    },
    "tested_modules": [
      "ai_whisperer",
      "ai_whisperer.agents.agent",
      "ai_whisperer.agents.agent_communication",
      "ai_whisperer.agents.agent_e_exceptions",
      "ai_whisperer.agents.agent_e_handler",
      "ai_whisperer.agents.config",
      "ai_whisperer.agents.context_manager",
      "ai_whisperer.agents.continuation_strategy",
      "ai_whisperer.agents.decomposed_task",
      "ai_whisperer.agents.external_adapters",
      "ai_whisperer.agents.external_agent_result",
      "ai_whisperer.agents.factory",
      "ai_whisperer.agents.mailbox",
      "ai_whisperer.agents.planner_handler",
      "ai_whisperer.agents.planner_tools",
      "ai_whisperer.agents.prompt_optimizer",
      "ai_whisperer.agents.registry",
      "ai_whisperer.agents.session_manager",
      "ai_whisperer.agents.stateless_agent",
      "ai_whisperer.agents.task_decomposer",
      "ai_whisperer.ai_loop.ai_config",
      "ai_whisperer.ai_loop.stateless_ai_loop",
      "ai_whisperer.ai_service.ai_service",
      "ai_whisperer.ai_service.openrouter_ai_service",
      "ai_whisperer.ai_service.tool_calling",
      "ai_whisperer.batch.batch_client",
      "ai_whisperer.batch.debbie_integration",
      "ai_whisperer.batch.monitoring",
      "ai_whisperer.batch.script_processor",
      "ai_whisperer.batch.websocket_interceptor",
      "ai_whisperer.commands",
      "ai_whisperer.commands.debbie",
      "ai_whisperer.commands.echo",
      "ai_whisperer.commands.errors",
      "ai_whisperer.commands.registry",
      "ai_whisperer.commands.status",
      "ai_whisperer.config",
      "ai_whisperer.context.agent_context",
      "ai_whisperer.context.context_item",
      "ai_whisperer.context.context_manager",
      "ai_whisperer.context.provider",
      "ai_whisperer.context_management",
      "ai_whisperer.exceptions",
      "ai_whisperer.json_validator",
      "ai_whisperer.logging_custom",
      "ai_whisperer.model_capabilities",
      "ai_whisperer.path_management",
      "ai_whisperer.plan_parser",
      "ai_whisperer.processing",
      "ai_whisperer.prompt_system",
      "ai_whisperer.state_management",
      "ai_whisperer.tools.analyze_languages_tool",
      "ai_whisperer.tools.base_tool",
      "ai_whisperer.tools.batch_command_tool",
      "ai_whisperer.tools.create_plan_from_rfc_tool",
      "ai_whisperer.tools.create_rfc_tool",
      "ai_whisperer.tools.delete_plan_tool",
      "ai_whisperer.tools.delete_rfc_tool",
      "ai_whisperer.tools.execute_command_tool",
      "ai_whisperer.tools.fetch_url_tool",
      "ai_whisperer.tools.find_pattern_tool",
      "ai_whisperer.tools.find_similar_code_tool",
      "ai_whisperer.tools.get_file_content_tool",
      "ai_whisperer.tools.get_project_structure_tool",
      "ai_whisperer.tools.list_directory_tool",
      "ai_whisperer.tools.list_plans_tool",
      "ai_whisperer.tools.list_rfcs_tool",
      "ai_whisperer.tools.monitoring_control_tool",
      "ai_whisperer.tools.move_plan_tool",
      "ai_whisperer.tools.move_rfc_tool",
      "ai_whisperer.tools.prepare_plan_from_rfc_tool",
      "ai_whisperer.tools.python_ast_json_tool",
      "ai_whisperer.tools.read_file_tool",
      "ai_whisperer.tools.read_plan_tool",
      "ai_whisperer.tools.read_rfc_tool",
      "ai_whisperer.tools.save_generated_plan_tool",
      "ai_whisperer.tools.script_parser_tool",
      "ai_whisperer.tools.search_files_tool",
      "ai_whisperer.tools.session_analysis_tool",
      "ai_whisperer.tools.session_health_tool",
      "ai_whisperer.tools.tool_registration",
      "ai_whisperer.tools.tool_registry",
      "ai_whisperer.tools.tool_set",
      "ai_whisperer.tools.tool_usage_logging",
      "ai_whisperer.tools.update_plan_from_rfc_tool",
      "ai_whisperer.tools.update_rfc_tool",
      "ai_whisperer.tools.web_search_tool",
      "ai_whisperer.tools.workspace_stats_tool",
      "ai_whisperer.tools.write_file_tool",
      "ai_whisperer.utils",
      "ai_whisperer.workspace_detection"
    ]
  }
}