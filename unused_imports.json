{
  "ai_whisperer/model_info_provider.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "load_config",
      "ai_whisperer.core.config.load_config"
    ]
  ],
  "ai_whisperer/model_capabilities.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ]
  ],
  "ai_whisperer/user_message_level.py": [
    [
      "Enum",
      "enum.Enum"
    ]
  ],
  "ai_whisperer/tools/delete_plan_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/message_injector_tool.py": [
    [
      "json",
      "json"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Union",
      "typing.Union"
    ],
    [
      "Enum",
      "enum.Enum"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/update_rfc_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/read_rfc_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/read_plan_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/write_file_tool.py": [
    [
      "Any",
      "typing.Any"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ],
    [
      "UserMessageLevel",
      "ai_whisperer.user_message_level.UserMessageLevel"
    ]
  ],
  "ai_whisperer/tools/find_pattern_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Tuple",
      "typing.Tuple"
    ],
    [
      "asyncio",
      "asyncio"
    ],
    [
      "os",
      "os"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ],
    [
      "PathManager",
      "ai_whisperer.utils.path.PathManager"
    ]
  ],
  "ai_whisperer/tools/validate_external_agent_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.services.agents.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/reply_mail_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "BaseTool",
      "ai_whisperer.tools.base_tool.BaseTool"
    ]
  ],
  "ai_whisperer/tools/analyze_languages_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Set",
      "typing.Set"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/find_similar_code_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Tuple",
      "typing.Tuple"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/save_generated_plan_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.services.agents.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/move_plan_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/prepare_plan_from_rfc_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.services.agents.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/tool_usage_logging.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ],
    [
      "Agent",
      "ai_whisperer.services.agents.registry.Agent"
    ]
  ],
  "ai_whisperer/tools/monitoring_control_tool.py": [
    [
      "json",
      "json"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/base_tool.py": [
    [
      "ABC",
      "abc.ABC"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ]
  ],
  "ai_whisperer/tools/workspace_validator_tool.py": [
    [
      "json",
      "json"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Tuple",
      "typing.Tuple"
    ],
    [
      "Enum",
      "enum.Enum"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/check_mail_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "BaseTool",
      "ai_whisperer.tools.base_tool.BaseTool"
    ]
  ],
  "ai_whisperer/tools/search_files_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/list_rfcs_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/create_rfc_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ],
    [
      "FileRestrictionError",
      "ai_whisperer.core.exceptions.FileRestrictionError"
    ]
  ],
  "ai_whisperer/tools/session_inspector_tool.py": [
    [
      "json",
      "json"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/move_rfc_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "shutil",
      "shutil"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/delete_rfc_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/session_health_tool.py": [
    [
      "json",
      "json"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "datetime",
      "datetime.datetime"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/list_plans_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "datetime",
      "datetime.datetime"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/list_directory_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/workspace_stats_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Tuple",
      "typing.Tuple"
    ],
    [
      "timedelta",
      "datetime.timedelta"
    ],
    [
      "os",
      "os"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ],
    [
      "PathManager",
      "ai_whisperer.utils.path.PathManager"
    ]
  ],
  "ai_whisperer/tools/web_search_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/session_analysis_tool.py": [
    [
      "json",
      "json"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "timedelta",
      "datetime.timedelta"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/create_plan_from_rfc_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ],
    [
      "FileRestrictionError",
      "ai_whisperer.core.exceptions.FileRestrictionError"
    ],
    [
      "load_config",
      "ai_whisperer.core.config.load_config"
    ]
  ],
  "ai_whisperer/tools/send_mail_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "BaseTool",
      "ai_whisperer.tools.base_tool.BaseTool"
    ]
  ],
  "ai_whisperer/tools/execute_command_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.services.agents.base_tool.AITool"
    ],
    [
      "asyncio",
      "asyncio"
    ]
  ],
  "ai_whisperer/tools/read_file_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/update_plan_from_rfc_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/parse_external_result_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.services.agents.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/get_file_content_tool.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/get_project_structure_tool.py": [
    [
      "os",
      "os"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Tuple",
      "typing.Tuple"
    ],
    [
      "AITool",
      "ai_whisperer.tools.base_tool.AITool"
    ]
  ],
  "ai_whisperer/tools/tool_registration.py": [
    [
      "Optional",
      "typing.Optional"
    ]
  ],
  "ai_whisperer/agents/__init__.py": [
    [
      "Agent",
      "ai_whisperer.services.agents.registry.Agent"
    ],
    [
      "AgentRegistry",
      "ai_whisperer.services.agents.registry.AgentRegistry"
    ],
    [
      "StatelessAgent",
      "ai_whisperer.services.agents.stateless.StatelessAgent"
    ],
    [
      "AgentConfig",
      "ai_whisperer.services.agents.config.AgentConfig"
    ],
    [
      "AgentFactory",
      "ai_whisperer.services.agents.factory.AgentFactory"
    ]
  ],
  "ai_whisperer/context/context_manager.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Tuple",
      "typing.Tuple"
    ],
    [
      "PathManager",
      "ai_whisperer.utils.path.PathManager"
    ]
  ],
  "ai_whisperer/context/provider.py": [
    [
      "ABC",
      "abc.ABC"
    ]
  ],
  "ai_whisperer/context/__init__.py": [
    [
      "ContextItem",
      "context_item.ContextItem"
    ],
    [
      "AgentContextManager",
      "ai_whisperer.services.agents.context_manager.AgentContextManager"
    ]
  ],
  "ai_whisperer/context/context_item.py": [
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Literal",
      "typing.Literal"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Tuple",
      "typing.Tuple"
    ]
  ],
  "ai_whisperer/interfaces/cli/batch.py": [
    [
      "sys",
      "sys"
    ],
    [
      "BaseCliCommand",
      "ai_whisperer.interfaces.cli.commands.BaseCliCommand"
    ],
    [
      "WorkspaceNotFoundError",
      "ai_whisperer.utils.workspace.WorkspaceNotFoundError"
    ]
  ],
  "ai_whisperer/interfaces/cli/main.py": [
    [
      "Path",
      "pathlib.Path"
    ],
    [
      "ConfigError",
      "ai_whisperer.core.exceptions.ConfigError"
    ],
    [
      "BaseCliCommand",
      "ai_whisperer.interfaces.cli.commands.BaseCliCommand"
    ],
    [
      "PathManager",
      "ai_whisperer.utils.path.PathManager"
    ]
  ],
  "ai_whisperer/interfaces/cli/commands/base.py": [
    [
      "ABC",
      "abc.ABC"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Dict",
      "typing.Dict"
    ]
  ],
  "ai_whisperer/interfaces/cli/commands/debbie.py": [
    [
      "Any",
      "typing.Any"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "json",
      "json"
    ]
  ],
  "ai_whisperer/interfaces/cli/commands/status.py": [
    [
      "__version__",
      "ai_whisperer.version.__version__"
    ]
  ],
  "ai_whisperer/interfaces/cli/commands/registry.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Type",
      "typing.Type"
    ]
  ],
  "ai_whisperer/interfaces/cli/commands/agent.py": [
    [
      "Any",
      "typing.Any"
    ],
    [
      "Dict",
      "typing.Dict"
    ]
  ],
  "ai_whisperer/interfaces/cli/commands/args.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Any",
      "typing.Any"
    ]
  ],
  "ai_whisperer/interfaces/cli/commands/__init__.py": [
    [
      "BaseCliCommand",
      "ai_whisperer.interfaces.cli.commands.base.BaseCliCommand"
    ]
  ],
  "ai_whisperer/services/agents/context_manager.py": [
    [
      "List",
      "typing.List"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Path",
      "pathlib.Path"
    ],
    [
      "Agent",
      "ai_whisperer.services.agents.registry.Agent"
    ],
    [
      "PromptSystem",
      "ai_whisperer.prompt_system.PromptSystem"
    ]
  ],
  "ai_whisperer/services/agents/stateless.py": [
    [
      "Any",
      "typing.Any"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Callable",
      "typing.Callable"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AgentConfig",
      "ai_whisperer.services.agents.config.AgentConfig"
    ],
    [
      "AgentContext",
      "ai_whisperer.context.agent_context.AgentContext"
    ],
    [
      "StatelessAILoop",
      "ai_whisperer.services.execution.ai_loop.StatelessAILoop"
    ]
  ],
  "ai_whisperer/services/agents/session_manager.py": [
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "AgentRegistry",
      "ai_whisperer.services.agents.registry.AgentRegistry"
    ],
    [
      "BaseAgentHandler",
      "ai_whisperer.services.agents.base.BaseAgentHandler"
    ]
  ],
  "ai_whisperer/services/agents/base.py": [
    [
      "ABC",
      "abc.ABC"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Agent",
      "ai_whisperer.services.agents.registry.Agent"
    ]
  ],
  "ai_whisperer/services/agents/registry.py": [
    [
      "List",
      "typing.List"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Path",
      "pathlib.Path"
    ]
  ],
  "ai_whisperer/services/execution/tool_call_accumulator.py": [
    [
      "json",
      "json"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ]
  ],
  "ai_whisperer/services/execution/ai_config.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ]
  ],
  "ai_whisperer/extensions/monitoring/debbie_logger.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Callable",
      "typing.Callable"
    ],
    [
      "Enum",
      "enum.Enum"
    ]
  ],
  "ai_whisperer/extensions/batch/websocket_client.py": [
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ]
  ],
  "ai_whisperer/extensions/batch/script_processor.py": [
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ]
  ],
  "ai_whisperer/extensions/batch/debbie_integration.py": [
    [
      "asyncio",
      "asyncio"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "AnomalyAlert",
      "ai_whisperer.extensions.batch.monitoring.AnomalyAlert"
    ]
  ],
  "ai_whisperer/extensions/batch/client.py": [
    [
      "json",
      "json"
    ]
  ],
  "ai_whisperer/extensions/batch/intervention.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Callable",
      "typing.Callable"
    ],
    [
      "Union",
      "typing.Union"
    ],
    [
      "timedelta",
      "datetime.timedelta"
    ],
    [
      "Enum",
      "enum.Enum"
    ],
    [
      "json",
      "json"
    ],
    [
      "EnhancedLogMessage",
      "ai_whisperer.core.logging.EnhancedLogMessage"
    ],
    [
      "LogSource",
      "ai_whisperer.core.logging.LogSource"
    ],
    [
      "ComponentType",
      "ai_whisperer.core.logging.ComponentType"
    ]
  ],
  "ai_whisperer/extensions/batch/server_manager.py": [
    [
      "Optional",
      "typing.Optional"
    ]
  ],
  "ai_whisperer/extensions/batch/monitoring.py": [
    [
      "json",
      "json"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Set",
      "typing.Set"
    ],
    [
      "Tuple",
      "typing.Tuple"
    ],
    [
      "Enum",
      "enum.Enum"
    ],
    [
      "EnhancedLogMessage",
      "ai_whisperer.core.logging.EnhancedLogMessage"
    ]
  ],
  "ai_whisperer/extensions/agents/debbie_tools.py": [
    [
      "List",
      "typing.List"
    ]
  ],
  "ai_whisperer/extensions/agents/decomposed_task.py": [
    [
      "uuid",
      "uuid"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Enum",
      "enum.Enum"
    ]
  ],
  "ai_whisperer/extensions/agents/prompt_optimizer.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Any",
      "typing.Any"
    ]
  ],
  "ai_whisperer/extensions/agents/agent.py": [
    [
      "AgentConfig",
      "ai_whisperer.services.agents.config.AgentConfig"
    ],
    [
      "AgentContext",
      "ai_whisperer.context.agent_context.AgentContext"
    ]
  ],
  "ai_whisperer/extensions/agents/communication.py": [
    [
      "Enum",
      "enum.Enum"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ]
  ],
  "ai_whisperer/extensions/mailbox/mailbox.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Set",
      "typing.Set"
    ],
    [
      "Enum",
      "enum.Enum"
    ]
  ],
  "ai_whisperer/extensions/mailbox/tools.py": [
    [
      "List",
      "typing.List"
    ]
  ],
  "ai_whisperer/utils/validation.py": [
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Path",
      "pathlib.Path"
    ]
  ],
  "ai_whisperer/utils/workspace.py": [
    [
      "os",
      "os"
    ],
    [
      "Any",
      "typing.Any"
    ]
  ],
  "ai_whisperer/utils/helpers.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ]
  ],
  "interactive_server/message_models.py": [
    [
      "BaseModel",
      "pydantic.BaseModel"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "IntEnum",
      "enum.IntEnum"
    ]
  ],
  "interactive_server/debbie_observer.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Callable",
      "typing.Callable"
    ],
    [
      "Set",
      "typing.Set"
    ],
    [
      "timedelta",
      "datetime.timedelta"
    ],
    [
      "Enum",
      "enum.Enum"
    ],
    [
      "json",
      "json"
    ]
  ],
  "interactive_server/__init__.py": [
    [
      "app",
      "main.app"
    ],
    [
      "StatelessSessionManager",
      "stateless_session_manager.StatelessSessionManager"
    ]
  ],
  "interactive_server/models/project.py": [
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "BaseModel",
      "pydantic.BaseModel"
    ]
  ],
  "interactive_server/handlers/workspace_handler.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "PathManager",
      "ai_whisperer.utils.path.PathManager"
    ]
  ],
  "interactive_server/handlers/__init__.py": [
    [
      "WorkspaceHandler",
      "workspace_handler.WorkspaceHandler"
    ]
  ],
  "interactive_server/handlers/plan_handler.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ]
  ],
  "interactive_server/services/__init__.py": [
    [
      "FileService",
      "file_service.FileService"
    ]
  ],
  "interactive_server/services/file_service.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "os",
      "os"
    ],
    [
      "PathManager",
      "ai_whisperer.utils.path.PathManager"
    ]
  ],
  "interactive_server/services/project_manager.py": [
    [
      "os",
      "os"
    ],
    [
      "Optional",
      "typing.Optional"
    ],
    [
      "List",
      "typing.List"
    ],
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Any",
      "typing.Any"
    ],
    [
      "ProjectCreate",
      "models.project.ProjectCreate"
    ],
    [
      "ProjectUpdate",
      "models.project.ProjectUpdate"
    ],
    [
      "ProjectSettings",
      "models.project.ProjectSettings"
    ]
  ],
  "postprocessing/scripted_steps/identity_transform.py": [
    [
      "Dict",
      "typing.Dict"
    ],
    [
      "Tuple",
      "typing.Tuple"
    ]
  ]
}