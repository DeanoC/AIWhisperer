{
    "tasks": {
        "test_task_with_instructions": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task test_task_with_instructions execution: AI response is empty or missing 'message' key.",
                "error_details": null
            },
            "context_manager": {
                "__type__": "ContextManager",
                "history": [
                    {
                        "role": "user",
                        "content": "# Prompt for an AI LLM to Execute a Defined Subtask (Version 2)\n\n**Objective:** Act as an intelligent agent capable of executing a given subtask. You will be provided with a list of instructions (`ACTUAL INSTRUCTIONS`). Your goal is to understand this definition, perform the required actions using the available tools, and produce some output\n**Your Task:**\n\n1. **Execute Instructions:** Follow the `ACTUAL INSTRUCTIONS` step-by-step. **Carefully execute any conditional paths based on your analysis of input data or intermediate results derived during the execution of prior instructions.** To do this, you will need to utilize a specific set of tools provided to you. The primary tools you should expect to use are:\n\n    * **File Reading Tool (e.g., `read_file(filepath: str) -> str`):**\n        * Use this tool to access and read the content of files listed in `input_artifacts` or any other files mentioned in the `instructions`.\n        * Example: If `input_artifacts` contains `\"source_data.txt\"`, you would use `read_file(\"source_data.txt\")` to get its content.\n\n    * **File Writing Tool (e.g., `write_file(filepath: str, content: str) -> None`):**\n        * Use this tool to create new files or overwrite existing ones as specified in `output_artifacts` or by the `instructions`.\n        * Example: If `output_artifacts` contains `\"analysis_report.md\"` and an instruction says \"Write the summary to 'analysis_report.md'\", you would use `write_file(\"analysis_report.md\", \"Your generated summary here.\")`.\n\n    * **Web Search Tool (e.g., `search_web(query: str) -> list[search_result]`):**\n        * Some instructions might require you to find information not present in the input artifacts (e.g., \"verify the capital of country X\" or \"find current information on topic Y\").\n        * Use this tool to perform web searches when explicitly or implicitly required by the `instructions` to gather necessary information.\n        * Example: If an instruction is \"Determine the capital of France\", you might use `search_web(\"capital of France\")`.\n\n2. **Report Completion:** Upon completing the subtask, indicate whether you believe the execution was successful and all validation criteria have been met. If issues were encountered that prevented successful completion, report them clearly.\n\n**Important Considerations:**\n\n* **Tool Usage:** You *must* use the provided tools for interacting with the file system (reading/writing) and for accessing external information (web search). Do not attempt to perform these actions through other means.\n* **Accuracy:** Precision is key. Follow instructions meticulously, especially conditional logic.\n* **Self-Correction/Error Handling:** If an instruction is ambiguous or you encounter an issue (e.g., a file not found when it's expected, and it's not part of a conditional skip), note this in your process. If the subtask definition allows for it (e.g., by mentioning fallback actions), attempt to handle it. Otherwise, report the issue.\n* **Focus:** You will be given one subtask JSON at a time. Focus solely on executing that single subtask.\n\nBy following this prompt, you will act as a reliable executor for a variety of subtasks defined in this structured JSON format, leveraging the specified tools to interact with the environment and produce the desired outcomes.\n\n## ACTUAL INSTRUCTIONS\n"
                    },
                    {
                        "role": "assistant",
                        "content": "Mocked AI response."
                    },
                    {
                        "role": "user",
                        "content": "# Prompt for an AI LLM to Execute a Defined Subtask (Version 2)\n\n**Objective:** Act as an intelligent agent capable of executing a given subtask. You will be provided with a list of instructions (`ACTUAL INSTRUCTIONS`). Your goal is to understand this definition, perform the required actions using the available tools, and produce some output\n**Your Task:**\n\n1. **Execute Instructions:** Follow the `ACTUAL INSTRUCTIONS` step-by-step. **Carefully execute any conditional paths based on your analysis of input data or intermediate results derived during the execution of prior instructions.** To do this, you will need to utilize a specific set of tools provided to you. The primary tools you should expect to use are:\n\n    * **File Reading Tool (e.g., `read_file(filepath: str) -> str`):**\n        * Use this tool to access and read the content of files listed in `input_artifacts` or any other files mentioned in the `instructions`.\n        * Example: If `input_artifacts` contains `\"source_data.txt\"`, you would use `read_file(\"source_data.txt\")` to get its content.\n\n    * **File Writing Tool (e.g., `write_file(filepath: str, content: str) -> None`):**\n        * Use this tool to create new files or overwrite existing ones as specified in `output_artifacts` or by the `instructions`.\n        * Example: If `output_artifacts` contains `\"analysis_report.md\"` and an instruction says \"Write the summary to 'analysis_report.md'\", you would use `write_file(\"analysis_report.md\", \"Your generated summary here.\")`.\n\n    * **Web Search Tool (e.g., `search_web(query: str) -> list[search_result]`):**\n        * Some instructions might require you to find information not present in the input artifacts (e.g., \"verify the capital of country X\" or \"find current information on topic Y\").\n        * Use this tool to perform web searches when explicitly or implicitly required by the `instructions` to gather necessary information.\n        * Example: If an instruction is \"Determine the capital of France\", you might use `search_web(\"capital of France\")`.\n\n2. **Report Completion:** Upon completing the subtask, indicate whether you believe the execution was successful and all validation criteria have been met. If issues were encountered that prevented successful completion, report them clearly.\n\n**Important Considerations:**\n\n* **Tool Usage:** You *must* use the provided tools for interacting with the file system (reading/writing) and for accessing external information (web search). Do not attempt to perform these actions through other means.\n* **Accuracy:** Precision is key. Follow instructions meticulously, especially conditional logic.\n* **Self-Correction/Error Handling:** If an instruction is ambiguous or you encounter an issue (e.g., a file not found when it's expected, and it's not part of a conditional skip), note this in your process. If the subtask definition allows for it (e.g., by mentioning fallback actions), attempt to handle it. Otherwise, report the issue.\n* **Focus:** You will be given one subtask JSON at a time. Focus solely on executing that single subtask.\n\nBy following this prompt, you will act as a reliable executor for a variety of subtasks defined in this structured JSON format, leveraging the specified tools to interact with the environment and produce the desired outcomes.\n\n## ACTUAL INSTRUCTIONS\n"
                    },
                    {
                        "role": "assistant",
                        "content": "Mocked AI response."
                    },
                    {
                        "role": "user",
                        "content": "# Prompt for an AI LLM to Execute a Defined Subtask (Version 2)\n\n**Objective:** Act as an intelligent agent capable of executing a given subtask. You will be provided with a list of instructions (`ACTUAL INSTRUCTIONS`). Your goal is to understand this definition, perform the required actions using the available tools, and produce some output\n**Your Task:**\n\n1. **Execute Instructions:** Follow the `ACTUAL INSTRUCTIONS` step-by-step. **Carefully execute any conditional paths based on your analysis of input data or intermediate results derived during the execution of prior instructions.** To do this, you will need to utilize a specific set of tools provided to you. The primary tools you should expect to use are:\n\n    * **File Reading Tool (e.g., `read_file(filepath: str) -> str`):**\n        * Use this tool to access and read the content of files listed in `input_artifacts` or any other files mentioned in the `instructions`.\n        * Example: If `input_artifacts` contains `\"source_data.txt\"`, you would use `read_file(\"source_data.txt\")` to get its content.\n\n    * **File Writing Tool (e.g., `write_file(filepath: str, content: str) -> None`):**\n        * Use this tool to create new files or overwrite existing ones as specified in `output_artifacts` or by the `instructions`.\n        * Example: If `output_artifacts` contains `\"analysis_report.md\"` and an instruction says \"Write the summary to 'analysis_report.md'\", you would use `write_file(\"analysis_report.md\", \"Your generated summary here.\")`.\n\n    * **Web Search Tool (e.g., `search_web(query: str) -> list[search_result]`):**\n        * Some instructions might require you to find information not present in the input artifacts (e.g., \"verify the capital of country X\" or \"find current information on topic Y\").\n        * Use this tool to perform web searches when explicitly or implicitly required by the `instructions` to gather necessary information.\n        * Example: If an instruction is \"Determine the capital of France\", you might use `search_web(\"capital of France\")`.\n\n2. **Report Completion:** Upon completing the subtask, indicate whether you believe the execution was successful and all validation criteria have been met. If issues were encountered that prevented successful completion, report them clearly.\n\n**Important Considerations:**\n\n* **Tool Usage:** You *must* use the provided tools for interacting with the file system (reading/writing) and for accessing external information (web search). Do not attempt to perform these actions through other means.\n* **Accuracy:** Precision is key. Follow instructions meticulously, especially conditional logic.\n* **Self-Correction/Error Handling:** If an instruction is ambiguous or you encounter an issue (e.g., a file not found when it's expected, and it's not part of a conditional skip), note this in your process. If the subtask definition allows for it (e.g., by mentioning fallback actions), attempt to handle it. Otherwise, report the issue.\n* **Focus:** You will be given one subtask JSON at a time. Focus solely on executing that single subtask.\n\nBy following this prompt, you will act as a reliable executor for a variety of subtasks defined in this structured JSON format, leveraging the specified tools to interact with the environment and produce the desired outcomes.\n\n## ACTUAL INSTRUCTIONS\n"
                    },
                    {
                        "role": "assistant",
                        "content": "Mocked AI response."
                    },
                    {
                        "role": "user",
                        "content": "# Prompt for an AI LLM to Execute a Defined Subtask (Version 2)\n\n**Objective:** Act as an intelligent agent capable of executing a given subtask. You will be provided with a list of instructions (`ACTUAL INSTRUCTIONS`). Your goal is to understand this definition, perform the required actions using the available tools, and produce some output\n**Your Task:**\n\n1. **Execute Instructions:** Follow the `ACTUAL INSTRUCTIONS` step-by-step. **Carefully execute any conditional paths based on your analysis of input data or intermediate results derived during the execution of prior instructions.** To do this, you will need to utilize a specific set of tools provided to you. The primary tools you should expect to use are:\n\n    * **File Reading Tool (e.g., `read_file(filepath: str) -> str`):**\n        * Use this tool to access and read the content of files listed in `input_artifacts` or any other files mentioned in the `instructions`.\n        * Example: If `input_artifacts` contains `\"source_data.txt\"`, you would use `read_file(\"source_data.txt\")` to get its content.\n\n    * **File Writing Tool (e.g., `write_file(filepath: str, content: str) -> None`):**\n        * Use this tool to create new files or overwrite existing ones as specified in `output_artifacts` or by the `instructions`.\n        * Example: If `output_artifacts` contains `\"analysis_report.md\"` and an instruction says \"Write the summary to 'analysis_report.md'\", you would use `write_file(\"analysis_report.md\", \"Your generated summary here.\")`.\n\n    * **Web Search Tool (e.g., `search_web(query: str) -> list[search_result]`):**\n        * Some instructions might require you to find information not present in the input artifacts (e.g., \"verify the capital of country X\" or \"find current information on topic Y\").\n        * Use this tool to perform web searches when explicitly or implicitly required by the `instructions` to gather necessary information.\n        * Example: If an instruction is \"Determine the capital of France\", you might use `search_web(\"capital of France\")`.\n\n2. **Report Completion:** Upon completing the subtask, indicate whether you believe the execution was successful and all validation criteria have been met. If issues were encountered that prevented successful completion, report them clearly.\n\n**Important Considerations:**\n\n* **Tool Usage:** You *must* use the provided tools for interacting with the file system (reading/writing) and for accessing external information (web search). Do not attempt to perform these actions through other means.\n* **Accuracy:** Precision is key. Follow instructions meticulously, especially conditional logic.\n* **Self-Correction/Error Handling:** If an instruction is ambiguous or you encounter an issue (e.g., a file not found when it's expected, and it's not part of a conditional skip), note this in your process. If the subtask definition allows for it (e.g., by mentioning fallback actions), attempt to handle it. Otherwise, report the issue.\n* **Focus:** You will be given one subtask JSON at a time. Focus solely on executing that single subtask.\n\nBy following this prompt, you will act as a reliable executor for a variety of subtasks defined in this structured JSON format, leveraging the specified tools to interact with the environment and produce the desired outcomes.\n\n## ACTUAL INSTRUCTIONS\n"
                    },
                    {
                        "role": "assistant",
                        "content": "Mocked AI response."
                    },
                    {
                        "role": "user",
                        "content": "# Prompt for an AI LLM to Execute a Defined Subtask (Version 2)\n\n**Objective:** Act as an intelligent agent capable of executing a given subtask. You will be provided with a list of instructions (`ACTUAL INSTRUCTIONS`). Your goal is to understand this definition, perform the required actions using the available tools, and produce some output\n**Your Task:**\n\n1. **Execute Instructions:** Follow the `ACTUAL INSTRUCTIONS` step-by-step. **Carefully execute any conditional paths based on your analysis of input data or intermediate results derived during the execution of prior instructions.** To do this, you will need to utilize a specific set of tools provided to you. The primary tools you should expect to use are:\n\n    * **File Reading Tool (e.g., `read_file(filepath: str) -> str`):**\n        * Use this tool to access and read the content of files listed in `input_artifacts` or any other files mentioned in the `instructions`.\n        * Example: If `input_artifacts` contains `\"source_data.txt\"`, you would use `read_file(\"source_data.txt\")` to get its content.\n\n    * **File Writing Tool (e.g., `write_file(filepath: str, content: str) -> None`):**\n        * Use this tool to create new files or overwrite existing ones as specified in `output_artifacts` or by the `instructions`.\n        * Example: If `output_artifacts` contains `\"analysis_report.md\"` and an instruction says \"Write the summary to 'analysis_report.md'\", you would use `write_file(\"analysis_report.md\", \"Your generated summary here.\")`.\n\n    * **Web Search Tool (e.g., `search_web(query: str) -> list[search_result]`):**\n        * Some instructions might require you to find information not present in the input artifacts (e.g., \"verify the capital of country X\" or \"find current information on topic Y\").\n        * Use this tool to perform web searches when explicitly or implicitly required by the `instructions` to gather necessary information.\n        * Example: If an instruction is \"Determine the capital of France\", you might use `search_web(\"capital of France\")`.\n\n2. **Report Completion:** Upon completing the subtask, indicate whether you believe the execution was successful and all validation criteria have been met. If issues were encountered that prevented successful completion, report them clearly.\n\n**Important Considerations:**\n\n* **Tool Usage:** You *must* use the provided tools for interacting with the file system (reading/writing) and for accessing external information (web search). Do not attempt to perform these actions through other means.\n* **Accuracy:** Precision is key. Follow instructions meticulously, especially conditional logic.\n* **Self-Correction/Error Handling:** If an instruction is ambiguous or you encounter an issue (e.g., a file not found when it's expected, and it's not part of a conditional skip), note this in your process. If the subtask definition allows for it (e.g., by mentioning fallback actions), attempt to handle it. Otherwise, report the issue.\n* **Focus:** You will be given one subtask JSON at a time. Focus solely on executing that single subtask.\n\nBy following this prompt, you will act as a reliable executor for a variety of subtasks defined in this structured JSON format, leveraging the specified tools to interact with the environment and produce the desired outcomes.\n\n## ACTUAL INSTRUCTIONS\n"
                    },
                    {
                        "role": "assistant",
                        "content": "Mocked AI response."
                    }
                ]
            }
        },
        "test_task_no_instructions": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task test_task_no_instructions execution: AI response is empty or missing 'message' key.",
                "error_details": null
            },
            "context_manager": {
                "__type__": "ContextManager",
                "history": [
                    {
                        "role": "user",
                        "content": "# Prompt for an AI LLM to Execute a Defined Subtask (Version 2)\n\n**Objective:** Act as an intelligent agent capable of executing a given subtask. You will be provided with a list of instructions (`ACTUAL INSTRUCTIONS`). Your goal is to understand this definition, perform the required actions using the available tools, and produce some output\n**Your Task:**\n\n1. **Execute Instructions:** Follow the `ACTUAL INSTRUCTIONS` step-by-step. **Carefully execute any conditional paths based on your analysis of input data or intermediate results derived during the execution of prior instructions.** To do this, you will need to utilize a specific set of tools provided to you. The primary tools you should expect to use are:\n\n    * **File Reading Tool (e.g., `read_file(filepath: str) -> str`):**\n        * Use this tool to access and read the content of files listed in `input_artifacts` or any other files mentioned in the `instructions`.\n        * Example: If `input_artifacts` contains `\"source_data.txt\"`, you would use `read_file(\"source_data.txt\")` to get its content.\n\n    * **File Writing Tool (e.g., `write_file(filepath: str, content: str) -> None`):**\n        * Use this tool to create new files or overwrite existing ones as specified in `output_artifacts` or by the `instructions`.\n        * Example: If `output_artifacts` contains `\"analysis_report.md\"` and an instruction says \"Write the summary to 'analysis_report.md'\", you would use `write_file(\"analysis_report.md\", \"Your generated summary here.\")`.\n\n    * **Web Search Tool (e.g., `search_web(query: str) -> list[search_result]`):**\n        * Some instructions might require you to find information not present in the input artifacts (e.g., \"verify the capital of country X\" or \"find current information on topic Y\").\n        * Use this tool to perform web searches when explicitly or implicitly required by the `instructions` to gather necessary information.\n        * Example: If an instruction is \"Determine the capital of France\", you might use `search_web(\"capital of France\")`.\n\n2. **Report Completion:** Upon completing the subtask, indicate whether you believe the execution was successful and all validation criteria have been met. If issues were encountered that prevented successful completion, report them clearly.\n\n**Important Considerations:**\n\n* **Tool Usage:** You *must* use the provided tools for interacting with the file system (reading/writing) and for accessing external information (web search). Do not attempt to perform these actions through other means.\n* **Accuracy:** Precision is key. Follow instructions meticulously, especially conditional logic.\n* **Self-Correction/Error Handling:** If an instruction is ambiguous or you encounter an issue (e.g., a file not found when it's expected, and it's not part of a conditional skip), note this in your process. If the subtask definition allows for it (e.g., by mentioning fallback actions), attempt to handle it. Otherwise, report the issue.\n* **Focus:** You will be given one subtask JSON at a time. Focus solely on executing that single subtask.\n\nBy following this prompt, you will act as a reliable executor for a variety of subtasks defined in this structured JSON format, leveraging the specified tools to interact with the environment and produce the desired outcomes.\n\n## ACTUAL INSTRUCTIONS\n"
                    },
                    {
                        "role": "assistant",
                        "content": "Mocked AI response."
                    },
                    {
                        "role": "user",
                        "content": "# Prompt for an AI LLM to Execute a Defined Subtask (Version 2)\n\n**Objective:** Act as an intelligent agent capable of executing a given subtask. You will be provided with a list of instructions (`ACTUAL INSTRUCTIONS`). Your goal is to understand this definition, perform the required actions using the available tools, and produce some output\n**Your Task:**\n\n1. **Execute Instructions:** Follow the `ACTUAL INSTRUCTIONS` step-by-step. **Carefully execute any conditional paths based on your analysis of input data or intermediate results derived during the execution of prior instructions.** To do this, you will need to utilize a specific set of tools provided to you. The primary tools you should expect to use are:\n\n    * **File Reading Tool (e.g., `read_file(filepath: str) -> str`):**\n        * Use this tool to access and read the content of files listed in `input_artifacts` or any other files mentioned in the `instructions`.\n        * Example: If `input_artifacts` contains `\"source_data.txt\"`, you would use `read_file(\"source_data.txt\")` to get its content.\n\n    * **File Writing Tool (e.g., `write_file(filepath: str, content: str) -> None`):**\n        * Use this tool to create new files or overwrite existing ones as specified in `output_artifacts` or by the `instructions`.\n        * Example: If `output_artifacts` contains `\"analysis_report.md\"` and an instruction says \"Write the summary to 'analysis_report.md'\", you would use `write_file(\"analysis_report.md\", \"Your generated summary here.\")`.\n\n    * **Web Search Tool (e.g., `search_web(query: str) -> list[search_result]`):**\n        * Some instructions might require you to find information not present in the input artifacts (e.g., \"verify the capital of country X\" or \"find current information on topic Y\").\n        * Use this tool to perform web searches when explicitly or implicitly required by the `instructions` to gather necessary information.\n        * Example: If an instruction is \"Determine the capital of France\", you might use `search_web(\"capital of France\")`.\n\n2. **Report Completion:** Upon completing the subtask, indicate whether you believe the execution was successful and all validation criteria have been met. If issues were encountered that prevented successful completion, report them clearly.\n\n**Important Considerations:**\n\n* **Tool Usage:** You *must* use the provided tools for interacting with the file system (reading/writing) and for accessing external information (web search). Do not attempt to perform these actions through other means.\n* **Accuracy:** Precision is key. Follow instructions meticulously, especially conditional logic.\n* **Self-Correction/Error Handling:** If an instruction is ambiguous or you encounter an issue (e.g., a file not found when it's expected, and it's not part of a conditional skip), note this in your process. If the subtask definition allows for it (e.g., by mentioning fallback actions), attempt to handle it. Otherwise, report the issue.\n* **Focus:** You will be given one subtask JSON at a time. Focus solely on executing that single subtask.\n\nBy following this prompt, you will act as a reliable executor for a variety of subtasks defined in this structured JSON format, leveraging the specified tools to interact with the environment and produce the desired outcomes.\n\n## ACTUAL INSTRUCTIONS\n"
                    },
                    {
                        "role": "assistant",
                        "content": "Mocked AI response."
                    },
                    {
                        "role": "user",
                        "content": "# Prompt for an AI LLM to Execute a Defined Subtask (Version 2)\n\n**Objective:** Act as an intelligent agent capable of executing a given subtask. You will be provided with a list of instructions (`ACTUAL INSTRUCTIONS`). Your goal is to understand this definition, perform the required actions using the available tools, and produce some output\n**Your Task:**\n\n1. **Execute Instructions:** Follow the `ACTUAL INSTRUCTIONS` step-by-step. **Carefully execute any conditional paths based on your analysis of input data or intermediate results derived during the execution of prior instructions.** To do this, you will need to utilize a specific set of tools provided to you. The primary tools you should expect to use are:\n\n    * **File Reading Tool (e.g., `read_file(filepath: str) -> str`):**\n        * Use this tool to access and read the content of files listed in `input_artifacts` or any other files mentioned in the `instructions`.\n        * Example: If `input_artifacts` contains `\"source_data.txt\"`, you would use `read_file(\"source_data.txt\")` to get its content.\n\n    * **File Writing Tool (e.g., `write_file(filepath: str, content: str) -> None`):**\n        * Use this tool to create new files or overwrite existing ones as specified in `output_artifacts` or by the `instructions`.\n        * Example: If `output_artifacts` contains `\"analysis_report.md\"` and an instruction says \"Write the summary to 'analysis_report.md'\", you would use `write_file(\"analysis_report.md\", \"Your generated summary here.\")`.\n\n    * **Web Search Tool (e.g., `search_web(query: str) -> list[search_result]`):**\n        * Some instructions might require you to find information not present in the input artifacts (e.g., \"verify the capital of country X\" or \"find current information on topic Y\").\n        * Use this tool to perform web searches when explicitly or implicitly required by the `instructions` to gather necessary information.\n        * Example: If an instruction is \"Determine the capital of France\", you might use `search_web(\"capital of France\")`.\n\n2. **Report Completion:** Upon completing the subtask, indicate whether you believe the execution was successful and all validation criteria have been met. If issues were encountered that prevented successful completion, report them clearly.\n\n**Important Considerations:**\n\n* **Tool Usage:** You *must* use the provided tools for interacting with the file system (reading/writing) and for accessing external information (web search). Do not attempt to perform these actions through other means.\n* **Accuracy:** Precision is key. Follow instructions meticulously, especially conditional logic.\n* **Self-Correction/Error Handling:** If an instruction is ambiguous or you encounter an issue (e.g., a file not found when it's expected, and it's not part of a conditional skip), note this in your process. If the subtask definition allows for it (e.g., by mentioning fallback actions), attempt to handle it. Otherwise, report the issue.\n* **Focus:** You will be given one subtask JSON at a time. Focus solely on executing that single subtask.\n\nBy following this prompt, you will act as a reliable executor for a variety of subtasks defined in this structured JSON format, leveraging the specified tools to interact with the environment and produce the desired outcomes.\n\n## ACTUAL INSTRUCTIONS\n"
                    },
                    {
                        "role": "assistant",
                        "content": "Mocked AI response."
                    },
                    {
                        "role": "user",
                        "content": "# Prompt for an AI LLM to Execute a Defined Subtask (Version 2)\n\n**Objective:** Act as an intelligent agent capable of executing a given subtask. You will be provided with a list of instructions (`ACTUAL INSTRUCTIONS`). Your goal is to understand this definition, perform the required actions using the available tools, and produce some output\n**Your Task:**\n\n1. **Execute Instructions:** Follow the `ACTUAL INSTRUCTIONS` step-by-step. **Carefully execute any conditional paths based on your analysis of input data or intermediate results derived during the execution of prior instructions.** To do this, you will need to utilize a specific set of tools provided to you. The primary tools you should expect to use are:\n\n    * **File Reading Tool (e.g., `read_file(filepath: str) -> str`):**\n        * Use this tool to access and read the content of files listed in `input_artifacts` or any other files mentioned in the `instructions`.\n        * Example: If `input_artifacts` contains `\"source_data.txt\"`, you would use `read_file(\"source_data.txt\")` to get its content.\n\n    * **File Writing Tool (e.g., `write_file(filepath: str, content: str) -> None`):**\n        * Use this tool to create new files or overwrite existing ones as specified in `output_artifacts` or by the `instructions`.\n        * Example: If `output_artifacts` contains `\"analysis_report.md\"` and an instruction says \"Write the summary to 'analysis_report.md'\", you would use `write_file(\"analysis_report.md\", \"Your generated summary here.\")`.\n\n    * **Web Search Tool (e.g., `search_web(query: str) -> list[search_result]`):**\n        * Some instructions might require you to find information not present in the input artifacts (e.g., \"verify the capital of country X\" or \"find current information on topic Y\").\n        * Use this tool to perform web searches when explicitly or implicitly required by the `instructions` to gather necessary information.\n        * Example: If an instruction is \"Determine the capital of France\", you might use `search_web(\"capital of France\")`.\n\n2. **Report Completion:** Upon completing the subtask, indicate whether you believe the execution was successful and all validation criteria have been met. If issues were encountered that prevented successful completion, report them clearly.\n\n**Important Considerations:**\n\n* **Tool Usage:** You *must* use the provided tools for interacting with the file system (reading/writing) and for accessing external information (web search). Do not attempt to perform these actions through other means.\n* **Accuracy:** Precision is key. Follow instructions meticulously, especially conditional logic.\n* **Self-Correction/Error Handling:** If an instruction is ambiguous or you encounter an issue (e.g., a file not found when it's expected, and it's not part of a conditional skip), note this in your process. If the subtask definition allows for it (e.g., by mentioning fallback actions), attempt to handle it. Otherwise, report the issue.\n* **Focus:** You will be given one subtask JSON at a time. Focus solely on executing that single subtask.\n\nBy following this prompt, you will act as a reliable executor for a variety of subtasks defined in this structured JSON format, leveraging the specified tools to interact with the environment and produce the desired outcomes.\n\n## ACTUAL INSTRUCTIONS\n"
                    },
                    {
                        "role": "assistant",
                        "content": "Mocked AI response."
                    },
                    {
                        "role": "user",
                        "content": "# Prompt for an AI LLM to Execute a Defined Subtask (Version 2)\n\n**Objective:** Act as an intelligent agent capable of executing a given subtask. You will be provided with a list of instructions (`ACTUAL INSTRUCTIONS`). Your goal is to understand this definition, perform the required actions using the available tools, and produce some output\n**Your Task:**\n\n1. **Execute Instructions:** Follow the `ACTUAL INSTRUCTIONS` step-by-step. **Carefully execute any conditional paths based on your analysis of input data or intermediate results derived during the execution of prior instructions.** To do this, you will need to utilize a specific set of tools provided to you. The primary tools you should expect to use are:\n\n    * **File Reading Tool (e.g., `read_file(filepath: str) -> str`):**\n        * Use this tool to access and read the content of files listed in `input_artifacts` or any other files mentioned in the `instructions`.\n        * Example: If `input_artifacts` contains `\"source_data.txt\"`, you would use `read_file(\"source_data.txt\")` to get its content.\n\n    * **File Writing Tool (e.g., `write_file(filepath: str, content: str) -> None`):**\n        * Use this tool to create new files or overwrite existing ones as specified in `output_artifacts` or by the `instructions`.\n        * Example: If `output_artifacts` contains `\"analysis_report.md\"` and an instruction says \"Write the summary to 'analysis_report.md'\", you would use `write_file(\"analysis_report.md\", \"Your generated summary here.\")`.\n\n    * **Web Search Tool (e.g., `search_web(query: str) -> list[search_result]`):**\n        * Some instructions might require you to find information not present in the input artifacts (e.g., \"verify the capital of country X\" or \"find current information on topic Y\").\n        * Use this tool to perform web searches when explicitly or implicitly required by the `instructions` to gather necessary information.\n        * Example: If an instruction is \"Determine the capital of France\", you might use `search_web(\"capital of France\")`.\n\n2. **Report Completion:** Upon completing the subtask, indicate whether you believe the execution was successful and all validation criteria have been met. If issues were encountered that prevented successful completion, report them clearly.\n\n**Important Considerations:**\n\n* **Tool Usage:** You *must* use the provided tools for interacting with the file system (reading/writing) and for accessing external information (web search). Do not attempt to perform these actions through other means.\n* **Accuracy:** Precision is key. Follow instructions meticulously, especially conditional logic.\n* **Self-Correction/Error Handling:** If an instruction is ambiguous or you encounter an issue (e.g., a file not found when it's expected, and it's not part of a conditional skip), note this in your process. If the subtask definition allows for it (e.g., by mentioning fallback actions), attempt to handle it. Otherwise, report the issue.\n* **Focus:** You will be given one subtask JSON at a time. Focus solely on executing that single subtask.\n\nBy following this prompt, you will act as a reliable executor for a variety of subtasks defined in this structured JSON format, leveraging the specified tools to interact with the environment and produce the desired outcomes.\n\n## ACTUAL INSTRUCTIONS\n"
                    },
                    {
                        "role": "assistant",
                        "content": "Mocked AI response."
                    }
                ]
            }
        },
        "test_task_instructions_only": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task test_task_instructions_only execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "fd037adf-ea35-4f9a-80de-6d6419da12a9": {
            "status": "completed",
            "result": "Mocked AI response."
        },
        "709b9cab-6d07-402e-ae32-1b9018ba01fc": {
            "status": "completed",
            "result": "Mocked AI response."
        },
        "581c7bf2-da91-4f4d-b276-1305a1695e6a": {
            "status": "completed",
            "result": "Mocked AI response."
        },
        "1cb80edf-2d47-48b1-9b67-4fe34ce43ac3": {
            "status": "completed",
            "result": "Mocked AI response."
        },
        "0cca400d-2f9d-4658-9334-46670f650eab": {
            "status": "completed",
            "result": "Mocked AI response."
        },
        "5583f919-2bd9-450f-bf7b-6df364a1239c": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 5583f919-2bd9-450f-bf7b-6df364a1239c execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "b55ab23c-9616-44cd-a636-271764ceb88b": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task b55ab23c-9616-44cd-a636-271764ceb88b execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "bc9ab82a-fe7f-449a-89ff-38bc938ee754": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task bc9ab82a-fe7f-449a-89ff-38bc938ee754 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "52d6fe8b-6bcb-4dd1-be14-db0d981697bf": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 52d6fe8b-6bcb-4dd1-be14-db0d981697bf execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "58487986-f1ce-42d4-be22-f25e032cfc7d": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 58487986-f1ce-42d4-be22-f25e032cfc7d execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "f8b32c06-9384-4df5-b3e3-4a81a5c0bd3c": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task f8b32c06-9384-4df5-b3e3-4a81a5c0bd3c execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "2edf0e40-2d9f-4192-8669-29ce4b4c6b51": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 2edf0e40-2d9f-4192-8669-29ce4b4c6b51 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "e44153b1-98b0-4fa2-9c80-fe71b9d4bc26": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task e44153b1-98b0-4fa2-9c80-fe71b9d4bc26 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "83da0eec-7ac8-4b6e-824a-ac2d4227aca9": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 83da0eec-7ac8-4b6e-824a-ac2d4227aca9 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "bc4bc256-1063-4b4b-ba49-b073b3fcd1cf": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task bc4bc256-1063-4b4b-ba49-b073b3fcd1cf execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "1275bbe9-596b-4787-a1bd-22fc1e3718dd": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 1275bbe9-596b-4787-a1bd-22fc1e3718dd execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "c93f84a8-2b2f-48b5-af4c-da183a5523ce": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task c93f84a8-2b2f-48b5-af4c-da183a5523ce execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "7400f416-5b74-4645-93d9-4e03d6bbcbb7": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 7400f416-5b74-4645-93d9-4e03d6bbcbb7 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "563b02df-2f53-4995-a277-c1f6f7875c07": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 563b02df-2f53-4995-a277-c1f6f7875c07 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "dfaddfa8-b36d-4a5a-a1d9-95e608f50811": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task dfaddfa8-b36d-4a5a-a1d9-95e608f50811 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "24fc49b1-8335-4500-889f-5988a477d006": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 24fc49b1-8335-4500-889f-5988a477d006 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "40fc1935-b8bd-4da1-9031-ba6378269b3c": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 40fc1935-b8bd-4da1-9031-ba6378269b3c execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "4a4b7ea1-add7-49a0-89b9-35801cea0567": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 4a4b7ea1-add7-49a0-89b9-35801cea0567 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "166676c0-3d12-4be3-af03-10746b17ac36": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 166676c0-3d12-4be3-af03-10746b17ac36 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "41b1a19f-53d7-4764-8df3-989b67333b97": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 41b1a19f-53d7-4764-8df3-989b67333b97 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "5c49e5ca-9766-4ff5-b24d-72cb7b3af255": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 5c49e5ca-9766-4ff5-b24d-72cb7b3af255 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "495edbe3-885f-40e2-817c-97d03ffaca59": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 495edbe3-885f-40e2-817c-97d03ffaca59 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "43ef6c3d-5c0e-4ff8-9eab-277d745f1f23": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 43ef6c3d-5c0e-4ff8-9eab-277d745f1f23 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "42af31e3-e98c-4d50-a333-66379c13bba6": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 42af31e3-e98c-4d50-a333-66379c13bba6 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "b2e0f1e4-77bd-44df-9403-c6393cf6aa58": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task b2e0f1e4-77bd-44df-9403-c6393cf6aa58 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "a1b5e66a-3ac5-4ddc-a369-0408708b9fd1": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task a1b5e66a-3ac5-4ddc-a369-0408708b9fd1 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "012e4b12-a561-4c92-b541-5ecad2d02588": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 012e4b12-a561-4c92-b541-5ecad2d02588 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "a32fcf87-b62d-4a82-819f-f00167667f2c": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task a32fcf87-b62d-4a82-819f-f00167667f2c execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "90a704cd-d924-4251-9191-8e3f759f32e6": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 90a704cd-d924-4251-9191-8e3f759f32e6 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "b4961eee-4fb4-4d07-87a9-10c8a7e9506c": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task b4961eee-4fb4-4d07-87a9-10c8a7e9506c execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "6c2ded5a-8cd9-45bb-8d24-986fb5835dc1": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 6c2ded5a-8cd9-45bb-8d24-986fb5835dc1 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "21baa9b5-1284-4153-8c8e-14686fabea48": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 21baa9b5-1284-4153-8c8e-14686fabea48 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "234a5977-af46-4226-8197-76aa3347845f": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 234a5977-af46-4226-8197-76aa3347845f execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "04242893-d76e-425e-928b-b6d54b0c9f98": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 04242893-d76e-425e-928b-b6d54b0c9f98 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "347ac5b6-e75c-4b70-8d01-d061f5688176": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 347ac5b6-e75c-4b70-8d01-d061f5688176 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "4f08ef89-9276-4dbc-8eab-30dc67986fde": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 4f08ef89-9276-4dbc-8eab-30dc67986fde execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "ece6eb75-8728-4da2-b30b-d0b4c0dca060": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task ece6eb75-8728-4da2-b30b-d0b4c0dca060 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "e17154fe-f86b-43e7-855c-031b7daa0ee2": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task e17154fe-f86b-43e7-855c-031b7daa0ee2 execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        },
        "1415b5a3-f7d9-4cf1-8469-c6405be54fdb": {
            "status": "failed",
            "result": {
                "status": "failed",
                "error": "An unexpected error occurred during AI interaction task 1415b5a3-f7d9-4cf1-8469-c6405be54fdb execution: AI response is empty or missing 'message' key.",
                "error_details": null
            }
        }
    },
    "global_state": {},
    "plan_id": "dummy_task_id_ai_interaction_only"
}